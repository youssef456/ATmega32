
LCD_Applications.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000021a8  0000223c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800070  00800070  0000224c  2**0
                  ALLOC
  3 .stab         000015fc  00000000  00000000  0000224c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c41  00000000  00000000  00003848  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00004489  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000045e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00004778  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000067bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  000078be  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00008840  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  000089c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00008c82  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009510  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ea       	ldi	r30, 0xA8	; 168
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 37       	cpi	r26, 0x71	; 113
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <main>
      8a:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9b 10 	jmp	0x2136	; 0x2136 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e6       	ldi	r26, 0x68	; 104
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b7 10 	jmp	0x216e	; 0x216e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c3 10 	jmp	0x2186	; 0x2186 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c3 10 	jmp	0x2186	; 0x2186 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9b 10 	jmp	0x2136	; 0x2136 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e6       	ldi	r24, 0x68	; 104
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b7 10 	jmp	0x216e	; 0x216e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a3 10 	jmp	0x2146	; 0x2146 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 e6       	ldi	r22, 0x68	; 104
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 bf 10 	jmp	0x217e	; 0x217e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c3 10 	jmp	0x2186	; 0x2186 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c3 10 	jmp	0x2186	; 0x2186 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c3 10 	jmp	0x2186	; 0x2186 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ab 10 	jmp	0x2156	; 0x2156 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_U8_SetPinValue>:
#include "bit_calc.h"
#include "DIO_Config.h"
#include "DIO_Private.h"
#include "DIO_Interface.h"

u8 DIO_U8_SetPinValue(u8 copy_U8_Port_ID,u8 copy_U8_Pin_ID, u8 copy_U8_Pin_Val){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <DIO_U8_SetPinValue+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <DIO_U8_SetPinValue+0x8>
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <DIO_U8_SetPinValue+0xa>
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	6a 83       	std	Y+2, r22	; 0x02
     cb0:	4b 83       	std	Y+3, r20	; 0x03

	if((copy_U8_Pin_ID>=PIN0) && (copy_U8_Pin_ID <= PIN7) ){
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	88 30       	cpi	r24, 0x08	; 8
     cb6:	08 f0       	brcs	.+2      	; 0xcba <DIO_U8_SetPinValue+0x1c>
     cb8:	de c0       	rjmp	.+444    	; 0xe76 <DIO_U8_SetPinValue+0x1d8>
		if((copy_U8_Pin_Val == LOW) || (copy_U8_Pin_Val ==HIGH) ){
     cba:	8b 81       	ldd	r24, Y+3	; 0x03
     cbc:	88 23       	and	r24, r24
     cbe:	21 f0       	breq	.+8      	; 0xcc8 <DIO_U8_SetPinValue+0x2a>
     cc0:	8b 81       	ldd	r24, Y+3	; 0x03
     cc2:	81 30       	cpi	r24, 0x01	; 1
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <DIO_U8_SetPinValue+0x2a>
     cc6:	d4 c0       	rjmp	.+424    	; 0xe70 <DIO_U8_SetPinValue+0x1d2>
			switch(copy_U8_Port_ID){
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	3e 83       	std	Y+6, r19	; 0x06
     cd0:	2d 83       	std	Y+5, r18	; 0x05
     cd2:	8d 81       	ldd	r24, Y+5	; 0x05
     cd4:	9e 81       	ldd	r25, Y+6	; 0x06
     cd6:	81 30       	cpi	r24, 0x01	; 1
     cd8:	91 05       	cpc	r25, r1
     cda:	09 f4       	brne	.+2      	; 0xcde <DIO_U8_SetPinValue+0x40>
     cdc:	43 c0       	rjmp	.+134    	; 0xd64 <DIO_U8_SetPinValue+0xc6>
     cde:	2d 81       	ldd	r18, Y+5	; 0x05
     ce0:	3e 81       	ldd	r19, Y+6	; 0x06
     ce2:	22 30       	cpi	r18, 0x02	; 2
     ce4:	31 05       	cpc	r19, r1
     ce6:	2c f4       	brge	.+10     	; 0xcf2 <DIO_U8_SetPinValue+0x54>
     ce8:	8d 81       	ldd	r24, Y+5	; 0x05
     cea:	9e 81       	ldd	r25, Y+6	; 0x06
     cec:	00 97       	sbiw	r24, 0x00	; 0
     cee:	71 f0       	breq	.+28     	; 0xd0c <DIO_U8_SetPinValue+0x6e>
     cf0:	bc c0       	rjmp	.+376    	; 0xe6a <DIO_U8_SetPinValue+0x1cc>
     cf2:	2d 81       	ldd	r18, Y+5	; 0x05
     cf4:	3e 81       	ldd	r19, Y+6	; 0x06
     cf6:	22 30       	cpi	r18, 0x02	; 2
     cf8:	31 05       	cpc	r19, r1
     cfa:	09 f4       	brne	.+2      	; 0xcfe <DIO_U8_SetPinValue+0x60>
     cfc:	5f c0       	rjmp	.+190    	; 0xdbc <DIO_U8_SetPinValue+0x11e>
     cfe:	8d 81       	ldd	r24, Y+5	; 0x05
     d00:	9e 81       	ldd	r25, Y+6	; 0x06
     d02:	83 30       	cpi	r24, 0x03	; 3
     d04:	91 05       	cpc	r25, r1
     d06:	09 f4       	brne	.+2      	; 0xd0a <DIO_U8_SetPinValue+0x6c>
     d08:	85 c0       	rjmp	.+266    	; 0xe14 <DIO_U8_SetPinValue+0x176>
     d0a:	af c0       	rjmp	.+350    	; 0xe6a <DIO_U8_SetPinValue+0x1cc>
				case Group_A:
					assign_Bit(DIO_U8_PORTA,copy_U8_Pin_ID,copy_U8_Pin_Val);
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	81 30       	cpi	r24, 0x01	; 1
     d10:	a1 f4       	brne	.+40     	; 0xd3a <DIO_U8_SetPinValue+0x9c>
     d12:	ab e3       	ldi	r26, 0x3B	; 59
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	eb e3       	ldi	r30, 0x3B	; 59
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	48 2f       	mov	r20, r24
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	02 2e       	mov	r0, r18
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <DIO_U8_SetPinValue+0x92>
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	0a 94       	dec	r0
     d32:	e2 f7       	brpl	.-8      	; 0xd2c <DIO_U8_SetPinValue+0x8e>
     d34:	84 2b       	or	r24, r20
     d36:	8c 93       	st	X, r24
     d38:	98 c0       	rjmp	.+304    	; 0xe6a <DIO_U8_SetPinValue+0x1cc>
     d3a:	ab e3       	ldi	r26, 0x3B	; 59
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	eb e3       	ldi	r30, 0x3B	; 59
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	48 2f       	mov	r20, r24
     d46:	8a 81       	ldd	r24, Y+2	; 0x02
     d48:	28 2f       	mov	r18, r24
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	02 2e       	mov	r0, r18
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <DIO_U8_SetPinValue+0xba>
     d54:	88 0f       	add	r24, r24
     d56:	99 1f       	adc	r25, r25
     d58:	0a 94       	dec	r0
     d5a:	e2 f7       	brpl	.-8      	; 0xd54 <DIO_U8_SetPinValue+0xb6>
     d5c:	80 95       	com	r24
     d5e:	84 23       	and	r24, r20
     d60:	8c 93       	st	X, r24
     d62:	83 c0       	rjmp	.+262    	; 0xe6a <DIO_U8_SetPinValue+0x1cc>
					break;
				case Group_B:
					assign_Bit(DIO_U8_PORTB,copy_U8_Pin_ID,copy_U8_Pin_Val);
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	81 30       	cpi	r24, 0x01	; 1
     d68:	a1 f4       	brne	.+40     	; 0xd92 <DIO_U8_SetPinValue+0xf4>
     d6a:	a8 e3       	ldi	r26, 0x38	; 56
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e8 e3       	ldi	r30, 0x38	; 56
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	48 2f       	mov	r20, r24
     d76:	8a 81       	ldd	r24, Y+2	; 0x02
     d78:	28 2f       	mov	r18, r24
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	02 2e       	mov	r0, r18
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <DIO_U8_SetPinValue+0xea>
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	0a 94       	dec	r0
     d8a:	e2 f7       	brpl	.-8      	; 0xd84 <DIO_U8_SetPinValue+0xe6>
     d8c:	84 2b       	or	r24, r20
     d8e:	8c 93       	st	X, r24
     d90:	6c c0       	rjmp	.+216    	; 0xe6a <DIO_U8_SetPinValue+0x1cc>
     d92:	a8 e3       	ldi	r26, 0x38	; 56
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	e8 e3       	ldi	r30, 0x38	; 56
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	48 2f       	mov	r20, r24
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	02 2e       	mov	r0, r18
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <DIO_U8_SetPinValue+0x112>
     dac:	88 0f       	add	r24, r24
     dae:	99 1f       	adc	r25, r25
     db0:	0a 94       	dec	r0
     db2:	e2 f7       	brpl	.-8      	; 0xdac <DIO_U8_SetPinValue+0x10e>
     db4:	80 95       	com	r24
     db6:	84 23       	and	r24, r20
     db8:	8c 93       	st	X, r24
     dba:	57 c0       	rjmp	.+174    	; 0xe6a <DIO_U8_SetPinValue+0x1cc>
					break;
				case Group_C:
					assign_Bit(DIO_U8_PORTC,copy_U8_Pin_ID,copy_U8_Pin_Val);
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	81 30       	cpi	r24, 0x01	; 1
     dc0:	a1 f4       	brne	.+40     	; 0xdea <DIO_U8_SetPinValue+0x14c>
     dc2:	a5 e3       	ldi	r26, 0x35	; 53
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e5 e3       	ldi	r30, 0x35	; 53
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	48 2f       	mov	r20, r24
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	02 2e       	mov	r0, r18
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <DIO_U8_SetPinValue+0x142>
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	0a 94       	dec	r0
     de2:	e2 f7       	brpl	.-8      	; 0xddc <DIO_U8_SetPinValue+0x13e>
     de4:	84 2b       	or	r24, r20
     de6:	8c 93       	st	X, r24
     de8:	40 c0       	rjmp	.+128    	; 0xe6a <DIO_U8_SetPinValue+0x1cc>
     dea:	a5 e3       	ldi	r26, 0x35	; 53
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e5 e3       	ldi	r30, 0x35	; 53
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	48 2f       	mov	r20, r24
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	02 2e       	mov	r0, r18
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <DIO_U8_SetPinValue+0x16a>
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	0a 94       	dec	r0
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <DIO_U8_SetPinValue+0x166>
     e0c:	80 95       	com	r24
     e0e:	84 23       	and	r24, r20
     e10:	8c 93       	st	X, r24
     e12:	2b c0       	rjmp	.+86     	; 0xe6a <DIO_U8_SetPinValue+0x1cc>
					break;
				case Group_D:
					assign_Bit(DIO_U8_PORTD,copy_U8_Pin_ID,copy_U8_Pin_Val);
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	81 30       	cpi	r24, 0x01	; 1
     e18:	a1 f4       	brne	.+40     	; 0xe42 <DIO_U8_SetPinValue+0x1a4>
     e1a:	a2 e3       	ldi	r26, 0x32	; 50
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e2 e3       	ldi	r30, 0x32	; 50
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	48 2f       	mov	r20, r24
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	02 2e       	mov	r0, r18
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <DIO_U8_SetPinValue+0x19a>
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	0a 94       	dec	r0
     e3a:	e2 f7       	brpl	.-8      	; 0xe34 <DIO_U8_SetPinValue+0x196>
     e3c:	84 2b       	or	r24, r20
     e3e:	8c 93       	st	X, r24
     e40:	14 c0       	rjmp	.+40     	; 0xe6a <DIO_U8_SetPinValue+0x1cc>
     e42:	a2 e3       	ldi	r26, 0x32	; 50
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e2 e3       	ldi	r30, 0x32	; 50
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	48 2f       	mov	r20, r24
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	02 2e       	mov	r0, r18
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <DIO_U8_SetPinValue+0x1c2>
     e5c:	88 0f       	add	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	0a 94       	dec	r0
     e62:	e2 f7       	brpl	.-8      	; 0xe5c <DIO_U8_SetPinValue+0x1be>
     e64:	80 95       	com	r24
     e66:	84 23       	and	r24, r20
     e68:	8c 93       	st	X, r24
					break;
			}
			return 1;
     e6a:	91 e0       	ldi	r25, 0x01	; 1
     e6c:	9c 83       	std	Y+4, r25	; 0x04
     e6e:	05 c0       	rjmp	.+10     	; 0xe7a <DIO_U8_SetPinValue+0x1dc>
		}
		else{
			return Invalid_Pin_Value;
     e70:	2f ef       	ldi	r18, 0xFF	; 255
     e72:	2c 83       	std	Y+4, r18	; 0x04
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <DIO_U8_SetPinValue+0x1dc>
		}
	}
		else {
			return Invalid_Pin_ID;
     e76:	3f ef       	ldi	r19, 0xFF	; 255
     e78:	3c 83       	std	Y+4, r19	; 0x04
     e7a:	8c 81       	ldd	r24, Y+4	; 0x04
		}
}
     e7c:	26 96       	adiw	r28, 0x06	; 6
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	f8 94       	cli
     e82:	de bf       	out	0x3e, r29	; 62
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	cd bf       	out	0x3d, r28	; 61
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <DIO_U8_GetPinValue>:

u8 DIO_U8_GetPinValue(u8 Copy_U8_Port_ID,u8 Copy_U8_Pin_ID){
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <DIO_U8_GetPinValue+0x6>
     e94:	00 d0       	rcall	.+0      	; 0xe96 <DIO_U8_GetPinValue+0x8>
     e96:	00 d0       	rcall	.+0      	; 0xe98 <DIO_U8_GetPinValue+0xa>
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
     e9c:	8a 83       	std	Y+2, r24	; 0x02
     e9e:	6b 83       	std	Y+3, r22	; 0x03

	// set a local variable for result.
	u8 loc_Result;

	//handler for the function call (port and pin in valid range check)
	if((Copy_U8_Port_ID <= Group_D) && (Copy_U8_Pin_ID <= PIN7)){
     ea0:	8a 81       	ldd	r24, Y+2	; 0x02
     ea2:	84 30       	cpi	r24, 0x04	; 4
     ea4:	08 f0       	brcs	.+2      	; 0xea8 <DIO_U8_GetPinValue+0x1a>
     ea6:	6e c0       	rjmp	.+220    	; 0xf84 <DIO_U8_GetPinValue+0xf6>
     ea8:	8b 81       	ldd	r24, Y+3	; 0x03
     eaa:	88 30       	cpi	r24, 0x08	; 8
     eac:	08 f0       	brcs	.+2      	; 0xeb0 <DIO_U8_GetPinValue+0x22>
     eae:	6a c0       	rjmp	.+212    	; 0xf84 <DIO_U8_GetPinValue+0xf6>

		switch (Copy_U8_Port_ID) {
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	3e 83       	std	Y+6, r19	; 0x06
     eb8:	2d 83       	std	Y+5, r18	; 0x05
     eba:	4d 81       	ldd	r20, Y+5	; 0x05
     ebc:	5e 81       	ldd	r21, Y+6	; 0x06
     ebe:	41 30       	cpi	r20, 0x01	; 1
     ec0:	51 05       	cpc	r21, r1
     ec2:	41 f1       	breq	.+80     	; 0xf14 <DIO_U8_GetPinValue+0x86>
     ec4:	8d 81       	ldd	r24, Y+5	; 0x05
     ec6:	9e 81       	ldd	r25, Y+6	; 0x06
     ec8:	82 30       	cpi	r24, 0x02	; 2
     eca:	91 05       	cpc	r25, r1
     ecc:	34 f4       	brge	.+12     	; 0xeda <DIO_U8_GetPinValue+0x4c>
     ece:	2d 81       	ldd	r18, Y+5	; 0x05
     ed0:	3e 81       	ldd	r19, Y+6	; 0x06
     ed2:	21 15       	cp	r18, r1
     ed4:	31 05       	cpc	r19, r1
     ed6:	61 f0       	breq	.+24     	; 0xef0 <DIO_U8_GetPinValue+0x62>
     ed8:	52 c0       	rjmp	.+164    	; 0xf7e <DIO_U8_GetPinValue+0xf0>
     eda:	4d 81       	ldd	r20, Y+5	; 0x05
     edc:	5e 81       	ldd	r21, Y+6	; 0x06
     ede:	42 30       	cpi	r20, 0x02	; 2
     ee0:	51 05       	cpc	r21, r1
     ee2:	51 f1       	breq	.+84     	; 0xf38 <DIO_U8_GetPinValue+0xaa>
     ee4:	8d 81       	ldd	r24, Y+5	; 0x05
     ee6:	9e 81       	ldd	r25, Y+6	; 0x06
     ee8:	83 30       	cpi	r24, 0x03	; 3
     eea:	91 05       	cpc	r25, r1
     eec:	b9 f1       	breq	.+110    	; 0xf5c <DIO_U8_GetPinValue+0xce>
     eee:	47 c0       	rjmp	.+142    	; 0xf7e <DIO_U8_GetPinValue+0xf0>
			case Group_A:
				loc_Result = get_Bit(DIO_U8_PINA,Copy_U8_Pin_ID);
     ef0:	e9 e3       	ldi	r30, 0x39	; 57
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	8b 81       	ldd	r24, Y+3	; 0x03
     efc:	88 2f       	mov	r24, r24
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	a9 01       	movw	r20, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <DIO_U8_GetPinValue+0x7a>
     f04:	55 95       	asr	r21
     f06:	47 95       	ror	r20
     f08:	8a 95       	dec	r24
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <DIO_U8_GetPinValue+0x76>
     f0c:	ca 01       	movw	r24, r20
     f0e:	81 70       	andi	r24, 0x01	; 1
     f10:	89 83       	std	Y+1, r24	; 0x01
     f12:	35 c0       	rjmp	.+106    	; 0xf7e <DIO_U8_GetPinValue+0xf0>
				break;
			case Group_B:
				loc_Result = get_Bit(DIO_U8_PINB,Copy_U8_Pin_ID);
     f14:	e6 e3       	ldi	r30, 0x36	; 54
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
     f20:	88 2f       	mov	r24, r24
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	a9 01       	movw	r20, r18
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <DIO_U8_GetPinValue+0x9e>
     f28:	55 95       	asr	r21
     f2a:	47 95       	ror	r20
     f2c:	8a 95       	dec	r24
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <DIO_U8_GetPinValue+0x9a>
     f30:	ca 01       	movw	r24, r20
     f32:	81 70       	andi	r24, 0x01	; 1
     f34:	89 83       	std	Y+1, r24	; 0x01
     f36:	23 c0       	rjmp	.+70     	; 0xf7e <DIO_U8_GetPinValue+0xf0>
				break;
			case Group_C:
				loc_Result = get_Bit(DIO_U8_PINC,Copy_U8_Pin_ID);
     f38:	e3 e3       	ldi	r30, 0x33	; 51
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	88 2f       	mov	r24, r24
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	a9 01       	movw	r20, r18
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <DIO_U8_GetPinValue+0xc2>
     f4c:	55 95       	asr	r21
     f4e:	47 95       	ror	r20
     f50:	8a 95       	dec	r24
     f52:	e2 f7       	brpl	.-8      	; 0xf4c <DIO_U8_GetPinValue+0xbe>
     f54:	ca 01       	movw	r24, r20
     f56:	81 70       	andi	r24, 0x01	; 1
     f58:	89 83       	std	Y+1, r24	; 0x01
     f5a:	11 c0       	rjmp	.+34     	; 0xf7e <DIO_U8_GetPinValue+0xf0>
				break;
			case Group_D:
				loc_Result = get_Bit(DIO_U8_PIND,Copy_U8_Pin_ID);
     f5c:	e0 e3       	ldi	r30, 0x30	; 48
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	88 2f       	mov	r24, r24
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	a9 01       	movw	r20, r18
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <DIO_U8_GetPinValue+0xe6>
     f70:	55 95       	asr	r21
     f72:	47 95       	ror	r20
     f74:	8a 95       	dec	r24
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <DIO_U8_GetPinValue+0xe2>
     f78:	ca 01       	movw	r24, r20
     f7a:	81 70       	andi	r24, 0x01	; 1
     f7c:	89 83       	std	Y+1, r24	; 0x01
		}
	}else{
		//set var to 0xFF in case of error in func input
		return Invalid_Pin_ID;
	}
	return loc_Result;
     f7e:	59 81       	ldd	r21, Y+1	; 0x01
     f80:	5c 83       	std	Y+4, r21	; 0x04
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <DIO_U8_GetPinValue+0xfa>
				loc_Result = get_Bit(DIO_U8_PIND,Copy_U8_Pin_ID);
				break;
		}
	}else{
		//set var to 0xFF in case of error in func input
		return Invalid_Pin_ID;
     f84:	8f ef       	ldi	r24, 0xFF	; 255
     f86:	8c 83       	std	Y+4, r24	; 0x04
     f88:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	return loc_Result;

}
     f8a:	26 96       	adiw	r28, 0x06	; 6
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	cd bf       	out	0x3d, r28	; 61
     f96:	cf 91       	pop	r28
     f98:	df 91       	pop	r29
     f9a:	08 95       	ret

00000f9c <DIO_U8_SetPinDirection>:

void DIO_U8_SetPinDirection(u8 Copy_U8_Port_ID,u8 Copy_U8_Pin_ID,u8 Copy_U8_Pin_Dir){
     f9c:	df 93       	push	r29
     f9e:	cf 93       	push	r28
     fa0:	00 d0       	rcall	.+0      	; 0xfa2 <DIO_U8_SetPinDirection+0x6>
     fa2:	00 d0       	rcall	.+0      	; 0xfa4 <DIO_U8_SetPinDirection+0x8>
     fa4:	0f 92       	push	r0
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
     faa:	89 83       	std	Y+1, r24	; 0x01
     fac:	6a 83       	std	Y+2, r22	; 0x02
     fae:	4b 83       	std	Y+3, r20	; 0x03
	// handler to check if the port id and pin id in the correct range
	if(Copy_U8_Port_ID <= Group_D && Copy_U8_Pin_ID <= PIN7){
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	84 30       	cpi	r24, 0x04	; 4
     fb4:	08 f0       	brcs	.+2      	; 0xfb8 <DIO_U8_SetPinDirection+0x1c>
     fb6:	d5 c0       	rjmp	.+426    	; 0x1162 <DIO_U8_SetPinDirection+0x1c6>
     fb8:	8a 81       	ldd	r24, Y+2	; 0x02
     fba:	88 30       	cpi	r24, 0x08	; 8
     fbc:	08 f0       	brcs	.+2      	; 0xfc0 <DIO_U8_SetPinDirection+0x24>
     fbe:	d1 c0       	rjmp	.+418    	; 0x1162 <DIO_U8_SetPinDirection+0x1c6>

		switch(Copy_U8_Port_ID){
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	3d 83       	std	Y+5, r19	; 0x05
     fc8:	2c 83       	std	Y+4, r18	; 0x04
     fca:	8c 81       	ldd	r24, Y+4	; 0x04
     fcc:	9d 81       	ldd	r25, Y+5	; 0x05
     fce:	81 30       	cpi	r24, 0x01	; 1
     fd0:	91 05       	cpc	r25, r1
     fd2:	09 f4       	brne	.+2      	; 0xfd6 <DIO_U8_SetPinDirection+0x3a>
     fd4:	43 c0       	rjmp	.+134    	; 0x105c <DIO_U8_SetPinDirection+0xc0>
     fd6:	2c 81       	ldd	r18, Y+4	; 0x04
     fd8:	3d 81       	ldd	r19, Y+5	; 0x05
     fda:	22 30       	cpi	r18, 0x02	; 2
     fdc:	31 05       	cpc	r19, r1
     fde:	2c f4       	brge	.+10     	; 0xfea <DIO_U8_SetPinDirection+0x4e>
     fe0:	8c 81       	ldd	r24, Y+4	; 0x04
     fe2:	9d 81       	ldd	r25, Y+5	; 0x05
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	71 f0       	breq	.+28     	; 0x1004 <DIO_U8_SetPinDirection+0x68>
     fe8:	bc c0       	rjmp	.+376    	; 0x1162 <DIO_U8_SetPinDirection+0x1c6>
     fea:	2c 81       	ldd	r18, Y+4	; 0x04
     fec:	3d 81       	ldd	r19, Y+5	; 0x05
     fee:	22 30       	cpi	r18, 0x02	; 2
     ff0:	31 05       	cpc	r19, r1
     ff2:	09 f4       	brne	.+2      	; 0xff6 <DIO_U8_SetPinDirection+0x5a>
     ff4:	5f c0       	rjmp	.+190    	; 0x10b4 <DIO_U8_SetPinDirection+0x118>
     ff6:	8c 81       	ldd	r24, Y+4	; 0x04
     ff8:	9d 81       	ldd	r25, Y+5	; 0x05
     ffa:	83 30       	cpi	r24, 0x03	; 3
     ffc:	91 05       	cpc	r25, r1
     ffe:	09 f4       	brne	.+2      	; 0x1002 <DIO_U8_SetPinDirection+0x66>
    1000:	85 c0       	rjmp	.+266    	; 0x110c <DIO_U8_SetPinDirection+0x170>
    1002:	af c0       	rjmp	.+350    	; 0x1162 <DIO_U8_SetPinDirection+0x1c6>

		case Group_A:
			assign_Bit(DIO_U8_DDRA,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	81 30       	cpi	r24, 0x01	; 1
    1008:	a1 f4       	brne	.+40     	; 0x1032 <DIO_U8_SetPinDirection+0x96>
    100a:	aa e3       	ldi	r26, 0x3A	; 58
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	ea e3       	ldi	r30, 0x3A	; 58
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	48 2f       	mov	r20, r24
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 2e       	mov	r0, r18
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <DIO_U8_SetPinDirection+0x8c>
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	0a 94       	dec	r0
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <DIO_U8_SetPinDirection+0x88>
    102c:	84 2b       	or	r24, r20
    102e:	8c 93       	st	X, r24
    1030:	98 c0       	rjmp	.+304    	; 0x1162 <DIO_U8_SetPinDirection+0x1c6>
    1032:	aa e3       	ldi	r26, 0x3A	; 58
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	ea e3       	ldi	r30, 0x3A	; 58
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	48 2f       	mov	r20, r24
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	02 2e       	mov	r0, r18
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <DIO_U8_SetPinDirection+0xb4>
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	0a 94       	dec	r0
    1052:	e2 f7       	brpl	.-8      	; 0x104c <DIO_U8_SetPinDirection+0xb0>
    1054:	80 95       	com	r24
    1056:	84 23       	and	r24, r20
    1058:	8c 93       	st	X, r24
    105a:	83 c0       	rjmp	.+262    	; 0x1162 <DIO_U8_SetPinDirection+0x1c6>
			break;
		case Group_B:
			assign_Bit(DIO_U8_DDRB,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	81 30       	cpi	r24, 0x01	; 1
    1060:	a1 f4       	brne	.+40     	; 0x108a <DIO_U8_SetPinDirection+0xee>
    1062:	a7 e3       	ldi	r26, 0x37	; 55
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e7 e3       	ldi	r30, 0x37	; 55
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 2e       	mov	r0, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <DIO_U8_SetPinDirection+0xe4>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <DIO_U8_SetPinDirection+0xe0>
    1084:	84 2b       	or	r24, r20
    1086:	8c 93       	st	X, r24
    1088:	6c c0       	rjmp	.+216    	; 0x1162 <DIO_U8_SetPinDirection+0x1c6>
    108a:	a7 e3       	ldi	r26, 0x37	; 55
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e7 e3       	ldi	r30, 0x37	; 55
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	48 2f       	mov	r20, r24
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	02 2e       	mov	r0, r18
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <DIO_U8_SetPinDirection+0x10c>
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	0a 94       	dec	r0
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <DIO_U8_SetPinDirection+0x108>
    10ac:	80 95       	com	r24
    10ae:	84 23       	and	r24, r20
    10b0:	8c 93       	st	X, r24
    10b2:	57 c0       	rjmp	.+174    	; 0x1162 <DIO_U8_SetPinDirection+0x1c6>
			break;
		case Group_C:
			assign_Bit(DIO_U8_DDRC,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	81 30       	cpi	r24, 0x01	; 1
    10b8:	a1 f4       	brne	.+40     	; 0x10e2 <DIO_U8_SetPinDirection+0x146>
    10ba:	a4 e3       	ldi	r26, 0x34	; 52
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e4 e3       	ldi	r30, 0x34	; 52
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	48 2f       	mov	r20, r24
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	02 2e       	mov	r0, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <DIO_U8_SetPinDirection+0x13c>
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	0a 94       	dec	r0
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <DIO_U8_SetPinDirection+0x138>
    10dc:	84 2b       	or	r24, r20
    10de:	8c 93       	st	X, r24
    10e0:	40 c0       	rjmp	.+128    	; 0x1162 <DIO_U8_SetPinDirection+0x1c6>
    10e2:	a4 e3       	ldi	r26, 0x34	; 52
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e4 e3       	ldi	r30, 0x34	; 52
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 2e       	mov	r0, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <DIO_U8_SetPinDirection+0x164>
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	0a 94       	dec	r0
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <DIO_U8_SetPinDirection+0x160>
    1104:	80 95       	com	r24
    1106:	84 23       	and	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	2b c0       	rjmp	.+86     	; 0x1162 <DIO_U8_SetPinDirection+0x1c6>
			break;
		case Group_D:
			assign_Bit(DIO_U8_DDRD,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	a1 f4       	brne	.+40     	; 0x113a <DIO_U8_SetPinDirection+0x19e>
    1112:	a1 e3       	ldi	r26, 0x31	; 49
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e1 e3       	ldi	r30, 0x31	; 49
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	48 2f       	mov	r20, r24
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	02 2e       	mov	r0, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <DIO_U8_SetPinDirection+0x194>
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	0a 94       	dec	r0
    1132:	e2 f7       	brpl	.-8      	; 0x112c <DIO_U8_SetPinDirection+0x190>
    1134:	84 2b       	or	r24, r20
    1136:	8c 93       	st	X, r24
    1138:	14 c0       	rjmp	.+40     	; 0x1162 <DIO_U8_SetPinDirection+0x1c6>
    113a:	a1 e3       	ldi	r26, 0x31	; 49
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e1 e3       	ldi	r30, 0x31	; 49
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	48 2f       	mov	r20, r24
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	02 2e       	mov	r0, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <DIO_U8_SetPinDirection+0x1bc>
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	0a 94       	dec	r0
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <DIO_U8_SetPinDirection+0x1b8>
    115c:	80 95       	com	r24
    115e:	84 23       	and	r24, r20
    1160:	8c 93       	st	X, r24
		}
	}else{
		//do nothing wrong function parameters were given.
	}

}
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	08 95       	ret

00001172 <DIO_U8_SetPortDirection>:

void DIO_U8_SetPortDirection(u8 Copy_U8_Port_ID,u8 Copy_u8_Port_Dir){
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	00 d0       	rcall	.+0      	; 0x1178 <DIO_U8_SetPortDirection+0x6>
    1178:	00 d0       	rcall	.+0      	; 0x117a <DIO_U8_SetPortDirection+0x8>
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	89 83       	std	Y+1, r24	; 0x01
    1180:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_U8_Port_ID){
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	3c 83       	std	Y+4, r19	; 0x04
    118a:	2b 83       	std	Y+3, r18	; 0x03
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	9c 81       	ldd	r25, Y+4	; 0x04
    1190:	81 30       	cpi	r24, 0x01	; 1
    1192:	91 05       	cpc	r25, r1
    1194:	d1 f0       	breq	.+52     	; 0x11ca <DIO_U8_SetPortDirection+0x58>
    1196:	2b 81       	ldd	r18, Y+3	; 0x03
    1198:	3c 81       	ldd	r19, Y+4	; 0x04
    119a:	22 30       	cpi	r18, 0x02	; 2
    119c:	31 05       	cpc	r19, r1
    119e:	2c f4       	brge	.+10     	; 0x11aa <DIO_U8_SetPortDirection+0x38>
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	9c 81       	ldd	r25, Y+4	; 0x04
    11a4:	00 97       	sbiw	r24, 0x00	; 0
    11a6:	61 f0       	breq	.+24     	; 0x11c0 <DIO_U8_SetPortDirection+0x4e>
    11a8:	1e c0       	rjmp	.+60     	; 0x11e6 <DIO_U8_SetPortDirection+0x74>
    11aa:	2b 81       	ldd	r18, Y+3	; 0x03
    11ac:	3c 81       	ldd	r19, Y+4	; 0x04
    11ae:	22 30       	cpi	r18, 0x02	; 2
    11b0:	31 05       	cpc	r19, r1
    11b2:	81 f0       	breq	.+32     	; 0x11d4 <DIO_U8_SetPortDirection+0x62>
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	9c 81       	ldd	r25, Y+4	; 0x04
    11b8:	83 30       	cpi	r24, 0x03	; 3
    11ba:	91 05       	cpc	r25, r1
    11bc:	81 f0       	breq	.+32     	; 0x11de <DIO_U8_SetPortDirection+0x6c>
    11be:	13 c0       	rjmp	.+38     	; 0x11e6 <DIO_U8_SetPortDirection+0x74>

	case Group_A:
		DIO_U8_DDRA = Copy_u8_Port_Dir;
    11c0:	ea e3       	ldi	r30, 0x3A	; 58
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	80 83       	st	Z, r24
    11c8:	0e c0       	rjmp	.+28     	; 0x11e6 <DIO_U8_SetPortDirection+0x74>
		break;
	case Group_B:
			DIO_U8_DDRB = Copy_u8_Port_Dir;
    11ca:	e7 e3       	ldi	r30, 0x37	; 55
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	80 83       	st	Z, r24
    11d2:	09 c0       	rjmp	.+18     	; 0x11e6 <DIO_U8_SetPortDirection+0x74>
		break;
	case Group_C:
			DIO_U8_DDRC = Copy_u8_Port_Dir;
    11d4:	e4 e3       	ldi	r30, 0x34	; 52
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	80 83       	st	Z, r24
    11dc:	04 c0       	rjmp	.+8      	; 0x11e6 <DIO_U8_SetPortDirection+0x74>
		break;
	case Group_D:
			DIO_U8_DDRD = Copy_u8_Port_Dir;
    11de:	e1 e3       	ldi	r30, 0x31	; 49
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	80 83       	st	Z, r24
		//wrong function parameters were given.
		break;

	}

}
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	cf 91       	pop	r28
    11f0:	df 91       	pop	r29
    11f2:	08 95       	ret

000011f4 <DIO_U8_SetPortValue>:

void DIO_U8_SetPortValue(u8 Copy_U8_Port_ID , u8 Copy_U8_Port_Val){
    11f4:	df 93       	push	r29
    11f6:	cf 93       	push	r28
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <DIO_U8_SetPortValue+0x6>
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <DIO_U8_SetPortValue+0x8>
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
    1200:	89 83       	std	Y+1, r24	; 0x01
    1202:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_U8_Port_ID){
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	3c 83       	std	Y+4, r19	; 0x04
    120c:	2b 83       	std	Y+3, r18	; 0x03
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	9c 81       	ldd	r25, Y+4	; 0x04
    1212:	81 30       	cpi	r24, 0x01	; 1
    1214:	91 05       	cpc	r25, r1
    1216:	d1 f0       	breq	.+52     	; 0x124c <DIO_U8_SetPortValue+0x58>
    1218:	2b 81       	ldd	r18, Y+3	; 0x03
    121a:	3c 81       	ldd	r19, Y+4	; 0x04
    121c:	22 30       	cpi	r18, 0x02	; 2
    121e:	31 05       	cpc	r19, r1
    1220:	2c f4       	brge	.+10     	; 0x122c <DIO_U8_SetPortValue+0x38>
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	9c 81       	ldd	r25, Y+4	; 0x04
    1226:	00 97       	sbiw	r24, 0x00	; 0
    1228:	61 f0       	breq	.+24     	; 0x1242 <DIO_U8_SetPortValue+0x4e>
    122a:	1e c0       	rjmp	.+60     	; 0x1268 <DIO_U8_SetPortValue+0x74>
    122c:	2b 81       	ldd	r18, Y+3	; 0x03
    122e:	3c 81       	ldd	r19, Y+4	; 0x04
    1230:	22 30       	cpi	r18, 0x02	; 2
    1232:	31 05       	cpc	r19, r1
    1234:	81 f0       	breq	.+32     	; 0x1256 <DIO_U8_SetPortValue+0x62>
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	9c 81       	ldd	r25, Y+4	; 0x04
    123a:	83 30       	cpi	r24, 0x03	; 3
    123c:	91 05       	cpc	r25, r1
    123e:	81 f0       	breq	.+32     	; 0x1260 <DIO_U8_SetPortValue+0x6c>
    1240:	13 c0       	rjmp	.+38     	; 0x1268 <DIO_U8_SetPortValue+0x74>

		case Group_A:
			DIO_U8_PORTA = Copy_U8_Port_Val;
    1242:	eb e3       	ldi	r30, 0x3B	; 59
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	80 83       	st	Z, r24
    124a:	0e c0       	rjmp	.+28     	; 0x1268 <DIO_U8_SetPortValue+0x74>
			break;
		case Group_B:
				DIO_U8_PORTB = Copy_U8_Port_Val;
    124c:	e8 e3       	ldi	r30, 0x38	; 56
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	80 83       	st	Z, r24
    1254:	09 c0       	rjmp	.+18     	; 0x1268 <DIO_U8_SetPortValue+0x74>
			break;
		case Group_C:
				DIO_U8_PORTC = Copy_U8_Port_Val;
    1256:	e5 e3       	ldi	r30, 0x35	; 53
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	80 83       	st	Z, r24
    125e:	04 c0       	rjmp	.+8      	; 0x1268 <DIO_U8_SetPortValue+0x74>
			break;
		case Group_D:
				DIO_U8_PORTD = Copy_U8_Port_Val;
    1260:	e2 e3       	ldi	r30, 0x32	; 50
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	80 83       	st	Z, r24
			break;

		}


}
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	08 95       	ret

00001276 <DIO_U8_GetPortValue>:
u8 DIO_U8_GetPortValue(u8 Copy_U8_Port_ID){
    1276:	df 93       	push	r29
    1278:	cf 93       	push	r28
    127a:	00 d0       	rcall	.+0      	; 0x127c <DIO_U8_GetPortValue+0x6>
    127c:	00 d0       	rcall	.+0      	; 0x127e <DIO_U8_GetPortValue+0x8>
    127e:	0f 92       	push	r0
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
    1284:	8a 83       	std	Y+2, r24	; 0x02
	u8 Port_Val;
	switch(Copy_U8_Port_ID){
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	3d 83       	std	Y+5, r19	; 0x05
    128e:	2c 83       	std	Y+4, r18	; 0x04
    1290:	8c 81       	ldd	r24, Y+4	; 0x04
    1292:	9d 81       	ldd	r25, Y+5	; 0x05
    1294:	81 30       	cpi	r24, 0x01	; 1
    1296:	91 05       	cpc	r25, r1
    1298:	d1 f0       	breq	.+52     	; 0x12ce <DIO_U8_GetPortValue+0x58>
    129a:	2c 81       	ldd	r18, Y+4	; 0x04
    129c:	3d 81       	ldd	r19, Y+5	; 0x05
    129e:	22 30       	cpi	r18, 0x02	; 2
    12a0:	31 05       	cpc	r19, r1
    12a2:	2c f4       	brge	.+10     	; 0x12ae <DIO_U8_GetPortValue+0x38>
    12a4:	8c 81       	ldd	r24, Y+4	; 0x04
    12a6:	9d 81       	ldd	r25, Y+5	; 0x05
    12a8:	00 97       	sbiw	r24, 0x00	; 0
    12aa:	61 f0       	breq	.+24     	; 0x12c4 <DIO_U8_GetPortValue+0x4e>
    12ac:	1f c0       	rjmp	.+62     	; 0x12ec <DIO_U8_GetPortValue+0x76>
    12ae:	2c 81       	ldd	r18, Y+4	; 0x04
    12b0:	3d 81       	ldd	r19, Y+5	; 0x05
    12b2:	22 30       	cpi	r18, 0x02	; 2
    12b4:	31 05       	cpc	r19, r1
    12b6:	81 f0       	breq	.+32     	; 0x12d8 <DIO_U8_GetPortValue+0x62>
    12b8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ba:	9d 81       	ldd	r25, Y+5	; 0x05
    12bc:	83 30       	cpi	r24, 0x03	; 3
    12be:	91 05       	cpc	r25, r1
    12c0:	81 f0       	breq	.+32     	; 0x12e2 <DIO_U8_GetPortValue+0x6c>
    12c2:	14 c0       	rjmp	.+40     	; 0x12ec <DIO_U8_GetPortValue+0x76>
	case Group_A:
		Port_Val = DIO_U8_PINA;
    12c4:	e9 e3       	ldi	r30, 0x39	; 57
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	89 83       	std	Y+1, r24	; 0x01
    12cc:	12 c0       	rjmp	.+36     	; 0x12f2 <DIO_U8_GetPortValue+0x7c>
		break;
	case Group_B:
		Port_Val = DIO_U8_PINB;
    12ce:	e6 e3       	ldi	r30, 0x36	; 54
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	89 83       	std	Y+1, r24	; 0x01
    12d6:	0d c0       	rjmp	.+26     	; 0x12f2 <DIO_U8_GetPortValue+0x7c>
		break;
	case Group_C:
		Port_Val = DIO_U8_PINC;
    12d8:	e3 e3       	ldi	r30, 0x33	; 51
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	89 83       	std	Y+1, r24	; 0x01
    12e0:	08 c0       	rjmp	.+16     	; 0x12f2 <DIO_U8_GetPortValue+0x7c>
		break;
	case Group_D:
		Port_Val = DIO_U8_PIND;
    12e2:	e0 e3       	ldi	r30, 0x30	; 48
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	89 83       	std	Y+1, r24	; 0x01
    12ea:	03 c0       	rjmp	.+6      	; 0x12f2 <DIO_U8_GetPortValue+0x7c>
		break;
	default:
		return Invalid_Port_ID;
    12ec:	9f ef       	ldi	r25, 0xFF	; 255
    12ee:	9b 83       	std	Y+3, r25	; 0x03
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <DIO_U8_GetPortValue+0x80>
	}
	return Port_Val;
    12f2:	29 81       	ldd	r18, Y+1	; 0x01
    12f4:	2b 83       	std	Y+3, r18	; 0x03
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03

}
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	08 95       	ret

00001308 <LCD_Void_Write_Cmd>:
#include "DIO_Interface.h"
#include "DIO_Private.h"

#include "util/delay.h"

void LCD_Void_Write_Cmd(u8 Copy_U8_Cmd){
    1308:	df 93       	push	r29
    130a:	cf 93       	push	r28
    130c:	0f 92       	push	r0
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	89 83       	std	Y+1, r24	; 0x01
	DIO_U8_SetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,LOW);
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	60 e0       	ldi	r22, 0x00	; 0
    1318:	40 e0       	ldi	r20, 0x00	; 0
    131a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_U8_SetPinValue>
	LCD_Void_Write(Copy_U8_Cmd);
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	0e 94 23 0b 	call	0x1646	; 0x1646 <LCD_Void_Write>
}
    1324:	0f 90       	pop	r0
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	08 95       	ret

0000132c <LCD_Void_Write_Data>:

void LCD_Void_Write_Data(u8 Copy_U8_Data){
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	0f 92       	push	r0
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
    1336:	89 83       	std	Y+1, r24	; 0x01
	DIO_U8_SetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,HIGH);
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	41 e0       	ldi	r20, 0x01	; 1
    133e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_U8_SetPinValue>
	LCD_Void_Write(Copy_U8_Data);
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	0e 94 23 0b 	call	0x1646	; 0x1646 <LCD_Void_Write>
}
    1348:	0f 90       	pop	r0
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	08 95       	ret

00001350 <LCD_Void_Write_String>:
void LCD_Void_Write_String(u8 *Copy_PU8_Data,u8 Copy_U8_XPos,u8 Copy_U8_YPOS){
    1350:	df 93       	push	r29
    1352:	cf 93       	push	r28
    1354:	00 d0       	rcall	.+0      	; 0x1356 <LCD_Void_Write_String+0x6>
    1356:	00 d0       	rcall	.+0      	; 0x1358 <LCD_Void_Write_String+0x8>
    1358:	0f 92       	push	r0
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
    135e:	9b 83       	std	Y+3, r25	; 0x03
    1360:	8a 83       	std	Y+2, r24	; 0x02
    1362:	6c 83       	std	Y+4, r22	; 0x04
    1364:	4d 83       	std	Y+5, r20	; 0x05
	u8 LOCAL_U8_DDRAM_ADDRESS;
	LOCAL_U8_DDRAM_ADDRESS = Copy_U8_XPos + (Copy_U8_YPOS * 64);
    1366:	8d 81       	ldd	r24, Y+5	; 0x05
    1368:	88 2f       	mov	r24, r24
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	00 24       	eor	r0, r0
    136e:	96 95       	lsr	r25
    1370:	87 95       	ror	r24
    1372:	07 94       	ror	r0
    1374:	96 95       	lsr	r25
    1376:	87 95       	ror	r24
    1378:	07 94       	ror	r0
    137a:	98 2f       	mov	r25, r24
    137c:	80 2d       	mov	r24, r0
    137e:	98 2f       	mov	r25, r24
    1380:	8c 81       	ldd	r24, Y+4	; 0x04
    1382:	89 0f       	add	r24, r25
    1384:	89 83       	std	Y+1, r24	; 0x01
	LOCAL_U8_DDRAM_ADDRESS |= 0b10000000;
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	80 68       	ori	r24, 0x80	; 128
    138a:	89 83       	std	Y+1, r24	; 0x01
	LCD_Void_Write_Cmd(LOCAL_U8_DDRAM_ADDRESS);
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	0e 94 84 09 	call	0x1308	; 0x1308 <LCD_Void_Write_Cmd>
    1392:	0a c0       	rjmp	.+20     	; 0x13a8 <LCD_Void_Write_String+0x58>

	while(*Copy_PU8_Data != '\0'){
		LCD_Void_Write_Data(*Copy_PU8_Data);
    1394:	ea 81       	ldd	r30, Y+2	; 0x02
    1396:	fb 81       	ldd	r31, Y+3	; 0x03
    1398:	80 81       	ld	r24, Z
    139a:	0e 94 96 09 	call	0x132c	; 0x132c <LCD_Void_Write_Data>
		Copy_PU8_Data ++;
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	9b 81       	ldd	r25, Y+3	; 0x03
    13a2:	01 96       	adiw	r24, 0x01	; 1
    13a4:	9b 83       	std	Y+3, r25	; 0x03
    13a6:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOCAL_U8_DDRAM_ADDRESS;
	LOCAL_U8_DDRAM_ADDRESS = Copy_U8_XPos + (Copy_U8_YPOS * 64);
	LOCAL_U8_DDRAM_ADDRESS |= 0b10000000;
	LCD_Void_Write_Cmd(LOCAL_U8_DDRAM_ADDRESS);

	while(*Copy_PU8_Data != '\0'){
    13a8:	ea 81       	ldd	r30, Y+2	; 0x02
    13aa:	fb 81       	ldd	r31, Y+3	; 0x03
    13ac:	80 81       	ld	r24, Z
    13ae:	88 23       	and	r24, r24
    13b0:	89 f7       	brne	.-30     	; 0x1394 <LCD_Void_Write_String+0x44>
		LCD_Void_Write_Data(*Copy_PU8_Data);
		Copy_PU8_Data ++;
	}
}
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	cf 91       	pop	r28
    13be:	df 91       	pop	r29
    13c0:	08 95       	ret

000013c2 <LCD_Void_Write_Number>:
void LCD_Void_Write_Number(u32 Copy_U32_Num){
    13c2:	df 93       	push	r29
    13c4:	cf 93       	push	r28
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
    13ca:	6a 97       	sbiw	r28, 0x1a	; 26
    13cc:	0f b6       	in	r0, 0x3f	; 63
    13ce:	f8 94       	cli
    13d0:	de bf       	out	0x3e, r29	; 62
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	cd bf       	out	0x3d, r28	; 61
    13d6:	6f 8b       	std	Y+23, r22	; 0x17
    13d8:	78 8f       	std	Y+24, r23	; 0x18
    13da:	89 8f       	std	Y+25, r24	; 0x19
    13dc:	9a 8f       	std	Y+26, r25	; 0x1a
	u8 rem;
	u8 i = 0;
    13de:	19 82       	std	Y+1, r1	; 0x01
    13e0:	30 c0       	rjmp	.+96     	; 0x1442 <LCD_Void_Write_Number+0x80>
	u8 str[20];
	while(Copy_U32_Num != 0){
		rem = Copy_U32_Num % 10;
    13e2:	8f 89       	ldd	r24, Y+23	; 0x17
    13e4:	98 8d       	ldd	r25, Y+24	; 0x18
    13e6:	a9 8d       	ldd	r26, Y+25	; 0x19
    13e8:	ba 8d       	ldd	r27, Y+26	; 0x1a
    13ea:	2a e0       	ldi	r18, 0x0A	; 10
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	40 e0       	ldi	r20, 0x00	; 0
    13f0:	50 e0       	ldi	r21, 0x00	; 0
    13f2:	bc 01       	movw	r22, r24
    13f4:	cd 01       	movw	r24, r26
    13f6:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__udivmodsi4>
    13fa:	dc 01       	movw	r26, r24
    13fc:	cb 01       	movw	r24, r22
    13fe:	8a 83       	std	Y+2, r24	; 0x02
		str[i]= rem + '0';
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	48 2f       	mov	r20, r24
    140a:	40 5d       	subi	r20, 0xD0	; 208
    140c:	ce 01       	movw	r24, r28
    140e:	03 96       	adiw	r24, 0x03	; 3
    1410:	fc 01       	movw	r30, r24
    1412:	e2 0f       	add	r30, r18
    1414:	f3 1f       	adc	r31, r19
    1416:	40 83       	st	Z, r20
		i++;
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	8f 5f       	subi	r24, 0xFF	; 255
    141c:	89 83       	std	Y+1, r24	; 0x01
		Copy_U32_Num = Copy_U32_Num/10;
    141e:	8f 89       	ldd	r24, Y+23	; 0x17
    1420:	98 8d       	ldd	r25, Y+24	; 0x18
    1422:	a9 8d       	ldd	r26, Y+25	; 0x19
    1424:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1426:	2a e0       	ldi	r18, 0x0A	; 10
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	40 e0       	ldi	r20, 0x00	; 0
    142c:	50 e0       	ldi	r21, 0x00	; 0
    142e:	bc 01       	movw	r22, r24
    1430:	cd 01       	movw	r24, r26
    1432:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__udivmodsi4>
    1436:	da 01       	movw	r26, r20
    1438:	c9 01       	movw	r24, r18
    143a:	8f 8b       	std	Y+23, r24	; 0x17
    143c:	98 8f       	std	Y+24, r25	; 0x18
    143e:	a9 8f       	std	Y+25, r26	; 0x19
    1440:	ba 8f       	std	Y+26, r27	; 0x1a
}
void LCD_Void_Write_Number(u32 Copy_U32_Num){
	u8 rem;
	u8 i = 0;
	u8 str[20];
	while(Copy_U32_Num != 0){
    1442:	8f 89       	ldd	r24, Y+23	; 0x17
    1444:	98 8d       	ldd	r25, Y+24	; 0x18
    1446:	a9 8d       	ldd	r26, Y+25	; 0x19
    1448:	ba 8d       	ldd	r27, Y+26	; 0x1a
    144a:	00 97       	sbiw	r24, 0x00	; 0
    144c:	a1 05       	cpc	r26, r1
    144e:	b1 05       	cpc	r27, r1
    1450:	41 f6       	brne	.-112    	; 0x13e2 <LCD_Void_Write_Number+0x20>
		rem = Copy_U32_Num % 10;
		str[i]= rem + '0';
		i++;
		Copy_U32_Num = Copy_U32_Num/10;
	}
	str[i] = '\0';
    1452:	89 81       	ldd	r24, Y+1	; 0x01
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	ce 01       	movw	r24, r28
    145a:	03 96       	adiw	r24, 0x03	; 3
    145c:	fc 01       	movw	r30, r24
    145e:	e2 0f       	add	r30, r18
    1460:	f3 1f       	adc	r31, r19
    1462:	10 82       	st	Z, r1
	reverse(str,i);
    1464:	ce 01       	movw	r24, r28
    1466:	03 96       	adiw	r24, 0x03	; 3
    1468:	69 81       	ldd	r22, Y+1	; 0x01
    146a:	0e 94 46 0a 	call	0x148c	; 0x148c <reverse>
	LCD_Void_Write_String(str,0,0);
    146e:	ce 01       	movw	r24, r28
    1470:	03 96       	adiw	r24, 0x03	; 3
    1472:	60 e0       	ldi	r22, 0x00	; 0
    1474:	40 e0       	ldi	r20, 0x00	; 0
    1476:	0e 94 a8 09 	call	0x1350	; 0x1350 <LCD_Void_Write_String>
}
    147a:	6a 96       	adiw	r28, 0x1a	; 26
    147c:	0f b6       	in	r0, 0x3f	; 63
    147e:	f8 94       	cli
    1480:	de bf       	out	0x3e, r29	; 62
    1482:	0f be       	out	0x3f, r0	; 63
    1484:	cd bf       	out	0x3d, r28	; 61
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	08 95       	ret

0000148c <reverse>:
void reverse(u8 *ptr,u8 lenght){
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	00 d0       	rcall	.+0      	; 0x1492 <reverse+0x6>
    1492:	00 d0       	rcall	.+0      	; 0x1494 <reverse+0x8>
    1494:	0f 92       	push	r0
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	9c 83       	std	Y+4, r25	; 0x04
    149c:	8b 83       	std	Y+3, r24	; 0x03
    149e:	6d 83       	std	Y+5, r22	; 0x05
	u8 start = 0;
    14a0:	1a 82       	std	Y+2, r1	; 0x02
	u8 end = lenght - 1;
    14a2:	8d 81       	ldd	r24, Y+5	; 0x05
    14a4:	81 50       	subi	r24, 0x01	; 1
    14a6:	89 83       	std	Y+1, r24	; 0x01
    14a8:	19 c0       	rjmp	.+50     	; 0x14dc <reverse+0x50>
	while(start < end){
		swap(&ptr[start],&ptr[end]);
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	9c 81       	ldd	r25, Y+4	; 0x04
    14b4:	ac 01       	movw	r20, r24
    14b6:	42 0f       	add	r20, r18
    14b8:	53 1f       	adc	r21, r19
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	9c 81       	ldd	r25, Y+4	; 0x04
    14c4:	28 0f       	add	r18, r24
    14c6:	39 1f       	adc	r19, r25
    14c8:	ca 01       	movw	r24, r20
    14ca:	b9 01       	movw	r22, r18
    14cc:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <swap>
		start ++;
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	8f 5f       	subi	r24, 0xFF	; 255
    14d4:	8a 83       	std	Y+2, r24	; 0x02
		end --;
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	81 50       	subi	r24, 0x01	; 1
    14da:	89 83       	std	Y+1, r24	; 0x01
	LCD_Void_Write_String(str,0,0);
}
void reverse(u8 *ptr,u8 lenght){
	u8 start = 0;
	u8 end = lenght - 1;
	while(start < end){
    14dc:	9a 81       	ldd	r25, Y+2	; 0x02
    14de:	89 81       	ldd	r24, Y+1	; 0x01
    14e0:	98 17       	cp	r25, r24
    14e2:	18 f3       	brcs	.-58     	; 0x14aa <reverse+0x1e>
		swap(&ptr[start],&ptr[end]);
		start ++;
		end --;
	}
}
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	cf 91       	pop	r28
    14f0:	df 91       	pop	r29
    14f2:	08 95       	ret

000014f4 <swap>:
void swap(u8 *a,u8 *b){
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <swap+0x6>
    14fa:	00 d0       	rcall	.+0      	; 0x14fc <swap+0x8>
    14fc:	0f 92       	push	r0
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
    1502:	9b 83       	std	Y+3, r25	; 0x03
    1504:	8a 83       	std	Y+2, r24	; 0x02
    1506:	7d 83       	std	Y+5, r23	; 0x05
    1508:	6c 83       	std	Y+4, r22	; 0x04
	u8 z = *a;
    150a:	ea 81       	ldd	r30, Y+2	; 0x02
    150c:	fb 81       	ldd	r31, Y+3	; 0x03
    150e:	80 81       	ld	r24, Z
    1510:	89 83       	std	Y+1, r24	; 0x01
	*a = *b;
    1512:	ec 81       	ldd	r30, Y+4	; 0x04
    1514:	fd 81       	ldd	r31, Y+5	; 0x05
    1516:	80 81       	ld	r24, Z
    1518:	ea 81       	ldd	r30, Y+2	; 0x02
    151a:	fb 81       	ldd	r31, Y+3	; 0x03
    151c:	80 83       	st	Z, r24
	*b = z;
    151e:	ec 81       	ldd	r30, Y+4	; 0x04
    1520:	fd 81       	ldd	r31, Y+5	; 0x05
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	80 83       	st	Z, r24
}
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	08 95       	ret

00001536 <LCD_Void_Clear_Display>:

void LCD_Void_Clear_Display(){
    1536:	df 93       	push	r29
    1538:	cf 93       	push	r28
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62
    153e:	2e 97       	sbiw	r28, 0x0e	; 14
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	de bf       	out	0x3e, r29	; 62
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	cd bf       	out	0x3d, r28	; 61
	LCD_Void_Write_Cmd(Init_Display_Clear);  //display clear
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	0e 94 84 09 	call	0x1308	; 0x1308 <LCD_Void_Write_Cmd>
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	a0 e0       	ldi	r26, 0x00	; 0
    1556:	b0 e4       	ldi	r27, 0x40	; 64
    1558:	8b 87       	std	Y+11, r24	; 0x0b
    155a:	9c 87       	std	Y+12, r25	; 0x0c
    155c:	ad 87       	std	Y+13, r26	; 0x0d
    155e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1560:	6b 85       	ldd	r22, Y+11	; 0x0b
    1562:	7c 85       	ldd	r23, Y+12	; 0x0c
    1564:	8d 85       	ldd	r24, Y+13	; 0x0d
    1566:	9e 85       	ldd	r25, Y+14	; 0x0e
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	4a ef       	ldi	r20, 0xFA	; 250
    156e:	54 e4       	ldi	r21, 0x44	; 68
    1570:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1574:	dc 01       	movw	r26, r24
    1576:	cb 01       	movw	r24, r22
    1578:	8f 83       	std	Y+7, r24	; 0x07
    157a:	98 87       	std	Y+8, r25	; 0x08
    157c:	a9 87       	std	Y+9, r26	; 0x09
    157e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1580:	6f 81       	ldd	r22, Y+7	; 0x07
    1582:	78 85       	ldd	r23, Y+8	; 0x08
    1584:	89 85       	ldd	r24, Y+9	; 0x09
    1586:	9a 85       	ldd	r25, Y+10	; 0x0a
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	40 e8       	ldi	r20, 0x80	; 128
    158e:	5f e3       	ldi	r21, 0x3F	; 63
    1590:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1594:	88 23       	and	r24, r24
    1596:	2c f4       	brge	.+10     	; 0x15a2 <LCD_Void_Clear_Display+0x6c>
		__ticks = 1;
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	9e 83       	std	Y+6, r25	; 0x06
    159e:	8d 83       	std	Y+5, r24	; 0x05
    15a0:	3f c0       	rjmp	.+126    	; 0x1620 <LCD_Void_Clear_Display+0xea>
	else if (__tmp > 65535)
    15a2:	6f 81       	ldd	r22, Y+7	; 0x07
    15a4:	78 85       	ldd	r23, Y+8	; 0x08
    15a6:	89 85       	ldd	r24, Y+9	; 0x09
    15a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	3f ef       	ldi	r19, 0xFF	; 255
    15ae:	4f e7       	ldi	r20, 0x7F	; 127
    15b0:	57 e4       	ldi	r21, 0x47	; 71
    15b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15b6:	18 16       	cp	r1, r24
    15b8:	4c f5       	brge	.+82     	; 0x160c <LCD_Void_Clear_Display+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    15bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    15be:	8d 85       	ldd	r24, Y+13	; 0x0d
    15c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	40 e2       	ldi	r20, 0x20	; 32
    15c8:	51 e4       	ldi	r21, 0x41	; 65
    15ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	bc 01       	movw	r22, r24
    15d4:	cd 01       	movw	r24, r26
    15d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15da:	dc 01       	movw	r26, r24
    15dc:	cb 01       	movw	r24, r22
    15de:	9e 83       	std	Y+6, r25	; 0x06
    15e0:	8d 83       	std	Y+5, r24	; 0x05
    15e2:	0f c0       	rjmp	.+30     	; 0x1602 <LCD_Void_Clear_Display+0xcc>
    15e4:	88 ec       	ldi	r24, 0xC8	; 200
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	9c 83       	std	Y+4, r25	; 0x04
    15ea:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	9c 81       	ldd	r25, Y+4	; 0x04
    15f0:	01 97       	sbiw	r24, 0x01	; 1
    15f2:	f1 f7       	brne	.-4      	; 0x15f0 <LCD_Void_Clear_Display+0xba>
    15f4:	9c 83       	std	Y+4, r25	; 0x04
    15f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f8:	8d 81       	ldd	r24, Y+5	; 0x05
    15fa:	9e 81       	ldd	r25, Y+6	; 0x06
    15fc:	01 97       	sbiw	r24, 0x01	; 1
    15fe:	9e 83       	std	Y+6, r25	; 0x06
    1600:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1602:	8d 81       	ldd	r24, Y+5	; 0x05
    1604:	9e 81       	ldd	r25, Y+6	; 0x06
    1606:	00 97       	sbiw	r24, 0x00	; 0
    1608:	69 f7       	brne	.-38     	; 0x15e4 <LCD_Void_Clear_Display+0xae>
    160a:	14 c0       	rjmp	.+40     	; 0x1634 <LCD_Void_Clear_Display+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    160c:	6f 81       	ldd	r22, Y+7	; 0x07
    160e:	78 85       	ldd	r23, Y+8	; 0x08
    1610:	89 85       	ldd	r24, Y+9	; 0x09
    1612:	9a 85       	ldd	r25, Y+10	; 0x0a
    1614:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1618:	dc 01       	movw	r26, r24
    161a:	cb 01       	movw	r24, r22
    161c:	9e 83       	std	Y+6, r25	; 0x06
    161e:	8d 83       	std	Y+5, r24	; 0x05
    1620:	8d 81       	ldd	r24, Y+5	; 0x05
    1622:	9e 81       	ldd	r25, Y+6	; 0x06
    1624:	9a 83       	std	Y+2, r25	; 0x02
    1626:	89 83       	std	Y+1, r24	; 0x01
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	9a 81       	ldd	r25, Y+2	; 0x02
    162c:	01 97       	sbiw	r24, 0x01	; 1
    162e:	f1 f7       	brne	.-4      	; 0x162c <LCD_Void_Clear_Display+0xf6>
    1630:	9a 83       	std	Y+2, r25	; 0x02
    1632:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1634:	2e 96       	adiw	r28, 0x0e	; 14
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	cd bf       	out	0x3d, r28	; 61
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <LCD_Void_Write>:

void LCD_Void_Write(u8 Copy_U8_Value){
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	69 97       	sbiw	r28, 0x19	; 25
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	de bf       	out	0x3e, r29	; 62
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	cd bf       	out	0x3d, r28	; 61
    165a:	89 8f       	std	Y+25, r24	; 0x19
	DIO_U8_SetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RW_PIN,LOW);
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	61 e0       	ldi	r22, 0x01	; 1
    1660:	40 e0       	ldi	r20, 0x00	; 0
    1662:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_U8_SetPinValue>
	DIO_U8_SetPinValue(LCD_U8_DATA_PORT,LCD_U8_DATA_PIN0,get_Bit(Copy_U8_Value,BIT0));
    1666:	89 8d       	ldd	r24, Y+25	; 0x19
    1668:	98 2f       	mov	r25, r24
    166a:	91 70       	andi	r25, 0x01	; 1
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	60 e0       	ldi	r22, 0x00	; 0
    1670:	49 2f       	mov	r20, r25
    1672:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_U8_SetPinValue>
	DIO_U8_SetPinValue(LCD_U8_DATA_PORT,LCD_U8_DATA_PIN1,get_Bit(Copy_U8_Value,BIT1));
    1676:	89 8d       	ldd	r24, Y+25	; 0x19
    1678:	86 95       	lsr	r24
    167a:	98 2f       	mov	r25, r24
    167c:	91 70       	andi	r25, 0x01	; 1
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	61 e0       	ldi	r22, 0x01	; 1
    1682:	49 2f       	mov	r20, r25
    1684:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_U8_SetPinValue>
	DIO_U8_SetPinValue(LCD_U8_DATA_PORT,LCD_U8_DATA_PIN2,get_Bit(Copy_U8_Value,BIT2));
    1688:	89 8d       	ldd	r24, Y+25	; 0x19
    168a:	86 95       	lsr	r24
    168c:	86 95       	lsr	r24
    168e:	98 2f       	mov	r25, r24
    1690:	91 70       	andi	r25, 0x01	; 1
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	62 e0       	ldi	r22, 0x02	; 2
    1696:	49 2f       	mov	r20, r25
    1698:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_U8_SetPinValue>
	DIO_U8_SetPinValue(LCD_U8_DATA_PORT,LCD_U8_DATA_PIN3,get_Bit(Copy_U8_Value,BIT3));
    169c:	89 8d       	ldd	r24, Y+25	; 0x19
    169e:	86 95       	lsr	r24
    16a0:	86 95       	lsr	r24
    16a2:	86 95       	lsr	r24
    16a4:	98 2f       	mov	r25, r24
    16a6:	91 70       	andi	r25, 0x01	; 1
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	63 e0       	ldi	r22, 0x03	; 3
    16ac:	49 2f       	mov	r20, r25
    16ae:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_U8_SetPinValue>
	DIO_U8_SetPinValue(LCD_U8_DATA_PORT,LCD_U8_DATA_PIN4,get_Bit(Copy_U8_Value,BIT4));
    16b2:	89 8d       	ldd	r24, Y+25	; 0x19
    16b4:	82 95       	swap	r24
    16b6:	8f 70       	andi	r24, 0x0F	; 15
    16b8:	98 2f       	mov	r25, r24
    16ba:	91 70       	andi	r25, 0x01	; 1
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	64 e0       	ldi	r22, 0x04	; 4
    16c0:	49 2f       	mov	r20, r25
    16c2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_U8_SetPinValue>
	DIO_U8_SetPinValue(LCD_U8_DATA_PORT,LCD_U8_DATA_PIN5,get_Bit(Copy_U8_Value,BIT5));
    16c6:	89 8d       	ldd	r24, Y+25	; 0x19
    16c8:	82 95       	swap	r24
    16ca:	86 95       	lsr	r24
    16cc:	87 70       	andi	r24, 0x07	; 7
    16ce:	98 2f       	mov	r25, r24
    16d0:	91 70       	andi	r25, 0x01	; 1
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	65 e0       	ldi	r22, 0x05	; 5
    16d6:	49 2f       	mov	r20, r25
    16d8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_U8_SetPinValue>
	DIO_U8_SetPinValue(LCD_U8_DATA_PORT,LCD_U8_DATA_PIN6,get_Bit(Copy_U8_Value,BIT6));
    16dc:	89 8d       	ldd	r24, Y+25	; 0x19
    16de:	82 95       	swap	r24
    16e0:	86 95       	lsr	r24
    16e2:	86 95       	lsr	r24
    16e4:	83 70       	andi	r24, 0x03	; 3
    16e6:	98 2f       	mov	r25, r24
    16e8:	91 70       	andi	r25, 0x01	; 1
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	66 e0       	ldi	r22, 0x06	; 6
    16ee:	49 2f       	mov	r20, r25
    16f0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_U8_SetPinValue>
	DIO_U8_SetPinValue(LCD_U8_DATA_PORT,LCD_U8_DATA_PIN7,get_Bit(Copy_U8_Value,BIT7));
    16f4:	89 8d       	ldd	r24, Y+25	; 0x19
    16f6:	98 2f       	mov	r25, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	99 27       	eor	r25, r25
    16fc:	99 1f       	adc	r25, r25
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	67 e0       	ldi	r22, 0x07	; 7
    1702:	49 2f       	mov	r20, r25
    1704:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_U8_SetPinValue>

	DIO_U8_SetPinValue(LCD_U8_CTRL_PORT,LCD_U8_ENABLE_PIN,HIGH);
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	62 e0       	ldi	r22, 0x02	; 2
    170c:	41 e0       	ldi	r20, 0x01	; 1
    170e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_U8_SetPinValue>
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	a0 e8       	ldi	r26, 0x80	; 128
    1718:	bf e3       	ldi	r27, 0x3F	; 63
    171a:	8d 8b       	std	Y+21, r24	; 0x15
    171c:	9e 8b       	std	Y+22, r25	; 0x16
    171e:	af 8b       	std	Y+23, r26	; 0x17
    1720:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1722:	6d 89       	ldd	r22, Y+21	; 0x15
    1724:	7e 89       	ldd	r23, Y+22	; 0x16
    1726:	8f 89       	ldd	r24, Y+23	; 0x17
    1728:	98 8d       	ldd	r25, Y+24	; 0x18
    172a:	2b ea       	ldi	r18, 0xAB	; 171
    172c:	3a ea       	ldi	r19, 0xAA	; 170
    172e:	4a e2       	ldi	r20, 0x2A	; 42
    1730:	50 e4       	ldi	r21, 0x40	; 64
    1732:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	89 8b       	std	Y+17, r24	; 0x11
    173c:	9a 8b       	std	Y+18, r25	; 0x12
    173e:	ab 8b       	std	Y+19, r26	; 0x13
    1740:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1742:	69 89       	ldd	r22, Y+17	; 0x11
    1744:	7a 89       	ldd	r23, Y+18	; 0x12
    1746:	8b 89       	ldd	r24, Y+19	; 0x13
    1748:	9c 89       	ldd	r25, Y+20	; 0x14
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	40 e8       	ldi	r20, 0x80	; 128
    1750:	5f e3       	ldi	r21, 0x3F	; 63
    1752:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1756:	88 23       	and	r24, r24
    1758:	1c f4       	brge	.+6      	; 0x1760 <LCD_Void_Write+0x11a>
		__ticks = 1;
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	88 8b       	std	Y+16, r24	; 0x10
    175e:	91 c0       	rjmp	.+290    	; 0x1882 <LCD_Void_Write+0x23c>
	else if (__tmp > 255)
    1760:	69 89       	ldd	r22, Y+17	; 0x11
    1762:	7a 89       	ldd	r23, Y+18	; 0x12
    1764:	8b 89       	ldd	r24, Y+19	; 0x13
    1766:	9c 89       	ldd	r25, Y+20	; 0x14
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	4f e7       	ldi	r20, 0x7F	; 127
    176e:	53 e4       	ldi	r21, 0x43	; 67
    1770:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1774:	18 16       	cp	r1, r24
    1776:	0c f0       	brlt	.+2      	; 0x177a <LCD_Void_Write+0x134>
    1778:	7b c0       	rjmp	.+246    	; 0x1870 <LCD_Void_Write+0x22a>
	{
		_delay_ms(__us / 1000.0);
    177a:	6d 89       	ldd	r22, Y+21	; 0x15
    177c:	7e 89       	ldd	r23, Y+22	; 0x16
    177e:	8f 89       	ldd	r24, Y+23	; 0x17
    1780:	98 8d       	ldd	r25, Y+24	; 0x18
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	4a e7       	ldi	r20, 0x7A	; 122
    1788:	54 e4       	ldi	r21, 0x44	; 68
    178a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    178e:	dc 01       	movw	r26, r24
    1790:	cb 01       	movw	r24, r22
    1792:	8c 87       	std	Y+12, r24	; 0x0c
    1794:	9d 87       	std	Y+13, r25	; 0x0d
    1796:	ae 87       	std	Y+14, r26	; 0x0e
    1798:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    179a:	6c 85       	ldd	r22, Y+12	; 0x0c
    179c:	7d 85       	ldd	r23, Y+13	; 0x0d
    179e:	8e 85       	ldd	r24, Y+14	; 0x0e
    17a0:	9f 85       	ldd	r25, Y+15	; 0x0f
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	4a ef       	ldi	r20, 0xFA	; 250
    17a8:	54 e4       	ldi	r21, 0x44	; 68
    17aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	88 87       	std	Y+8, r24	; 0x08
    17b4:	99 87       	std	Y+9, r25	; 0x09
    17b6:	aa 87       	std	Y+10, r26	; 0x0a
    17b8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    17ba:	68 85       	ldd	r22, Y+8	; 0x08
    17bc:	79 85       	ldd	r23, Y+9	; 0x09
    17be:	8a 85       	ldd	r24, Y+10	; 0x0a
    17c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	40 e8       	ldi	r20, 0x80	; 128
    17c8:	5f e3       	ldi	r21, 0x3F	; 63
    17ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17ce:	88 23       	and	r24, r24
    17d0:	2c f4       	brge	.+10     	; 0x17dc <LCD_Void_Write+0x196>
		__ticks = 1;
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	9f 83       	std	Y+7, r25	; 0x07
    17d8:	8e 83       	std	Y+6, r24	; 0x06
    17da:	3f c0       	rjmp	.+126    	; 0x185a <LCD_Void_Write+0x214>
	else if (__tmp > 65535)
    17dc:	68 85       	ldd	r22, Y+8	; 0x08
    17de:	79 85       	ldd	r23, Y+9	; 0x09
    17e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    17e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	3f ef       	ldi	r19, 0xFF	; 255
    17e8:	4f e7       	ldi	r20, 0x7F	; 127
    17ea:	57 e4       	ldi	r21, 0x47	; 71
    17ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17f0:	18 16       	cp	r1, r24
    17f2:	4c f5       	brge	.+82     	; 0x1846 <LCD_Void_Write+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f4:	6c 85       	ldd	r22, Y+12	; 0x0c
    17f6:	7d 85       	ldd	r23, Y+13	; 0x0d
    17f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    17fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e2       	ldi	r20, 0x20	; 32
    1802:	51 e4       	ldi	r21, 0x41	; 65
    1804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	bc 01       	movw	r22, r24
    180e:	cd 01       	movw	r24, r26
    1810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	9f 83       	std	Y+7, r25	; 0x07
    181a:	8e 83       	std	Y+6, r24	; 0x06
    181c:	0f c0       	rjmp	.+30     	; 0x183c <LCD_Void_Write+0x1f6>
    181e:	88 ec       	ldi	r24, 0xC8	; 200
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	9d 83       	std	Y+5, r25	; 0x05
    1824:	8c 83       	std	Y+4, r24	; 0x04
    1826:	8c 81       	ldd	r24, Y+4	; 0x04
    1828:	9d 81       	ldd	r25, Y+5	; 0x05
    182a:	01 97       	sbiw	r24, 0x01	; 1
    182c:	f1 f7       	brne	.-4      	; 0x182a <LCD_Void_Write+0x1e4>
    182e:	9d 83       	std	Y+5, r25	; 0x05
    1830:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1832:	8e 81       	ldd	r24, Y+6	; 0x06
    1834:	9f 81       	ldd	r25, Y+7	; 0x07
    1836:	01 97       	sbiw	r24, 0x01	; 1
    1838:	9f 83       	std	Y+7, r25	; 0x07
    183a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    183c:	8e 81       	ldd	r24, Y+6	; 0x06
    183e:	9f 81       	ldd	r25, Y+7	; 0x07
    1840:	00 97       	sbiw	r24, 0x00	; 0
    1842:	69 f7       	brne	.-38     	; 0x181e <LCD_Void_Write+0x1d8>
    1844:	24 c0       	rjmp	.+72     	; 0x188e <LCD_Void_Write+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1846:	68 85       	ldd	r22, Y+8	; 0x08
    1848:	79 85       	ldd	r23, Y+9	; 0x09
    184a:	8a 85       	ldd	r24, Y+10	; 0x0a
    184c:	9b 85       	ldd	r25, Y+11	; 0x0b
    184e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	9f 83       	std	Y+7, r25	; 0x07
    1858:	8e 83       	std	Y+6, r24	; 0x06
    185a:	8e 81       	ldd	r24, Y+6	; 0x06
    185c:	9f 81       	ldd	r25, Y+7	; 0x07
    185e:	9b 83       	std	Y+3, r25	; 0x03
    1860:	8a 83       	std	Y+2, r24	; 0x02
    1862:	8a 81       	ldd	r24, Y+2	; 0x02
    1864:	9b 81       	ldd	r25, Y+3	; 0x03
    1866:	01 97       	sbiw	r24, 0x01	; 1
    1868:	f1 f7       	brne	.-4      	; 0x1866 <LCD_Void_Write+0x220>
    186a:	9b 83       	std	Y+3, r25	; 0x03
    186c:	8a 83       	std	Y+2, r24	; 0x02
    186e:	0f c0       	rjmp	.+30     	; 0x188e <LCD_Void_Write+0x248>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1870:	69 89       	ldd	r22, Y+17	; 0x11
    1872:	7a 89       	ldd	r23, Y+18	; 0x12
    1874:	8b 89       	ldd	r24, Y+19	; 0x13
    1876:	9c 89       	ldd	r25, Y+20	; 0x14
    1878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	88 8b       	std	Y+16, r24	; 0x10
    1882:	88 89       	ldd	r24, Y+16	; 0x10
    1884:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1886:	89 81       	ldd	r24, Y+1	; 0x01
    1888:	8a 95       	dec	r24
    188a:	f1 f7       	brne	.-4      	; 0x1888 <LCD_Void_Write+0x242>
    188c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_U8_SetPinValue(LCD_U8_CTRL_PORT,LCD_U8_ENABLE_PIN,LOW);
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	62 e0       	ldi	r22, 0x02	; 2
    1892:	40 e0       	ldi	r20, 0x00	; 0
    1894:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_U8_SetPinValue>

}
    1898:	69 96       	adiw	r28, 0x19	; 25
    189a:	0f b6       	in	r0, 0x3f	; 63
    189c:	f8 94       	cli
    189e:	de bf       	out	0x3e, r29	; 62
    18a0:	0f be       	out	0x3f, r0	; 63
    18a2:	cd bf       	out	0x3d, r28	; 61
    18a4:	cf 91       	pop	r28
    18a6:	df 91       	pop	r29
    18a8:	08 95       	ret

000018aa <LCD_VOID_Init_8Bit>:

void LCD_VOID_Init_8Bit(){
    18aa:	0f 93       	push	r16
    18ac:	1f 93       	push	r17
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
    18b6:	c6 55       	subi	r28, 0x56	; 86
    18b8:	d0 40       	sbci	r29, 0x00	; 0
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	f8 94       	cli
    18be:	de bf       	out	0x3e, r29	; 62
    18c0:	0f be       	out	0x3f, r0	; 63
    18c2:	cd bf       	out	0x3d, r28	; 61
	DIO_U8_SetPortDirection(LCD_U8_DATA_PORT,Max_Port_Value);
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	6f ef       	ldi	r22, 0xFF	; 255
    18c8:	0e 94 b9 08 	call	0x1172	; 0x1172 <DIO_U8_SetPortDirection>
	DIO_U8_SetPinDirection(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,OUTPUT);
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	60 e0       	ldi	r22, 0x00	; 0
    18d0:	41 e0       	ldi	r20, 0x01	; 1
    18d2:	0e 94 ce 07 	call	0xf9c	; 0xf9c <DIO_U8_SetPinDirection>
	DIO_U8_SetPinDirection(LCD_U8_CTRL_PORT,LCD_U8_RW_PIN,OUTPUT);
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	61 e0       	ldi	r22, 0x01	; 1
    18da:	41 e0       	ldi	r20, 0x01	; 1
    18dc:	0e 94 ce 07 	call	0xf9c	; 0xf9c <DIO_U8_SetPinDirection>
	DIO_U8_SetPinDirection(LCD_U8_CTRL_PORT,LCD_U8_ENABLE_PIN,OUTPUT);
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	62 e0       	ldi	r22, 0x02	; 2
    18e4:	41 e0       	ldi	r20, 0x01	; 1
    18e6:	0e 94 ce 07 	call	0xf9c	; 0xf9c <DIO_U8_SetPinDirection>
    18ea:	fe 01       	movw	r30, r28
    18ec:	ed 5a       	subi	r30, 0xAD	; 173
    18ee:	ff 4f       	sbci	r31, 0xFF	; 255
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	a8 e4       	ldi	r26, 0x48	; 72
    18f6:	b2 e4       	ldi	r27, 0x42	; 66
    18f8:	80 83       	st	Z, r24
    18fa:	91 83       	std	Z+1, r25	; 0x01
    18fc:	a2 83       	std	Z+2, r26	; 0x02
    18fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1900:	8e 01       	movw	r16, r28
    1902:	01 5b       	subi	r16, 0xB1	; 177
    1904:	1f 4f       	sbci	r17, 0xFF	; 255
    1906:	fe 01       	movw	r30, r28
    1908:	ed 5a       	subi	r30, 0xAD	; 173
    190a:	ff 4f       	sbci	r31, 0xFF	; 255
    190c:	60 81       	ld	r22, Z
    190e:	71 81       	ldd	r23, Z+1	; 0x01
    1910:	82 81       	ldd	r24, Z+2	; 0x02
    1912:	93 81       	ldd	r25, Z+3	; 0x03
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	4a ef       	ldi	r20, 0xFA	; 250
    191a:	54 e4       	ldi	r21, 0x44	; 68
    191c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	f8 01       	movw	r30, r16
    1926:	80 83       	st	Z, r24
    1928:	91 83       	std	Z+1, r25	; 0x01
    192a:	a2 83       	std	Z+2, r26	; 0x02
    192c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    192e:	fe 01       	movw	r30, r28
    1930:	e1 5b       	subi	r30, 0xB1	; 177
    1932:	ff 4f       	sbci	r31, 0xFF	; 255
    1934:	60 81       	ld	r22, Z
    1936:	71 81       	ldd	r23, Z+1	; 0x01
    1938:	82 81       	ldd	r24, Z+2	; 0x02
    193a:	93 81       	ldd	r25, Z+3	; 0x03
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	40 e8       	ldi	r20, 0x80	; 128
    1942:	5f e3       	ldi	r21, 0x3F	; 63
    1944:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1948:	88 23       	and	r24, r24
    194a:	44 f4       	brge	.+16     	; 0x195c <LCD_VOID_Init_8Bit+0xb2>
		__ticks = 1;
    194c:	fe 01       	movw	r30, r28
    194e:	e3 5b       	subi	r30, 0xB3	; 179
    1950:	ff 4f       	sbci	r31, 0xFF	; 255
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	91 83       	std	Z+1, r25	; 0x01
    1958:	80 83       	st	Z, r24
    195a:	64 c0       	rjmp	.+200    	; 0x1a24 <LCD_VOID_Init_8Bit+0x17a>
	else if (__tmp > 65535)
    195c:	fe 01       	movw	r30, r28
    195e:	e1 5b       	subi	r30, 0xB1	; 177
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	60 81       	ld	r22, Z
    1964:	71 81       	ldd	r23, Z+1	; 0x01
    1966:	82 81       	ldd	r24, Z+2	; 0x02
    1968:	93 81       	ldd	r25, Z+3	; 0x03
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	3f ef       	ldi	r19, 0xFF	; 255
    196e:	4f e7       	ldi	r20, 0x7F	; 127
    1970:	57 e4       	ldi	r21, 0x47	; 71
    1972:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1976:	18 16       	cp	r1, r24
    1978:	0c f0       	brlt	.+2      	; 0x197c <LCD_VOID_Init_8Bit+0xd2>
    197a:	43 c0       	rjmp	.+134    	; 0x1a02 <LCD_VOID_Init_8Bit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    197c:	fe 01       	movw	r30, r28
    197e:	ed 5a       	subi	r30, 0xAD	; 173
    1980:	ff 4f       	sbci	r31, 0xFF	; 255
    1982:	60 81       	ld	r22, Z
    1984:	71 81       	ldd	r23, Z+1	; 0x01
    1986:	82 81       	ldd	r24, Z+2	; 0x02
    1988:	93 81       	ldd	r25, Z+3	; 0x03
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	40 e2       	ldi	r20, 0x20	; 32
    1990:	51 e4       	ldi	r21, 0x41	; 65
    1992:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	8e 01       	movw	r16, r28
    199c:	03 5b       	subi	r16, 0xB3	; 179
    199e:	1f 4f       	sbci	r17, 0xFF	; 255
    19a0:	bc 01       	movw	r22, r24
    19a2:	cd 01       	movw	r24, r26
    19a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a8:	dc 01       	movw	r26, r24
    19aa:	cb 01       	movw	r24, r22
    19ac:	f8 01       	movw	r30, r16
    19ae:	91 83       	std	Z+1, r25	; 0x01
    19b0:	80 83       	st	Z, r24
    19b2:	1f c0       	rjmp	.+62     	; 0x19f2 <LCD_VOID_Init_8Bit+0x148>
    19b4:	fe 01       	movw	r30, r28
    19b6:	e5 5b       	subi	r30, 0xB5	; 181
    19b8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ba:	88 ec       	ldi	r24, 0xC8	; 200
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	91 83       	std	Z+1, r25	; 0x01
    19c0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19c2:	fe 01       	movw	r30, r28
    19c4:	e5 5b       	subi	r30, 0xB5	; 181
    19c6:	ff 4f       	sbci	r31, 0xFF	; 255
    19c8:	80 81       	ld	r24, Z
    19ca:	91 81       	ldd	r25, Z+1	; 0x01
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	f1 f7       	brne	.-4      	; 0x19cc <LCD_VOID_Init_8Bit+0x122>
    19d0:	fe 01       	movw	r30, r28
    19d2:	e5 5b       	subi	r30, 0xB5	; 181
    19d4:	ff 4f       	sbci	r31, 0xFF	; 255
    19d6:	91 83       	std	Z+1, r25	; 0x01
    19d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19da:	de 01       	movw	r26, r28
    19dc:	a3 5b       	subi	r26, 0xB3	; 179
    19de:	bf 4f       	sbci	r27, 0xFF	; 255
    19e0:	fe 01       	movw	r30, r28
    19e2:	e3 5b       	subi	r30, 0xB3	; 179
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	80 81       	ld	r24, Z
    19e8:	91 81       	ldd	r25, Z+1	; 0x01
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	11 96       	adiw	r26, 0x01	; 1
    19ee:	9c 93       	st	X, r25
    19f0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f2:	fe 01       	movw	r30, r28
    19f4:	e3 5b       	subi	r30, 0xB3	; 179
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	80 81       	ld	r24, Z
    19fa:	91 81       	ldd	r25, Z+1	; 0x01
    19fc:	00 97       	sbiw	r24, 0x00	; 0
    19fe:	d1 f6       	brne	.-76     	; 0x19b4 <LCD_VOID_Init_8Bit+0x10a>
    1a00:	27 c0       	rjmp	.+78     	; 0x1a50 <LCD_VOID_Init_8Bit+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a02:	8e 01       	movw	r16, r28
    1a04:	03 5b       	subi	r16, 0xB3	; 179
    1a06:	1f 4f       	sbci	r17, 0xFF	; 255
    1a08:	fe 01       	movw	r30, r28
    1a0a:	e1 5b       	subi	r30, 0xB1	; 177
    1a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0e:	60 81       	ld	r22, Z
    1a10:	71 81       	ldd	r23, Z+1	; 0x01
    1a12:	82 81       	ldd	r24, Z+2	; 0x02
    1a14:	93 81       	ldd	r25, Z+3	; 0x03
    1a16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	f8 01       	movw	r30, r16
    1a20:	91 83       	std	Z+1, r25	; 0x01
    1a22:	80 83       	st	Z, r24
    1a24:	de 01       	movw	r26, r28
    1a26:	a7 5b       	subi	r26, 0xB7	; 183
    1a28:	bf 4f       	sbci	r27, 0xFF	; 255
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	e3 5b       	subi	r30, 0xB3	; 179
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	80 81       	ld	r24, Z
    1a32:	91 81       	ldd	r25, Z+1	; 0x01
    1a34:	8d 93       	st	X+, r24
    1a36:	9c 93       	st	X, r25
    1a38:	fe 01       	movw	r30, r28
    1a3a:	e7 5b       	subi	r30, 0xB7	; 183
    1a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3e:	80 81       	ld	r24, Z
    1a40:	91 81       	ldd	r25, Z+1	; 0x01
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	f1 f7       	brne	.-4      	; 0x1a42 <LCD_VOID_Init_8Bit+0x198>
    1a46:	fe 01       	movw	r30, r28
    1a48:	e7 5b       	subi	r30, 0xB7	; 183
    1a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4c:	91 83       	std	Z+1, r25	; 0x01
    1a4e:	80 83       	st	Z, r24

	_delay_ms(50);

	LCD_Void_Write_Cmd(Init_Function_set);
    1a50:	88 e3       	ldi	r24, 0x38	; 56
    1a52:	0e 94 84 09 	call	0x1308	; 0x1308 <LCD_Void_Write_Cmd>
    1a56:	fe 01       	movw	r30, r28
    1a58:	eb 5b       	subi	r30, 0xBB	; 187
    1a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	a8 e4       	ldi	r26, 0x48	; 72
    1a62:	b2 e4       	ldi	r27, 0x42	; 66
    1a64:	80 83       	st	Z, r24
    1a66:	91 83       	std	Z+1, r25	; 0x01
    1a68:	a2 83       	std	Z+2, r26	; 0x02
    1a6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a6c:	8e 01       	movw	r16, r28
    1a6e:	0f 5b       	subi	r16, 0xBF	; 191
    1a70:	1f 4f       	sbci	r17, 0xFF	; 255
    1a72:	fe 01       	movw	r30, r28
    1a74:	eb 5b       	subi	r30, 0xBB	; 187
    1a76:	ff 4f       	sbci	r31, 0xFF	; 255
    1a78:	60 81       	ld	r22, Z
    1a7a:	71 81       	ldd	r23, Z+1	; 0x01
    1a7c:	82 81       	ldd	r24, Z+2	; 0x02
    1a7e:	93 81       	ldd	r25, Z+3	; 0x03
    1a80:	2b ea       	ldi	r18, 0xAB	; 171
    1a82:	3a ea       	ldi	r19, 0xAA	; 170
    1a84:	4a e2       	ldi	r20, 0x2A	; 42
    1a86:	50 e4       	ldi	r21, 0x40	; 64
    1a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	f8 01       	movw	r30, r16
    1a92:	80 83       	st	Z, r24
    1a94:	91 83       	std	Z+1, r25	; 0x01
    1a96:	a2 83       	std	Z+2, r26	; 0x02
    1a98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a9a:	fe 01       	movw	r30, r28
    1a9c:	ef 5b       	subi	r30, 0xBF	; 191
    1a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa0:	60 81       	ld	r22, Z
    1aa2:	71 81       	ldd	r23, Z+1	; 0x01
    1aa4:	82 81       	ldd	r24, Z+2	; 0x02
    1aa6:	93 81       	ldd	r25, Z+3	; 0x03
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	40 e8       	ldi	r20, 0x80	; 128
    1aae:	5f e3       	ldi	r21, 0x3F	; 63
    1ab0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ab4:	88 23       	and	r24, r24
    1ab6:	34 f4       	brge	.+12     	; 0x1ac4 <LCD_VOID_Init_8Bit+0x21a>
		__ticks = 1;
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	fe 01       	movw	r30, r28
    1abc:	e0 5c       	subi	r30, 0xC0	; 192
    1abe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac0:	80 83       	st	Z, r24
    1ac2:	9d c0       	rjmp	.+314    	; 0x1bfe <LCD_VOID_Init_8Bit+0x354>
	else if (__tmp > 255)
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	ef 5b       	subi	r30, 0xBF	; 191
    1ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aca:	60 81       	ld	r22, Z
    1acc:	71 81       	ldd	r23, Z+1	; 0x01
    1ace:	82 81       	ldd	r24, Z+2	; 0x02
    1ad0:	93 81       	ldd	r25, Z+3	; 0x03
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	4f e7       	ldi	r20, 0x7F	; 127
    1ad8:	53 e4       	ldi	r21, 0x43	; 67
    1ada:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ade:	18 16       	cp	r1, r24
    1ae0:	0c f0       	brlt	.+2      	; 0x1ae4 <LCD_VOID_Init_8Bit+0x23a>
    1ae2:	7e c0       	rjmp	.+252    	; 0x1be0 <LCD_VOID_Init_8Bit+0x336>
	{
		_delay_ms(__us / 1000.0);
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	eb 5b       	subi	r30, 0xBB	; 187
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	60 81       	ld	r22, Z
    1aec:	71 81       	ldd	r23, Z+1	; 0x01
    1aee:	82 81       	ldd	r24, Z+2	; 0x02
    1af0:	93 81       	ldd	r25, Z+3	; 0x03
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	4a e7       	ldi	r20, 0x7A	; 122
    1af8:	54 e4       	ldi	r21, 0x44	; 68
    1afa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	8c af       	std	Y+60, r24	; 0x3c
    1b04:	9d af       	std	Y+61, r25	; 0x3d
    1b06:	ae af       	std	Y+62, r26	; 0x3e
    1b08:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b0a:	6c ad       	ldd	r22, Y+60	; 0x3c
    1b0c:	7d ad       	ldd	r23, Y+61	; 0x3d
    1b0e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b10:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	4a ef       	ldi	r20, 0xFA	; 250
    1b18:	54 e4       	ldi	r21, 0x44	; 68
    1b1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	88 af       	std	Y+56, r24	; 0x38
    1b24:	99 af       	std	Y+57, r25	; 0x39
    1b26:	aa af       	std	Y+58, r26	; 0x3a
    1b28:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1b2a:	68 ad       	ldd	r22, Y+56	; 0x38
    1b2c:	79 ad       	ldd	r23, Y+57	; 0x39
    1b2e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1b30:	9b ad       	ldd	r25, Y+59	; 0x3b
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	40 e8       	ldi	r20, 0x80	; 128
    1b38:	5f e3       	ldi	r21, 0x3F	; 63
    1b3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b3e:	88 23       	and	r24, r24
    1b40:	2c f4       	brge	.+10     	; 0x1b4c <LCD_VOID_Init_8Bit+0x2a2>
		__ticks = 1;
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	9f ab       	std	Y+55, r25	; 0x37
    1b48:	8e ab       	std	Y+54, r24	; 0x36
    1b4a:	3f c0       	rjmp	.+126    	; 0x1bca <LCD_VOID_Init_8Bit+0x320>
	else if (__tmp > 65535)
    1b4c:	68 ad       	ldd	r22, Y+56	; 0x38
    1b4e:	79 ad       	ldd	r23, Y+57	; 0x39
    1b50:	8a ad       	ldd	r24, Y+58	; 0x3a
    1b52:	9b ad       	ldd	r25, Y+59	; 0x3b
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	3f ef       	ldi	r19, 0xFF	; 255
    1b58:	4f e7       	ldi	r20, 0x7F	; 127
    1b5a:	57 e4       	ldi	r21, 0x47	; 71
    1b5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b60:	18 16       	cp	r1, r24
    1b62:	4c f5       	brge	.+82     	; 0x1bb6 <LCD_VOID_Init_8Bit+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b64:	6c ad       	ldd	r22, Y+60	; 0x3c
    1b66:	7d ad       	ldd	r23, Y+61	; 0x3d
    1b68:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b6a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	40 e2       	ldi	r20, 0x20	; 32
    1b72:	51 e4       	ldi	r21, 0x41	; 65
    1b74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	bc 01       	movw	r22, r24
    1b7e:	cd 01       	movw	r24, r26
    1b80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	9f ab       	std	Y+55, r25	; 0x37
    1b8a:	8e ab       	std	Y+54, r24	; 0x36
    1b8c:	0f c0       	rjmp	.+30     	; 0x1bac <LCD_VOID_Init_8Bit+0x302>
    1b8e:	88 ec       	ldi	r24, 0xC8	; 200
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	9d ab       	std	Y+53, r25	; 0x35
    1b94:	8c ab       	std	Y+52, r24	; 0x34
    1b96:	8c a9       	ldd	r24, Y+52	; 0x34
    1b98:	9d a9       	ldd	r25, Y+53	; 0x35
    1b9a:	01 97       	sbiw	r24, 0x01	; 1
    1b9c:	f1 f7       	brne	.-4      	; 0x1b9a <LCD_VOID_Init_8Bit+0x2f0>
    1b9e:	9d ab       	std	Y+53, r25	; 0x35
    1ba0:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba2:	8e a9       	ldd	r24, Y+54	; 0x36
    1ba4:	9f a9       	ldd	r25, Y+55	; 0x37
    1ba6:	01 97       	sbiw	r24, 0x01	; 1
    1ba8:	9f ab       	std	Y+55, r25	; 0x37
    1baa:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bac:	8e a9       	ldd	r24, Y+54	; 0x36
    1bae:	9f a9       	ldd	r25, Y+55	; 0x37
    1bb0:	00 97       	sbiw	r24, 0x00	; 0
    1bb2:	69 f7       	brne	.-38     	; 0x1b8e <LCD_VOID_Init_8Bit+0x2e4>
    1bb4:	2d c0       	rjmp	.+90     	; 0x1c10 <LCD_VOID_Init_8Bit+0x366>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb6:	68 ad       	ldd	r22, Y+56	; 0x38
    1bb8:	79 ad       	ldd	r23, Y+57	; 0x39
    1bba:	8a ad       	ldd	r24, Y+58	; 0x3a
    1bbc:	9b ad       	ldd	r25, Y+59	; 0x3b
    1bbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	9f ab       	std	Y+55, r25	; 0x37
    1bc8:	8e ab       	std	Y+54, r24	; 0x36
    1bca:	8e a9       	ldd	r24, Y+54	; 0x36
    1bcc:	9f a9       	ldd	r25, Y+55	; 0x37
    1bce:	9b ab       	std	Y+51, r25	; 0x33
    1bd0:	8a ab       	std	Y+50, r24	; 0x32
    1bd2:	8a a9       	ldd	r24, Y+50	; 0x32
    1bd4:	9b a9       	ldd	r25, Y+51	; 0x33
    1bd6:	01 97       	sbiw	r24, 0x01	; 1
    1bd8:	f1 f7       	brne	.-4      	; 0x1bd6 <LCD_VOID_Init_8Bit+0x32c>
    1bda:	9b ab       	std	Y+51, r25	; 0x33
    1bdc:	8a ab       	std	Y+50, r24	; 0x32
    1bde:	18 c0       	rjmp	.+48     	; 0x1c10 <LCD_VOID_Init_8Bit+0x366>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1be0:	fe 01       	movw	r30, r28
    1be2:	ef 5b       	subi	r30, 0xBF	; 191
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	60 81       	ld	r22, Z
    1be8:	71 81       	ldd	r23, Z+1	; 0x01
    1bea:	82 81       	ldd	r24, Z+2	; 0x02
    1bec:	93 81       	ldd	r25, Z+3	; 0x03
    1bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	e0 5c       	subi	r30, 0xC0	; 192
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	80 83       	st	Z, r24
    1bfe:	fe 01       	movw	r30, r28
    1c00:	e0 5c       	subi	r30, 0xC0	; 192
    1c02:	ff 4f       	sbci	r31, 0xFF	; 255
    1c04:	80 81       	ld	r24, Z
    1c06:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c08:	89 a9       	ldd	r24, Y+49	; 0x31
    1c0a:	8a 95       	dec	r24
    1c0c:	f1 f7       	brne	.-4      	; 0x1c0a <LCD_VOID_Init_8Bit+0x360>
    1c0e:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(50);

	LCD_Void_Write_Cmd(Init_Display_OnOff);
    1c10:	8c e0       	ldi	r24, 0x0C	; 12
    1c12:	0e 94 84 09 	call	0x1308	; 0x1308 <LCD_Void_Write_Cmd>
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	a8 e4       	ldi	r26, 0x48	; 72
    1c1c:	b2 e4       	ldi	r27, 0x42	; 66
    1c1e:	8d a7       	std	Y+45, r24	; 0x2d
    1c20:	9e a7       	std	Y+46, r25	; 0x2e
    1c22:	af a7       	std	Y+47, r26	; 0x2f
    1c24:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c26:	6d a5       	ldd	r22, Y+45	; 0x2d
    1c28:	7e a5       	ldd	r23, Y+46	; 0x2e
    1c2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c2c:	98 a9       	ldd	r25, Y+48	; 0x30
    1c2e:	2b ea       	ldi	r18, 0xAB	; 171
    1c30:	3a ea       	ldi	r19, 0xAA	; 170
    1c32:	4a e2       	ldi	r20, 0x2A	; 42
    1c34:	50 e4       	ldi	r21, 0x40	; 64
    1c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	89 a7       	std	Y+41, r24	; 0x29
    1c40:	9a a7       	std	Y+42, r25	; 0x2a
    1c42:	ab a7       	std	Y+43, r26	; 0x2b
    1c44:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1c46:	69 a5       	ldd	r22, Y+41	; 0x29
    1c48:	7a a5       	ldd	r23, Y+42	; 0x2a
    1c4a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c4c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	40 e8       	ldi	r20, 0x80	; 128
    1c54:	5f e3       	ldi	r21, 0x3F	; 63
    1c56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c5a:	88 23       	and	r24, r24
    1c5c:	1c f4       	brge	.+6      	; 0x1c64 <LCD_VOID_Init_8Bit+0x3ba>
		__ticks = 1;
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	88 a7       	std	Y+40, r24	; 0x28
    1c62:	91 c0       	rjmp	.+290    	; 0x1d86 <LCD_VOID_Init_8Bit+0x4dc>
	else if (__tmp > 255)
    1c64:	69 a5       	ldd	r22, Y+41	; 0x29
    1c66:	7a a5       	ldd	r23, Y+42	; 0x2a
    1c68:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c6a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	4f e7       	ldi	r20, 0x7F	; 127
    1c72:	53 e4       	ldi	r21, 0x43	; 67
    1c74:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c78:	18 16       	cp	r1, r24
    1c7a:	0c f0       	brlt	.+2      	; 0x1c7e <LCD_VOID_Init_8Bit+0x3d4>
    1c7c:	7b c0       	rjmp	.+246    	; 0x1d74 <LCD_VOID_Init_8Bit+0x4ca>
	{
		_delay_ms(__us / 1000.0);
    1c7e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1c80:	7e a5       	ldd	r23, Y+46	; 0x2e
    1c82:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c84:	98 a9       	ldd	r25, Y+48	; 0x30
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	4a e7       	ldi	r20, 0x7A	; 122
    1c8c:	54 e4       	ldi	r21, 0x44	; 68
    1c8e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	8c a3       	std	Y+36, r24	; 0x24
    1c98:	9d a3       	std	Y+37, r25	; 0x25
    1c9a:	ae a3       	std	Y+38, r26	; 0x26
    1c9c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c9e:	6c a1       	ldd	r22, Y+36	; 0x24
    1ca0:	7d a1       	ldd	r23, Y+37	; 0x25
    1ca2:	8e a1       	ldd	r24, Y+38	; 0x26
    1ca4:	9f a1       	ldd	r25, Y+39	; 0x27
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	4a ef       	ldi	r20, 0xFA	; 250
    1cac:	54 e4       	ldi	r21, 0x44	; 68
    1cae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	88 a3       	std	Y+32, r24	; 0x20
    1cb8:	99 a3       	std	Y+33, r25	; 0x21
    1cba:	aa a3       	std	Y+34, r26	; 0x22
    1cbc:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1cbe:	68 a1       	ldd	r22, Y+32	; 0x20
    1cc0:	79 a1       	ldd	r23, Y+33	; 0x21
    1cc2:	8a a1       	ldd	r24, Y+34	; 0x22
    1cc4:	9b a1       	ldd	r25, Y+35	; 0x23
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	40 e8       	ldi	r20, 0x80	; 128
    1ccc:	5f e3       	ldi	r21, 0x3F	; 63
    1cce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cd2:	88 23       	and	r24, r24
    1cd4:	2c f4       	brge	.+10     	; 0x1ce0 <LCD_VOID_Init_8Bit+0x436>
		__ticks = 1;
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	9f 8f       	std	Y+31, r25	; 0x1f
    1cdc:	8e 8f       	std	Y+30, r24	; 0x1e
    1cde:	3f c0       	rjmp	.+126    	; 0x1d5e <LCD_VOID_Init_8Bit+0x4b4>
	else if (__tmp > 65535)
    1ce0:	68 a1       	ldd	r22, Y+32	; 0x20
    1ce2:	79 a1       	ldd	r23, Y+33	; 0x21
    1ce4:	8a a1       	ldd	r24, Y+34	; 0x22
    1ce6:	9b a1       	ldd	r25, Y+35	; 0x23
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	3f ef       	ldi	r19, 0xFF	; 255
    1cec:	4f e7       	ldi	r20, 0x7F	; 127
    1cee:	57 e4       	ldi	r21, 0x47	; 71
    1cf0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cf4:	18 16       	cp	r1, r24
    1cf6:	4c f5       	brge	.+82     	; 0x1d4a <LCD_VOID_Init_8Bit+0x4a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf8:	6c a1       	ldd	r22, Y+36	; 0x24
    1cfa:	7d a1       	ldd	r23, Y+37	; 0x25
    1cfc:	8e a1       	ldd	r24, Y+38	; 0x26
    1cfe:	9f a1       	ldd	r25, Y+39	; 0x27
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	40 e2       	ldi	r20, 0x20	; 32
    1d06:	51 e4       	ldi	r21, 0x41	; 65
    1d08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	bc 01       	movw	r22, r24
    1d12:	cd 01       	movw	r24, r26
    1d14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	9f 8f       	std	Y+31, r25	; 0x1f
    1d1e:	8e 8f       	std	Y+30, r24	; 0x1e
    1d20:	0f c0       	rjmp	.+30     	; 0x1d40 <LCD_VOID_Init_8Bit+0x496>
    1d22:	88 ec       	ldi	r24, 0xC8	; 200
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	9d 8f       	std	Y+29, r25	; 0x1d
    1d28:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d2a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d2c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <LCD_VOID_Init_8Bit+0x484>
    1d32:	9d 8f       	std	Y+29, r25	; 0x1d
    1d34:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d36:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d38:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	9f 8f       	std	Y+31, r25	; 0x1f
    1d3e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d40:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d42:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d44:	00 97       	sbiw	r24, 0x00	; 0
    1d46:	69 f7       	brne	.-38     	; 0x1d22 <LCD_VOID_Init_8Bit+0x478>
    1d48:	24 c0       	rjmp	.+72     	; 0x1d92 <LCD_VOID_Init_8Bit+0x4e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4a:	68 a1       	ldd	r22, Y+32	; 0x20
    1d4c:	79 a1       	ldd	r23, Y+33	; 0x21
    1d4e:	8a a1       	ldd	r24, Y+34	; 0x22
    1d50:	9b a1       	ldd	r25, Y+35	; 0x23
    1d52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	9f 8f       	std	Y+31, r25	; 0x1f
    1d5c:	8e 8f       	std	Y+30, r24	; 0x1e
    1d5e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d60:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d62:	9b 8f       	std	Y+27, r25	; 0x1b
    1d64:	8a 8f       	std	Y+26, r24	; 0x1a
    1d66:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d68:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	f1 f7       	brne	.-4      	; 0x1d6a <LCD_VOID_Init_8Bit+0x4c0>
    1d6e:	9b 8f       	std	Y+27, r25	; 0x1b
    1d70:	8a 8f       	std	Y+26, r24	; 0x1a
    1d72:	0f c0       	rjmp	.+30     	; 0x1d92 <LCD_VOID_Init_8Bit+0x4e8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d74:	69 a5       	ldd	r22, Y+41	; 0x29
    1d76:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d78:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d7a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	88 a7       	std	Y+40, r24	; 0x28
    1d86:	88 a5       	ldd	r24, Y+40	; 0x28
    1d88:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d8a:	89 8d       	ldd	r24, Y+25	; 0x19
    1d8c:	8a 95       	dec	r24
    1d8e:	f1 f7       	brne	.-4      	; 0x1d8c <LCD_VOID_Init_8Bit+0x4e2>
    1d90:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(50);

	LCD_Void_Write_Cmd(Init_Display_Clear);
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	0e 94 84 09 	call	0x1308	; 0x1308 <LCD_Void_Write_Cmd>
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	a0 e0       	ldi	r26, 0x00	; 0
    1d9e:	b0 e4       	ldi	r27, 0x40	; 64
    1da0:	8d 8b       	std	Y+21, r24	; 0x15
    1da2:	9e 8b       	std	Y+22, r25	; 0x16
    1da4:	af 8b       	std	Y+23, r26	; 0x17
    1da6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1da8:	6d 89       	ldd	r22, Y+21	; 0x15
    1daa:	7e 89       	ldd	r23, Y+22	; 0x16
    1dac:	8f 89       	ldd	r24, Y+23	; 0x17
    1dae:	98 8d       	ldd	r25, Y+24	; 0x18
    1db0:	2b ea       	ldi	r18, 0xAB	; 171
    1db2:	3a ea       	ldi	r19, 0xAA	; 170
    1db4:	4a e2       	ldi	r20, 0x2A	; 42
    1db6:	50 e4       	ldi	r21, 0x40	; 64
    1db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	89 8b       	std	Y+17, r24	; 0x11
    1dc2:	9a 8b       	std	Y+18, r25	; 0x12
    1dc4:	ab 8b       	std	Y+19, r26	; 0x13
    1dc6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1dc8:	69 89       	ldd	r22, Y+17	; 0x11
    1dca:	7a 89       	ldd	r23, Y+18	; 0x12
    1dcc:	8b 89       	ldd	r24, Y+19	; 0x13
    1dce:	9c 89       	ldd	r25, Y+20	; 0x14
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	40 e8       	ldi	r20, 0x80	; 128
    1dd6:	5f e3       	ldi	r21, 0x3F	; 63
    1dd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ddc:	88 23       	and	r24, r24
    1dde:	1c f4       	brge	.+6      	; 0x1de6 <LCD_VOID_Init_8Bit+0x53c>
		__ticks = 1;
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	88 8b       	std	Y+16, r24	; 0x10
    1de4:	91 c0       	rjmp	.+290    	; 0x1f08 <LCD_VOID_Init_8Bit+0x65e>
	else if (__tmp > 255)
    1de6:	69 89       	ldd	r22, Y+17	; 0x11
    1de8:	7a 89       	ldd	r23, Y+18	; 0x12
    1dea:	8b 89       	ldd	r24, Y+19	; 0x13
    1dec:	9c 89       	ldd	r25, Y+20	; 0x14
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	4f e7       	ldi	r20, 0x7F	; 127
    1df4:	53 e4       	ldi	r21, 0x43	; 67
    1df6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dfa:	18 16       	cp	r1, r24
    1dfc:	0c f0       	brlt	.+2      	; 0x1e00 <LCD_VOID_Init_8Bit+0x556>
    1dfe:	7b c0       	rjmp	.+246    	; 0x1ef6 <LCD_VOID_Init_8Bit+0x64c>
	{
		_delay_ms(__us / 1000.0);
    1e00:	6d 89       	ldd	r22, Y+21	; 0x15
    1e02:	7e 89       	ldd	r23, Y+22	; 0x16
    1e04:	8f 89       	ldd	r24, Y+23	; 0x17
    1e06:	98 8d       	ldd	r25, Y+24	; 0x18
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	4a e7       	ldi	r20, 0x7A	; 122
    1e0e:	54 e4       	ldi	r21, 0x44	; 68
    1e10:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	8c 87       	std	Y+12, r24	; 0x0c
    1e1a:	9d 87       	std	Y+13, r25	; 0x0d
    1e1c:	ae 87       	std	Y+14, r26	; 0x0e
    1e1e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e20:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e22:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e24:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e26:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	4a ef       	ldi	r20, 0xFA	; 250
    1e2e:	54 e4       	ldi	r21, 0x44	; 68
    1e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	88 87       	std	Y+8, r24	; 0x08
    1e3a:	99 87       	std	Y+9, r25	; 0x09
    1e3c:	aa 87       	std	Y+10, r26	; 0x0a
    1e3e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1e40:	68 85       	ldd	r22, Y+8	; 0x08
    1e42:	79 85       	ldd	r23, Y+9	; 0x09
    1e44:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e46:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	40 e8       	ldi	r20, 0x80	; 128
    1e4e:	5f e3       	ldi	r21, 0x3F	; 63
    1e50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e54:	88 23       	and	r24, r24
    1e56:	2c f4       	brge	.+10     	; 0x1e62 <LCD_VOID_Init_8Bit+0x5b8>
		__ticks = 1;
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	9f 83       	std	Y+7, r25	; 0x07
    1e5e:	8e 83       	std	Y+6, r24	; 0x06
    1e60:	3f c0       	rjmp	.+126    	; 0x1ee0 <LCD_VOID_Init_8Bit+0x636>
	else if (__tmp > 65535)
    1e62:	68 85       	ldd	r22, Y+8	; 0x08
    1e64:	79 85       	ldd	r23, Y+9	; 0x09
    1e66:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e68:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	3f ef       	ldi	r19, 0xFF	; 255
    1e6e:	4f e7       	ldi	r20, 0x7F	; 127
    1e70:	57 e4       	ldi	r21, 0x47	; 71
    1e72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e76:	18 16       	cp	r1, r24
    1e78:	4c f5       	brge	.+82     	; 0x1ecc <LCD_VOID_Init_8Bit+0x622>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e7a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e7c:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e7e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e80:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	40 e2       	ldi	r20, 0x20	; 32
    1e88:	51 e4       	ldi	r21, 0x41	; 65
    1e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	bc 01       	movw	r22, r24
    1e94:	cd 01       	movw	r24, r26
    1e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	9f 83       	std	Y+7, r25	; 0x07
    1ea0:	8e 83       	std	Y+6, r24	; 0x06
    1ea2:	0f c0       	rjmp	.+30     	; 0x1ec2 <LCD_VOID_Init_8Bit+0x618>
    1ea4:	88 ec       	ldi	r24, 0xC8	; 200
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	9d 83       	std	Y+5, r25	; 0x05
    1eaa:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1eac:	8c 81       	ldd	r24, Y+4	; 0x04
    1eae:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
    1eb2:	f1 f7       	brne	.-4      	; 0x1eb0 <LCD_VOID_Init_8Bit+0x606>
    1eb4:	9d 83       	std	Y+5, r25	; 0x05
    1eb6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb8:	8e 81       	ldd	r24, Y+6	; 0x06
    1eba:	9f 81       	ldd	r25, Y+7	; 0x07
    1ebc:	01 97       	sbiw	r24, 0x01	; 1
    1ebe:	9f 83       	std	Y+7, r25	; 0x07
    1ec0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ec4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ec6:	00 97       	sbiw	r24, 0x00	; 0
    1ec8:	69 f7       	brne	.-38     	; 0x1ea4 <LCD_VOID_Init_8Bit+0x5fa>
    1eca:	24 c0       	rjmp	.+72     	; 0x1f14 <LCD_VOID_Init_8Bit+0x66a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ecc:	68 85       	ldd	r22, Y+8	; 0x08
    1ece:	79 85       	ldd	r23, Y+9	; 0x09
    1ed0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ed2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	9f 83       	std	Y+7, r25	; 0x07
    1ede:	8e 83       	std	Y+6, r24	; 0x06
    1ee0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ee2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ee4:	9b 83       	std	Y+3, r25	; 0x03
    1ee6:	8a 83       	std	Y+2, r24	; 0x02
    1ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eea:	9b 81       	ldd	r25, Y+3	; 0x03
    1eec:	01 97       	sbiw	r24, 0x01	; 1
    1eee:	f1 f7       	brne	.-4      	; 0x1eec <LCD_VOID_Init_8Bit+0x642>
    1ef0:	9b 83       	std	Y+3, r25	; 0x03
    1ef2:	8a 83       	std	Y+2, r24	; 0x02
    1ef4:	0f c0       	rjmp	.+30     	; 0x1f14 <LCD_VOID_Init_8Bit+0x66a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ef6:	69 89       	ldd	r22, Y+17	; 0x11
    1ef8:	7a 89       	ldd	r23, Y+18	; 0x12
    1efa:	8b 89       	ldd	r24, Y+19	; 0x13
    1efc:	9c 89       	ldd	r25, Y+20	; 0x14
    1efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	88 8b       	std	Y+16, r24	; 0x10
    1f08:	88 89       	ldd	r24, Y+16	; 0x10
    1f0a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	8a 95       	dec	r24
    1f10:	f1 f7       	brne	.-4      	; 0x1f0e <LCD_VOID_Init_8Bit+0x664>
    1f12:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2);

	LCD_Void_Write_Cmd(Init_Entry_Data_Set);
    1f14:	86 e0       	ldi	r24, 0x06	; 6
    1f16:	0e 94 84 09 	call	0x1308	; 0x1308 <LCD_Void_Write_Cmd>


}
    1f1a:	ca 5a       	subi	r28, 0xAA	; 170
    1f1c:	df 4f       	sbci	r29, 0xFF	; 255
    1f1e:	0f b6       	in	r0, 0x3f	; 63
    1f20:	f8 94       	cli
    1f22:	de bf       	out	0x3e, r29	; 62
    1f24:	0f be       	out	0x3f, r0	; 63
    1f26:	cd bf       	out	0x3d, r28	; 61
    1f28:	cf 91       	pop	r28
    1f2a:	df 91       	pop	r29
    1f2c:	1f 91       	pop	r17
    1f2e:	0f 91       	pop	r16
    1f30:	08 95       	ret

00001f32 <sinosoidal_wave>:
#include "util/delay.h"
#include "DIO_Interface.h"
#include "LCD_Interface.h"
u8 pos = 0;

void sinosoidal_wave(u8* Copy_u8_Name){
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
    1f3a:	66 97       	sbiw	r28, 0x16	; 22
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	de bf       	out	0x3e, r29	; 62
    1f42:	0f be       	out	0x3f, r0	; 63
    1f44:	cd bf       	out	0x3d, r28	; 61
    1f46:	9e 8b       	std	Y+22, r25	; 0x16
    1f48:	8d 8b       	std	Y+21, r24	; 0x15
	u8 namelenght = 0;
    1f4a:	1c 8a       	std	Y+20, r1	; 0x14
    1f4c:	08 c0       	rjmp	.+16     	; 0x1f5e <sinosoidal_wave+0x2c>

	while (*Copy_u8_Name){
		namelenght++;
    1f4e:	8c 89       	ldd	r24, Y+20	; 0x14
    1f50:	8f 5f       	subi	r24, 0xFF	; 255
    1f52:	8c 8b       	std	Y+20, r24	; 0x14
		Copy_u8_Name++;
    1f54:	8d 89       	ldd	r24, Y+21	; 0x15
    1f56:	9e 89       	ldd	r25, Y+22	; 0x16
    1f58:	01 96       	adiw	r24, 0x01	; 1
    1f5a:	9e 8b       	std	Y+22, r25	; 0x16
    1f5c:	8d 8b       	std	Y+21, r24	; 0x15
u8 pos = 0;

void sinosoidal_wave(u8* Copy_u8_Name){
	u8 namelenght = 0;

	while (*Copy_u8_Name){
    1f5e:	ed 89       	ldd	r30, Y+21	; 0x15
    1f60:	fe 89       	ldd	r31, Y+22	; 0x16
    1f62:	80 81       	ld	r24, Z
    1f64:	88 23       	and	r24, r24
    1f66:	99 f7       	brne	.-26     	; 0x1f4e <sinosoidal_wave+0x1c>
		namelenght++;
		Copy_u8_Name++;
	}
	Copy_u8_Name -= namelenght;
    1f68:	8c 89       	ldd	r24, Y+20	; 0x14
    1f6a:	88 2f       	mov	r24, r24
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	22 27       	eor	r18, r18
    1f70:	33 27       	eor	r19, r19
    1f72:	28 1b       	sub	r18, r24
    1f74:	39 0b       	sbc	r19, r25
    1f76:	8d 89       	ldd	r24, Y+21	; 0x15
    1f78:	9e 89       	ldd	r25, Y+22	; 0x16
    1f7a:	82 0f       	add	r24, r18
    1f7c:	93 1f       	adc	r25, r19
    1f7e:	9e 8b       	std	Y+22, r25	; 0x16
    1f80:	8d 8b       	std	Y+21, r24	; 0x15
	u8 start_Xpos = 0;
    1f82:	1b 8a       	std	Y+19, r1	; 0x13
	u8 start_Ypos = 1;
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	8a 8b       	std	Y+18, r24	; 0x12

	while (1){
		LCD_Void_Clear_Display();
    1f88:	0e 94 9b 0a 	call	0x1536	; 0x1536 <LCD_Void_Clear_Display>
		if(start_Xpos >= 0 && start_Xpos < 16){
    1f8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f8e:	80 31       	cpi	r24, 0x10	; 16
    1f90:	00 f5       	brcc	.+64     	; 0x1fd2 <sinosoidal_wave+0xa0>
			for (u8 i = 0; i < namelenght; i++){
    1f92:	19 8a       	std	Y+17, r1	; 0x11
    1f94:	1a c0       	rjmp	.+52     	; 0x1fca <sinosoidal_wave+0x98>
				u8 xpos = start_Xpos + i;
    1f96:	9b 89       	ldd	r25, Y+19	; 0x13
    1f98:	89 89       	ldd	r24, Y+17	; 0x11
    1f9a:	89 0f       	add	r24, r25
    1f9c:	88 8b       	std	Y+16, r24	; 0x10
				u8 ypos = start_Ypos;
    1f9e:	8a 89       	ldd	r24, Y+18	; 0x12
    1fa0:	8f 87       	std	Y+15, r24	; 0x0f
				if(xpos >= 0 && xpos < 16 && ypos >= 0 && ypos < 2){
    1fa2:	88 89       	ldd	r24, Y+16	; 0x10
    1fa4:	80 31       	cpi	r24, 0x10	; 16
    1fa6:	70 f4       	brcc	.+28     	; 0x1fc4 <sinosoidal_wave+0x92>
    1fa8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1faa:	82 30       	cpi	r24, 0x02	; 2
    1fac:	58 f4       	brcc	.+22     	; 0x1fc4 <sinosoidal_wave+0x92>
					LCD_Void_Write_String(Copy_u8_Name + i, xpos, ypos);
    1fae:	89 89       	ldd	r24, Y+17	; 0x11
    1fb0:	28 2f       	mov	r18, r24
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	8d 89       	ldd	r24, Y+21	; 0x15
    1fb6:	9e 89       	ldd	r25, Y+22	; 0x16
    1fb8:	82 0f       	add	r24, r18
    1fba:	93 1f       	adc	r25, r19
    1fbc:	68 89       	ldd	r22, Y+16	; 0x10
    1fbe:	4f 85       	ldd	r20, Y+15	; 0x0f
    1fc0:	0e 94 a8 09 	call	0x1350	; 0x1350 <LCD_Void_Write_String>
	u8 start_Ypos = 1;

	while (1){
		LCD_Void_Clear_Display();
		if(start_Xpos >= 0 && start_Xpos < 16){
			for (u8 i = 0; i < namelenght; i++){
    1fc4:	89 89       	ldd	r24, Y+17	; 0x11
    1fc6:	8f 5f       	subi	r24, 0xFF	; 255
    1fc8:	89 8b       	std	Y+17, r24	; 0x11
    1fca:	99 89       	ldd	r25, Y+17	; 0x11
    1fcc:	8c 89       	ldd	r24, Y+20	; 0x14
    1fce:	98 17       	cp	r25, r24
    1fd0:	10 f3       	brcs	.-60     	; 0x1f96 <sinosoidal_wave+0x64>
				if(xpos >= 0 && xpos < 16 && ypos >= 0 && ypos < 2){
					LCD_Void_Write_String(Copy_u8_Name + i, xpos, ypos);
				}
			}
		}
		start_Xpos++;
    1fd2:	8b 89       	ldd	r24, Y+19	; 0x13
    1fd4:	8f 5f       	subi	r24, 0xFF	; 255
    1fd6:	8b 8b       	std	Y+19, r24	; 0x13

		if(start_Xpos >= 16){
    1fd8:	8b 89       	ldd	r24, Y+19	; 0x13
    1fda:	80 31       	cpi	r24, 0x10	; 16
    1fdc:	08 f0       	brcs	.+2      	; 0x1fe0 <sinosoidal_wave+0xae>
			start_Xpos = 0;
    1fde:	1b 8a       	std	Y+19, r1	; 0x13
		}
		if(start_Ypos == 1){
    1fe0:	8a 89       	ldd	r24, Y+18	; 0x12
    1fe2:	81 30       	cpi	r24, 0x01	; 1
    1fe4:	11 f4       	brne	.+4      	; 0x1fea <sinosoidal_wave+0xb8>
			start_Ypos = 0;
    1fe6:	1a 8a       	std	Y+18, r1	; 0x12
    1fe8:	02 c0       	rjmp	.+4      	; 0x1fee <sinosoidal_wave+0xbc>
		}
		else {
			start_Ypos = 1;
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	8a 8b       	std	Y+18, r24	; 0x12
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	aa ef       	ldi	r26, 0xFA	; 250
    1ff4:	b4 e4       	ldi	r27, 0x44	; 68
    1ff6:	8b 87       	std	Y+11, r24	; 0x0b
    1ff8:	9c 87       	std	Y+12, r25	; 0x0c
    1ffa:	ad 87       	std	Y+13, r26	; 0x0d
    1ffc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2000:	7c 85       	ldd	r23, Y+12	; 0x0c
    2002:	8d 85       	ldd	r24, Y+13	; 0x0d
    2004:	9e 85       	ldd	r25, Y+14	; 0x0e
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	4a ef       	ldi	r20, 0xFA	; 250
    200c:	54 e4       	ldi	r21, 0x44	; 68
    200e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	8f 83       	std	Y+7, r24	; 0x07
    2018:	98 87       	std	Y+8, r25	; 0x08
    201a:	a9 87       	std	Y+9, r26	; 0x09
    201c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    201e:	6f 81       	ldd	r22, Y+7	; 0x07
    2020:	78 85       	ldd	r23, Y+8	; 0x08
    2022:	89 85       	ldd	r24, Y+9	; 0x09
    2024:	9a 85       	ldd	r25, Y+10	; 0x0a
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	40 e8       	ldi	r20, 0x80	; 128
    202c:	5f e3       	ldi	r21, 0x3F	; 63
    202e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2032:	88 23       	and	r24, r24
    2034:	2c f4       	brge	.+10     	; 0x2040 <sinosoidal_wave+0x10e>
		__ticks = 1;
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	9e 83       	std	Y+6, r25	; 0x06
    203c:	8d 83       	std	Y+5, r24	; 0x05
    203e:	3f c0       	rjmp	.+126    	; 0x20be <sinosoidal_wave+0x18c>
	else if (__tmp > 65535)
    2040:	6f 81       	ldd	r22, Y+7	; 0x07
    2042:	78 85       	ldd	r23, Y+8	; 0x08
    2044:	89 85       	ldd	r24, Y+9	; 0x09
    2046:	9a 85       	ldd	r25, Y+10	; 0x0a
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	3f ef       	ldi	r19, 0xFF	; 255
    204c:	4f e7       	ldi	r20, 0x7F	; 127
    204e:	57 e4       	ldi	r21, 0x47	; 71
    2050:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2054:	18 16       	cp	r1, r24
    2056:	4c f5       	brge	.+82     	; 0x20aa <sinosoidal_wave+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2058:	6b 85       	ldd	r22, Y+11	; 0x0b
    205a:	7c 85       	ldd	r23, Y+12	; 0x0c
    205c:	8d 85       	ldd	r24, Y+13	; 0x0d
    205e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e2       	ldi	r20, 0x20	; 32
    2066:	51 e4       	ldi	r21, 0x41	; 65
    2068:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	bc 01       	movw	r22, r24
    2072:	cd 01       	movw	r24, r26
    2074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	9e 83       	std	Y+6, r25	; 0x06
    207e:	8d 83       	std	Y+5, r24	; 0x05
    2080:	0f c0       	rjmp	.+30     	; 0x20a0 <sinosoidal_wave+0x16e>
    2082:	88 ec       	ldi	r24, 0xC8	; 200
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	9c 83       	std	Y+4, r25	; 0x04
    2088:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    208a:	8b 81       	ldd	r24, Y+3	; 0x03
    208c:	9c 81       	ldd	r25, Y+4	; 0x04
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <sinosoidal_wave+0x15c>
    2092:	9c 83       	std	Y+4, r25	; 0x04
    2094:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2096:	8d 81       	ldd	r24, Y+5	; 0x05
    2098:	9e 81       	ldd	r25, Y+6	; 0x06
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	9e 83       	std	Y+6, r25	; 0x06
    209e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a0:	8d 81       	ldd	r24, Y+5	; 0x05
    20a2:	9e 81       	ldd	r25, Y+6	; 0x06
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	69 f7       	brne	.-38     	; 0x2082 <sinosoidal_wave+0x150>
    20a8:	6f cf       	rjmp	.-290    	; 0x1f88 <sinosoidal_wave+0x56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20aa:	6f 81       	ldd	r22, Y+7	; 0x07
    20ac:	78 85       	ldd	r23, Y+8	; 0x08
    20ae:	89 85       	ldd	r24, Y+9	; 0x09
    20b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	9e 83       	std	Y+6, r25	; 0x06
    20bc:	8d 83       	std	Y+5, r24	; 0x05
    20be:	8d 81       	ldd	r24, Y+5	; 0x05
    20c0:	9e 81       	ldd	r25, Y+6	; 0x06
    20c2:	9a 83       	std	Y+2, r25	; 0x02
    20c4:	89 83       	std	Y+1, r24	; 0x01
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
    20c8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <sinosoidal_wave+0x198>
    20ce:	9a 83       	std	Y+2, r25	; 0x02
    20d0:	89 83       	std	Y+1, r24	; 0x01
    20d2:	5a cf       	rjmp	.-332    	; 0x1f88 <sinosoidal_wave+0x56>

000020d4 <main>:
		_delay_ms(2000);

	}
}

int main(void){
    20d4:	df 93       	push	r29
    20d6:	cf 93       	push	r28
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
	LCD_VOID_Init_8Bit();
    20dc:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_VOID_Init_8Bit>
	//}
	//LCD_Void_Write_Cmd(0b10000000);
	//LCD_Void_Write_Data(0);

	//sinosidal wave
	sinosoidal_wave((u8*)"youssef");
    20e0:	80 e6       	ldi	r24, 0x60	; 96
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <sinosoidal_wave>

	return 0;
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	90 e0       	ldi	r25, 0x00	; 0
}
    20ec:	cf 91       	pop	r28
    20ee:	df 91       	pop	r29
    20f0:	08 95       	ret

000020f2 <__udivmodsi4>:
    20f2:	a1 e2       	ldi	r26, 0x21	; 33
    20f4:	1a 2e       	mov	r1, r26
    20f6:	aa 1b       	sub	r26, r26
    20f8:	bb 1b       	sub	r27, r27
    20fa:	fd 01       	movw	r30, r26
    20fc:	0d c0       	rjmp	.+26     	; 0x2118 <__udivmodsi4_ep>

000020fe <__udivmodsi4_loop>:
    20fe:	aa 1f       	adc	r26, r26
    2100:	bb 1f       	adc	r27, r27
    2102:	ee 1f       	adc	r30, r30
    2104:	ff 1f       	adc	r31, r31
    2106:	a2 17       	cp	r26, r18
    2108:	b3 07       	cpc	r27, r19
    210a:	e4 07       	cpc	r30, r20
    210c:	f5 07       	cpc	r31, r21
    210e:	20 f0       	brcs	.+8      	; 0x2118 <__udivmodsi4_ep>
    2110:	a2 1b       	sub	r26, r18
    2112:	b3 0b       	sbc	r27, r19
    2114:	e4 0b       	sbc	r30, r20
    2116:	f5 0b       	sbc	r31, r21

00002118 <__udivmodsi4_ep>:
    2118:	66 1f       	adc	r22, r22
    211a:	77 1f       	adc	r23, r23
    211c:	88 1f       	adc	r24, r24
    211e:	99 1f       	adc	r25, r25
    2120:	1a 94       	dec	r1
    2122:	69 f7       	brne	.-38     	; 0x20fe <__udivmodsi4_loop>
    2124:	60 95       	com	r22
    2126:	70 95       	com	r23
    2128:	80 95       	com	r24
    212a:	90 95       	com	r25
    212c:	9b 01       	movw	r18, r22
    212e:	ac 01       	movw	r20, r24
    2130:	bd 01       	movw	r22, r26
    2132:	cf 01       	movw	r24, r30
    2134:	08 95       	ret

00002136 <__prologue_saves__>:
    2136:	2f 92       	push	r2
    2138:	3f 92       	push	r3
    213a:	4f 92       	push	r4
    213c:	5f 92       	push	r5
    213e:	6f 92       	push	r6
    2140:	7f 92       	push	r7
    2142:	8f 92       	push	r8
    2144:	9f 92       	push	r9
    2146:	af 92       	push	r10
    2148:	bf 92       	push	r11
    214a:	cf 92       	push	r12
    214c:	df 92       	push	r13
    214e:	ef 92       	push	r14
    2150:	ff 92       	push	r15
    2152:	0f 93       	push	r16
    2154:	1f 93       	push	r17
    2156:	cf 93       	push	r28
    2158:	df 93       	push	r29
    215a:	cd b7       	in	r28, 0x3d	; 61
    215c:	de b7       	in	r29, 0x3e	; 62
    215e:	ca 1b       	sub	r28, r26
    2160:	db 0b       	sbc	r29, r27
    2162:	0f b6       	in	r0, 0x3f	; 63
    2164:	f8 94       	cli
    2166:	de bf       	out	0x3e, r29	; 62
    2168:	0f be       	out	0x3f, r0	; 63
    216a:	cd bf       	out	0x3d, r28	; 61
    216c:	09 94       	ijmp

0000216e <__epilogue_restores__>:
    216e:	2a 88       	ldd	r2, Y+18	; 0x12
    2170:	39 88       	ldd	r3, Y+17	; 0x11
    2172:	48 88       	ldd	r4, Y+16	; 0x10
    2174:	5f 84       	ldd	r5, Y+15	; 0x0f
    2176:	6e 84       	ldd	r6, Y+14	; 0x0e
    2178:	7d 84       	ldd	r7, Y+13	; 0x0d
    217a:	8c 84       	ldd	r8, Y+12	; 0x0c
    217c:	9b 84       	ldd	r9, Y+11	; 0x0b
    217e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2180:	b9 84       	ldd	r11, Y+9	; 0x09
    2182:	c8 84       	ldd	r12, Y+8	; 0x08
    2184:	df 80       	ldd	r13, Y+7	; 0x07
    2186:	ee 80       	ldd	r14, Y+6	; 0x06
    2188:	fd 80       	ldd	r15, Y+5	; 0x05
    218a:	0c 81       	ldd	r16, Y+4	; 0x04
    218c:	1b 81       	ldd	r17, Y+3	; 0x03
    218e:	aa 81       	ldd	r26, Y+2	; 0x02
    2190:	b9 81       	ldd	r27, Y+1	; 0x01
    2192:	ce 0f       	add	r28, r30
    2194:	d1 1d       	adc	r29, r1
    2196:	0f b6       	in	r0, 0x3f	; 63
    2198:	f8 94       	cli
    219a:	de bf       	out	0x3e, r29	; 62
    219c:	0f be       	out	0x3f, r0	; 63
    219e:	cd bf       	out	0x3d, r28	; 61
    21a0:	ed 01       	movw	r28, r26
    21a2:	08 95       	ret

000021a4 <_exit>:
    21a4:	f8 94       	cli

000021a6 <__stop_program>:
    21a6:	ff cf       	rjmp	.-2      	; 0x21a6 <__stop_program>
