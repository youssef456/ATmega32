
METRO_DOOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000066  00800060  000026e8  0000275c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001c50  00000000  00000000  000027c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d9d  00000000  00000000  00004414  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000051b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000052f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005461  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000070aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007f95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008d44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009131  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000098ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ee       	ldi	r30, 0xE8	; 232
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3c       	cpi	r26, 0xC6	; 198
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <main>
      7a:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 3b 13 	jmp	0x2676	; 0x2676 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a4 eb       	ldi	r26, 0xB4	; 180
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 47 13 	jmp	0x268e	; 0x268e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 63 13 	jmp	0x26c6	; 0x26c6 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 47 13 	jmp	0x268e	; 0x268e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 63 13 	jmp	0x26c6	; 0x26c6 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 3b 13 	jmp	0x2676	; 0x2676 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	84 eb       	ldi	r24, 0xB4	; 180
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 47 13 	jmp	0x268e	; 0x268e <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 63 13 	jmp	0x26c6	; 0x26c6 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 47 13 	jmp	0x268e	; 0x268e <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 63 13 	jmp	0x26c6	; 0x26c6 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 47 13 	jmp	0x268e	; 0x268e <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 63 13 	jmp	0x26c6	; 0x26c6 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 4b 13 	jmp	0x2696	; 0x2696 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_U8_Set_Pin_Value>:
#include "DIO_Private.h"
#include <avr/delay.h>



u8 DIO_U8_Set_Pin_Value(u8 Copy_U8_Port_ID, u8 Copy_U8_Pin_ID, u8 Copy_U8_Pin_Val){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <DIO_U8_Set_Pin_Value+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <DIO_U8_Set_Pin_Value+0x8>
     b3e:	00 d0       	rcall	.+0      	; 0xb40 <DIO_U8_Set_Pin_Value+0xa>
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	89 83       	std	Y+1, r24	; 0x01
     b46:	6a 83       	std	Y+2, r22	; 0x02
     b48:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_U8_Pin_ID >=PIN0) && (Copy_U8_Pin_ID <=PIN7) && (Copy_U8_Port_ID <= GROUP_D) && (Copy_U8_Port_ID >= GROUP_A)){
     b4a:	8a 81       	ldd	r24, Y+2	; 0x02
     b4c:	88 30       	cpi	r24, 0x08	; 8
     b4e:	08 f0       	brcs	.+2      	; 0xb52 <DIO_U8_Set_Pin_Value+0x1c>
     b50:	e1 c0       	rjmp	.+450    	; 0xd14 <DIO_U8_Set_Pin_Value+0x1de>
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	84 30       	cpi	r24, 0x04	; 4
     b56:	08 f0       	brcs	.+2      	; 0xb5a <DIO_U8_Set_Pin_Value+0x24>
     b58:	dd c0       	rjmp	.+442    	; 0xd14 <DIO_U8_Set_Pin_Value+0x1de>
		if((Copy_U8_Pin_Val == HIGH) || (Copy_U8_Pin_Val == LOW )){
     b5a:	8b 81       	ldd	r24, Y+3	; 0x03
     b5c:	81 30       	cpi	r24, 0x01	; 1
     b5e:	21 f0       	breq	.+8      	; 0xb68 <DIO_U8_Set_Pin_Value+0x32>
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	88 23       	and	r24, r24
     b64:	09 f0       	breq	.+2      	; 0xb68 <DIO_U8_Set_Pin_Value+0x32>
     b66:	d3 c0       	rjmp	.+422    	; 0xd0e <DIO_U8_Set_Pin_Value+0x1d8>
			switch (Copy_U8_Port_ID){
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	3e 83       	std	Y+6, r19	; 0x06
     b70:	2d 83       	std	Y+5, r18	; 0x05
     b72:	8d 81       	ldd	r24, Y+5	; 0x05
     b74:	9e 81       	ldd	r25, Y+6	; 0x06
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	91 05       	cpc	r25, r1
     b7a:	09 f4       	brne	.+2      	; 0xb7e <DIO_U8_Set_Pin_Value+0x48>
     b7c:	43 c0       	rjmp	.+134    	; 0xc04 <DIO_U8_Set_Pin_Value+0xce>
     b7e:	2d 81       	ldd	r18, Y+5	; 0x05
     b80:	3e 81       	ldd	r19, Y+6	; 0x06
     b82:	22 30       	cpi	r18, 0x02	; 2
     b84:	31 05       	cpc	r19, r1
     b86:	2c f4       	brge	.+10     	; 0xb92 <DIO_U8_Set_Pin_Value+0x5c>
     b88:	8d 81       	ldd	r24, Y+5	; 0x05
     b8a:	9e 81       	ldd	r25, Y+6	; 0x06
     b8c:	00 97       	sbiw	r24, 0x00	; 0
     b8e:	71 f0       	breq	.+28     	; 0xbac <DIO_U8_Set_Pin_Value+0x76>
     b90:	bc c0       	rjmp	.+376    	; 0xd0a <DIO_U8_Set_Pin_Value+0x1d4>
     b92:	2d 81       	ldd	r18, Y+5	; 0x05
     b94:	3e 81       	ldd	r19, Y+6	; 0x06
     b96:	22 30       	cpi	r18, 0x02	; 2
     b98:	31 05       	cpc	r19, r1
     b9a:	09 f4       	brne	.+2      	; 0xb9e <DIO_U8_Set_Pin_Value+0x68>
     b9c:	5f c0       	rjmp	.+190    	; 0xc5c <DIO_U8_Set_Pin_Value+0x126>
     b9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ba0:	9e 81       	ldd	r25, Y+6	; 0x06
     ba2:	83 30       	cpi	r24, 0x03	; 3
     ba4:	91 05       	cpc	r25, r1
     ba6:	09 f4       	brne	.+2      	; 0xbaa <DIO_U8_Set_Pin_Value+0x74>
     ba8:	85 c0       	rjmp	.+266    	; 0xcb4 <DIO_U8_Set_Pin_Value+0x17e>
     baa:	af c0       	rjmp	.+350    	; 0xd0a <DIO_U8_Set_Pin_Value+0x1d4>
			case GROUP_A:
				Assign_Bit(DIO_U8_PORTA,Copy_U8_Pin_ID,Copy_U8_Pin_Val);
     bac:	8b 81       	ldd	r24, Y+3	; 0x03
     bae:	81 30       	cpi	r24, 0x01	; 1
     bb0:	a1 f4       	brne	.+40     	; 0xbda <DIO_U8_Set_Pin_Value+0xa4>
     bb2:	ab e3       	ldi	r26, 0x3B	; 59
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	eb e3       	ldi	r30, 0x3B	; 59
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	48 2f       	mov	r20, r24
     bbe:	8a 81       	ldd	r24, Y+2	; 0x02
     bc0:	28 2f       	mov	r18, r24
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	02 2e       	mov	r0, r18
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <DIO_U8_Set_Pin_Value+0x9a>
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	0a 94       	dec	r0
     bd2:	e2 f7       	brpl	.-8      	; 0xbcc <DIO_U8_Set_Pin_Value+0x96>
     bd4:	84 2b       	or	r24, r20
     bd6:	8c 93       	st	X, r24
     bd8:	98 c0       	rjmp	.+304    	; 0xd0a <DIO_U8_Set_Pin_Value+0x1d4>
     bda:	ab e3       	ldi	r26, 0x3B	; 59
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	eb e3       	ldi	r30, 0x3B	; 59
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	48 2f       	mov	r20, r24
     be6:	8a 81       	ldd	r24, Y+2	; 0x02
     be8:	28 2f       	mov	r18, r24
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	02 2e       	mov	r0, r18
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <DIO_U8_Set_Pin_Value+0xc2>
     bf4:	88 0f       	add	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	0a 94       	dec	r0
     bfa:	e2 f7       	brpl	.-8      	; 0xbf4 <DIO_U8_Set_Pin_Value+0xbe>
     bfc:	80 95       	com	r24
     bfe:	84 23       	and	r24, r20
     c00:	8c 93       	st	X, r24
     c02:	83 c0       	rjmp	.+262    	; 0xd0a <DIO_U8_Set_Pin_Value+0x1d4>
				break;
			case GROUP_B:
				Assign_Bit(DIO_U8_PORTB,Copy_U8_Pin_ID,Copy_U8_Pin_Val);
     c04:	8b 81       	ldd	r24, Y+3	; 0x03
     c06:	81 30       	cpi	r24, 0x01	; 1
     c08:	a1 f4       	brne	.+40     	; 0xc32 <DIO_U8_Set_Pin_Value+0xfc>
     c0a:	a8 e3       	ldi	r26, 0x38	; 56
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	e8 e3       	ldi	r30, 0x38	; 56
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	48 2f       	mov	r20, r24
     c16:	8a 81       	ldd	r24, Y+2	; 0x02
     c18:	28 2f       	mov	r18, r24
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	02 2e       	mov	r0, r18
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <DIO_U8_Set_Pin_Value+0xf2>
     c24:	88 0f       	add	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	0a 94       	dec	r0
     c2a:	e2 f7       	brpl	.-8      	; 0xc24 <DIO_U8_Set_Pin_Value+0xee>
     c2c:	84 2b       	or	r24, r20
     c2e:	8c 93       	st	X, r24
     c30:	6c c0       	rjmp	.+216    	; 0xd0a <DIO_U8_Set_Pin_Value+0x1d4>
     c32:	a8 e3       	ldi	r26, 0x38	; 56
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	e8 e3       	ldi	r30, 0x38	; 56
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	48 2f       	mov	r20, r24
     c3e:	8a 81       	ldd	r24, Y+2	; 0x02
     c40:	28 2f       	mov	r18, r24
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	02 2e       	mov	r0, r18
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <DIO_U8_Set_Pin_Value+0x11a>
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	0a 94       	dec	r0
     c52:	e2 f7       	brpl	.-8      	; 0xc4c <DIO_U8_Set_Pin_Value+0x116>
     c54:	80 95       	com	r24
     c56:	84 23       	and	r24, r20
     c58:	8c 93       	st	X, r24
     c5a:	57 c0       	rjmp	.+174    	; 0xd0a <DIO_U8_Set_Pin_Value+0x1d4>
				break;
			case GROUP_C:
				Assign_Bit(DIO_U8_PORTC,Copy_U8_Pin_ID,Copy_U8_Pin_Val);
     c5c:	8b 81       	ldd	r24, Y+3	; 0x03
     c5e:	81 30       	cpi	r24, 0x01	; 1
     c60:	a1 f4       	brne	.+40     	; 0xc8a <DIO_U8_Set_Pin_Value+0x154>
     c62:	a5 e3       	ldi	r26, 0x35	; 53
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	e5 e3       	ldi	r30, 0x35	; 53
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	48 2f       	mov	r20, r24
     c6e:	8a 81       	ldd	r24, Y+2	; 0x02
     c70:	28 2f       	mov	r18, r24
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	02 2e       	mov	r0, r18
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <DIO_U8_Set_Pin_Value+0x14a>
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	0a 94       	dec	r0
     c82:	e2 f7       	brpl	.-8      	; 0xc7c <DIO_U8_Set_Pin_Value+0x146>
     c84:	84 2b       	or	r24, r20
     c86:	8c 93       	st	X, r24
     c88:	40 c0       	rjmp	.+128    	; 0xd0a <DIO_U8_Set_Pin_Value+0x1d4>
     c8a:	a5 e3       	ldi	r26, 0x35	; 53
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e5 e3       	ldi	r30, 0x35	; 53
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	48 2f       	mov	r20, r24
     c96:	8a 81       	ldd	r24, Y+2	; 0x02
     c98:	28 2f       	mov	r18, r24
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	02 2e       	mov	r0, r18
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <DIO_U8_Set_Pin_Value+0x172>
     ca4:	88 0f       	add	r24, r24
     ca6:	99 1f       	adc	r25, r25
     ca8:	0a 94       	dec	r0
     caa:	e2 f7       	brpl	.-8      	; 0xca4 <DIO_U8_Set_Pin_Value+0x16e>
     cac:	80 95       	com	r24
     cae:	84 23       	and	r24, r20
     cb0:	8c 93       	st	X, r24
     cb2:	2b c0       	rjmp	.+86     	; 0xd0a <DIO_U8_Set_Pin_Value+0x1d4>
				break;
			case GROUP_D:
				Assign_Bit(DIO_U8_PORTD,Copy_U8_Pin_ID,Copy_U8_Pin_Val);
     cb4:	8b 81       	ldd	r24, Y+3	; 0x03
     cb6:	81 30       	cpi	r24, 0x01	; 1
     cb8:	a1 f4       	brne	.+40     	; 0xce2 <DIO_U8_Set_Pin_Value+0x1ac>
     cba:	a2 e3       	ldi	r26, 0x32	; 50
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e2 e3       	ldi	r30, 0x32	; 50
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	48 2f       	mov	r20, r24
     cc6:	8a 81       	ldd	r24, Y+2	; 0x02
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	02 2e       	mov	r0, r18
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <DIO_U8_Set_Pin_Value+0x1a2>
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	0a 94       	dec	r0
     cda:	e2 f7       	brpl	.-8      	; 0xcd4 <DIO_U8_Set_Pin_Value+0x19e>
     cdc:	84 2b       	or	r24, r20
     cde:	8c 93       	st	X, r24
     ce0:	14 c0       	rjmp	.+40     	; 0xd0a <DIO_U8_Set_Pin_Value+0x1d4>
     ce2:	a2 e3       	ldi	r26, 0x32	; 50
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e2 e3       	ldi	r30, 0x32	; 50
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	48 2f       	mov	r20, r24
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	02 2e       	mov	r0, r18
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <DIO_U8_Set_Pin_Value+0x1ca>
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	0a 94       	dec	r0
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <DIO_U8_Set_Pin_Value+0x1c6>
     d04:	80 95       	com	r24
     d06:	84 23       	and	r24, r20
     d08:	8c 93       	st	X, r24
		}
	}
	else{
		return INVALID_PIN_ID;
	}
	return Success;
     d0a:	1c 82       	std	Y+4, r1	; 0x04
     d0c:	05 c0       	rjmp	.+10     	; 0xd18 <DIO_U8_Set_Pin_Value+0x1e2>
				break;

			}
		}
		else{
			return INVALID_PIN_VALUE;
     d0e:	9a ef       	ldi	r25, 0xFA	; 250
     d10:	9c 83       	std	Y+4, r25	; 0x04
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <DIO_U8_Set_Pin_Value+0x1e2>
		}
	}
	else{
		return INVALID_PIN_ID;
     d14:	2f ef       	ldi	r18, 0xFF	; 255
     d16:	2c 83       	std	Y+4, r18	; 0x04
     d18:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	return Success;
}
     d1a:	26 96       	adiw	r28, 0x06	; 6
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	de bf       	out	0x3e, r29	; 62
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	cd bf       	out	0x3d, r28	; 61
     d26:	cf 91       	pop	r28
     d28:	df 91       	pop	r29
     d2a:	08 95       	ret

00000d2c <DIO_U8_Get_Pin_Value>:


u8 DIO_U8_Get_Pin_Value(u8 Copy_U8_Port_ID, u8 Copy_U8_Pin_ID){
     d2c:	df 93       	push	r29
     d2e:	cf 93       	push	r28
     d30:	00 d0       	rcall	.+0      	; 0xd32 <DIO_U8_Get_Pin_Value+0x6>
     d32:	00 d0       	rcall	.+0      	; 0xd34 <DIO_U8_Get_Pin_Value+0x8>
     d34:	00 d0       	rcall	.+0      	; 0xd36 <DIO_U8_Get_Pin_Value+0xa>
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
     d3a:	8a 83       	std	Y+2, r24	; 0x02
     d3c:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value;
	if ((Copy_U8_Port_ID <= GROUP_D) && (Copy_U8_Port_ID >= GROUP_A)){
     d3e:	8a 81       	ldd	r24, Y+2	; 0x02
     d40:	84 30       	cpi	r24, 0x04	; 4
     d42:	08 f0       	brcs	.+2      	; 0xd46 <DIO_U8_Get_Pin_Value+0x1a>
     d44:	71 c0       	rjmp	.+226    	; 0xe28 <DIO_U8_Get_Pin_Value+0xfc>
		if((Copy_U8_Pin_ID >=PIN0) && (Copy_U8_Pin_ID <=PIN7) ){
     d46:	8b 81       	ldd	r24, Y+3	; 0x03
     d48:	88 30       	cpi	r24, 0x08	; 8
     d4a:	08 f0       	brcs	.+2      	; 0xd4e <DIO_U8_Get_Pin_Value+0x22>
     d4c:	6a c0       	rjmp	.+212    	; 0xe22 <DIO_U8_Get_Pin_Value+0xf6>
			switch(Copy_U8_Port_ID){
     d4e:	8a 81       	ldd	r24, Y+2	; 0x02
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	3e 83       	std	Y+6, r19	; 0x06
     d56:	2d 83       	std	Y+5, r18	; 0x05
     d58:	4d 81       	ldd	r20, Y+5	; 0x05
     d5a:	5e 81       	ldd	r21, Y+6	; 0x06
     d5c:	41 30       	cpi	r20, 0x01	; 1
     d5e:	51 05       	cpc	r21, r1
     d60:	41 f1       	breq	.+80     	; 0xdb2 <DIO_U8_Get_Pin_Value+0x86>
     d62:	8d 81       	ldd	r24, Y+5	; 0x05
     d64:	9e 81       	ldd	r25, Y+6	; 0x06
     d66:	82 30       	cpi	r24, 0x02	; 2
     d68:	91 05       	cpc	r25, r1
     d6a:	34 f4       	brge	.+12     	; 0xd78 <DIO_U8_Get_Pin_Value+0x4c>
     d6c:	2d 81       	ldd	r18, Y+5	; 0x05
     d6e:	3e 81       	ldd	r19, Y+6	; 0x06
     d70:	21 15       	cp	r18, r1
     d72:	31 05       	cpc	r19, r1
     d74:	61 f0       	breq	.+24     	; 0xd8e <DIO_U8_Get_Pin_Value+0x62>
     d76:	52 c0       	rjmp	.+164    	; 0xe1c <DIO_U8_Get_Pin_Value+0xf0>
     d78:	4d 81       	ldd	r20, Y+5	; 0x05
     d7a:	5e 81       	ldd	r21, Y+6	; 0x06
     d7c:	42 30       	cpi	r20, 0x02	; 2
     d7e:	51 05       	cpc	r21, r1
     d80:	51 f1       	breq	.+84     	; 0xdd6 <DIO_U8_Get_Pin_Value+0xaa>
     d82:	8d 81       	ldd	r24, Y+5	; 0x05
     d84:	9e 81       	ldd	r25, Y+6	; 0x06
     d86:	83 30       	cpi	r24, 0x03	; 3
     d88:	91 05       	cpc	r25, r1
     d8a:	b9 f1       	breq	.+110    	; 0xdfa <DIO_U8_Get_Pin_Value+0xce>
     d8c:	47 c0       	rjmp	.+142    	; 0xe1c <DIO_U8_Get_Pin_Value+0xf0>
			case GROUP_A:
				pin_value = Get_Bit(DIO_U8_PINA,Copy_U8_Pin_ID);
     d8e:	e9 e3       	ldi	r30, 0x39	; 57
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	8b 81       	ldd	r24, Y+3	; 0x03
     d9a:	88 2f       	mov	r24, r24
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	a9 01       	movw	r20, r18
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <DIO_U8_Get_Pin_Value+0x7a>
     da2:	55 95       	asr	r21
     da4:	47 95       	ror	r20
     da6:	8a 95       	dec	r24
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <DIO_U8_Get_Pin_Value+0x76>
     daa:	ca 01       	movw	r24, r20
     dac:	81 70       	andi	r24, 0x01	; 1
     dae:	89 83       	std	Y+1, r24	; 0x01
     db0:	35 c0       	rjmp	.+106    	; 0xe1c <DIO_U8_Get_Pin_Value+0xf0>
				break;
			case GROUP_B:
				pin_value = Get_Bit(DIO_U8_PINB,Copy_U8_Pin_ID);
     db2:	e6 e3       	ldi	r30, 0x36	; 54
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	88 2f       	mov	r24, r24
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	a9 01       	movw	r20, r18
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <DIO_U8_Get_Pin_Value+0x9e>
     dc6:	55 95       	asr	r21
     dc8:	47 95       	ror	r20
     dca:	8a 95       	dec	r24
     dcc:	e2 f7       	brpl	.-8      	; 0xdc6 <DIO_U8_Get_Pin_Value+0x9a>
     dce:	ca 01       	movw	r24, r20
     dd0:	81 70       	andi	r24, 0x01	; 1
     dd2:	89 83       	std	Y+1, r24	; 0x01
     dd4:	23 c0       	rjmp	.+70     	; 0xe1c <DIO_U8_Get_Pin_Value+0xf0>
				break;
			case GROUP_C:
				pin_value = Get_Bit(DIO_U8_PINC,Copy_U8_Pin_ID);
     dd6:	e3 e3       	ldi	r30, 0x33	; 51
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	88 2f       	mov	r24, r24
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	a9 01       	movw	r20, r18
     de8:	02 c0       	rjmp	.+4      	; 0xdee <DIO_U8_Get_Pin_Value+0xc2>
     dea:	55 95       	asr	r21
     dec:	47 95       	ror	r20
     dee:	8a 95       	dec	r24
     df0:	e2 f7       	brpl	.-8      	; 0xdea <DIO_U8_Get_Pin_Value+0xbe>
     df2:	ca 01       	movw	r24, r20
     df4:	81 70       	andi	r24, 0x01	; 1
     df6:	89 83       	std	Y+1, r24	; 0x01
     df8:	11 c0       	rjmp	.+34     	; 0xe1c <DIO_U8_Get_Pin_Value+0xf0>
				break;
			case GROUP_D:
				pin_value = Get_Bit(DIO_U8_PIND,Copy_U8_Pin_ID);
     dfa:	e0 e3       	ldi	r30, 0x30	; 48
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	28 2f       	mov	r18, r24
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	8b 81       	ldd	r24, Y+3	; 0x03
     e06:	88 2f       	mov	r24, r24
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	a9 01       	movw	r20, r18
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <DIO_U8_Get_Pin_Value+0xe6>
     e0e:	55 95       	asr	r21
     e10:	47 95       	ror	r20
     e12:	8a 95       	dec	r24
     e14:	e2 f7       	brpl	.-8      	; 0xe0e <DIO_U8_Get_Pin_Value+0xe2>
     e16:	ca 01       	movw	r24, r20
     e18:	81 70       	andi	r24, 0x01	; 1
     e1a:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	else{
		return INVALID_PORT_ID;
	}
	return pin_value;
     e1c:	59 81       	ldd	r21, Y+1	; 0x01
     e1e:	5c 83       	std	Y+4, r21	; 0x04
     e20:	05 c0       	rjmp	.+10     	; 0xe2c <DIO_U8_Get_Pin_Value+0x100>
				pin_value = Get_Bit(DIO_U8_PIND,Copy_U8_Pin_ID);
				break;
			}
		}
		else{
			return INVALID_PIN_ID;
     e22:	8f ef       	ldi	r24, 0xFF	; 255
     e24:	8c 83       	std	Y+4, r24	; 0x04
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <DIO_U8_Get_Pin_Value+0x100>
		}
	}
	else{
		return INVALID_PORT_ID;
     e28:	95 ef       	ldi	r25, 0xF5	; 245
     e2a:	9c 83       	std	Y+4, r25	; 0x04
     e2c:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	return pin_value;
}
     e2e:	26 96       	adiw	r28, 0x06	; 6
     e30:	0f b6       	in	r0, 0x3f	; 63
     e32:	f8 94       	cli
     e34:	de bf       	out	0x3e, r29	; 62
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	cd bf       	out	0x3d, r28	; 61
     e3a:	cf 91       	pop	r28
     e3c:	df 91       	pop	r29
     e3e:	08 95       	ret

00000e40 <DIO_U8_Set_Pin_Direction>:

u8 DIO_U8_Set_Pin_Direction(u8 Copy_U8_Port_ID, u8 Copy_U8_Pin_ID, u8 Copy_U8_Pin_Dir){
     e40:	df 93       	push	r29
     e42:	cf 93       	push	r28
     e44:	00 d0       	rcall	.+0      	; 0xe46 <DIO_U8_Set_Pin_Direction+0x6>
     e46:	00 d0       	rcall	.+0      	; 0xe48 <DIO_U8_Set_Pin_Direction+0x8>
     e48:	00 d0       	rcall	.+0      	; 0xe4a <DIO_U8_Set_Pin_Direction+0xa>
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	89 83       	std	Y+1, r24	; 0x01
     e50:	6a 83       	std	Y+2, r22	; 0x02
     e52:	4b 83       	std	Y+3, r20	; 0x03
	if( (Copy_U8_Port_ID <= GROUP_D) && (Copy_U8_Port_ID >= GROUP_A)){
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	08 f0       	brcs	.+2      	; 0xe5c <DIO_U8_Set_Pin_Direction+0x1c>
     e5a:	da c0       	rjmp	.+436    	; 0x1010 <DIO_U8_Set_Pin_Direction+0x1d0>
		if((Copy_U8_Pin_ID >=PIN0) && (Copy_U8_Pin_ID <=PIN7)){
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	88 30       	cpi	r24, 0x08	; 8
     e60:	08 f0       	brcs	.+2      	; 0xe64 <DIO_U8_Set_Pin_Direction+0x24>
     e62:	d3 c0       	rjmp	.+422    	; 0x100a <DIO_U8_Set_Pin_Direction+0x1ca>
			switch (Copy_U8_Port_ID){
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	28 2f       	mov	r18, r24
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	3e 83       	std	Y+6, r19	; 0x06
     e6c:	2d 83       	std	Y+5, r18	; 0x05
     e6e:	8d 81       	ldd	r24, Y+5	; 0x05
     e70:	9e 81       	ldd	r25, Y+6	; 0x06
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	91 05       	cpc	r25, r1
     e76:	09 f4       	brne	.+2      	; 0xe7a <DIO_U8_Set_Pin_Direction+0x3a>
     e78:	43 c0       	rjmp	.+134    	; 0xf00 <DIO_U8_Set_Pin_Direction+0xc0>
     e7a:	2d 81       	ldd	r18, Y+5	; 0x05
     e7c:	3e 81       	ldd	r19, Y+6	; 0x06
     e7e:	22 30       	cpi	r18, 0x02	; 2
     e80:	31 05       	cpc	r19, r1
     e82:	2c f4       	brge	.+10     	; 0xe8e <DIO_U8_Set_Pin_Direction+0x4e>
     e84:	8d 81       	ldd	r24, Y+5	; 0x05
     e86:	9e 81       	ldd	r25, Y+6	; 0x06
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	71 f0       	breq	.+28     	; 0xea8 <DIO_U8_Set_Pin_Direction+0x68>
     e8c:	bc c0       	rjmp	.+376    	; 0x1006 <DIO_U8_Set_Pin_Direction+0x1c6>
     e8e:	2d 81       	ldd	r18, Y+5	; 0x05
     e90:	3e 81       	ldd	r19, Y+6	; 0x06
     e92:	22 30       	cpi	r18, 0x02	; 2
     e94:	31 05       	cpc	r19, r1
     e96:	09 f4       	brne	.+2      	; 0xe9a <DIO_U8_Set_Pin_Direction+0x5a>
     e98:	5f c0       	rjmp	.+190    	; 0xf58 <DIO_U8_Set_Pin_Direction+0x118>
     e9a:	8d 81       	ldd	r24, Y+5	; 0x05
     e9c:	9e 81       	ldd	r25, Y+6	; 0x06
     e9e:	83 30       	cpi	r24, 0x03	; 3
     ea0:	91 05       	cpc	r25, r1
     ea2:	09 f4       	brne	.+2      	; 0xea6 <DIO_U8_Set_Pin_Direction+0x66>
     ea4:	85 c0       	rjmp	.+266    	; 0xfb0 <DIO_U8_Set_Pin_Direction+0x170>
     ea6:	af c0       	rjmp	.+350    	; 0x1006 <DIO_U8_Set_Pin_Direction+0x1c6>
			case GROUP_A:
				Assign_Bit(DIO_U8_DDRA,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
     ea8:	8b 81       	ldd	r24, Y+3	; 0x03
     eaa:	81 30       	cpi	r24, 0x01	; 1
     eac:	a1 f4       	brne	.+40     	; 0xed6 <DIO_U8_Set_Pin_Direction+0x96>
     eae:	aa e3       	ldi	r26, 0x3A	; 58
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	ea e3       	ldi	r30, 0x3A	; 58
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	48 2f       	mov	r20, r24
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	02 2e       	mov	r0, r18
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <DIO_U8_Set_Pin_Direction+0x8c>
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	0a 94       	dec	r0
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <DIO_U8_Set_Pin_Direction+0x88>
     ed0:	84 2b       	or	r24, r20
     ed2:	8c 93       	st	X, r24
     ed4:	98 c0       	rjmp	.+304    	; 0x1006 <DIO_U8_Set_Pin_Direction+0x1c6>
     ed6:	aa e3       	ldi	r26, 0x3A	; 58
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	ea e3       	ldi	r30, 0x3A	; 58
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	48 2f       	mov	r20, r24
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	02 2e       	mov	r0, r18
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <DIO_U8_Set_Pin_Direction+0xb4>
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	0a 94       	dec	r0
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <DIO_U8_Set_Pin_Direction+0xb0>
     ef8:	80 95       	com	r24
     efa:	84 23       	and	r24, r20
     efc:	8c 93       	st	X, r24
     efe:	83 c0       	rjmp	.+262    	; 0x1006 <DIO_U8_Set_Pin_Direction+0x1c6>
				break;
			case GROUP_B:
				Assign_Bit(DIO_U8_DDRB,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
     f00:	8b 81       	ldd	r24, Y+3	; 0x03
     f02:	81 30       	cpi	r24, 0x01	; 1
     f04:	a1 f4       	brne	.+40     	; 0xf2e <DIO_U8_Set_Pin_Direction+0xee>
     f06:	a7 e3       	ldi	r26, 0x37	; 55
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e7 e3       	ldi	r30, 0x37	; 55
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	48 2f       	mov	r20, r24
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	02 2e       	mov	r0, r18
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <DIO_U8_Set_Pin_Direction+0xe4>
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	0a 94       	dec	r0
     f26:	e2 f7       	brpl	.-8      	; 0xf20 <DIO_U8_Set_Pin_Direction+0xe0>
     f28:	84 2b       	or	r24, r20
     f2a:	8c 93       	st	X, r24
     f2c:	6c c0       	rjmp	.+216    	; 0x1006 <DIO_U8_Set_Pin_Direction+0x1c6>
     f2e:	a7 e3       	ldi	r26, 0x37	; 55
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e7 e3       	ldi	r30, 0x37	; 55
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	48 2f       	mov	r20, r24
     f3a:	8a 81       	ldd	r24, Y+2	; 0x02
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	02 2e       	mov	r0, r18
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <DIO_U8_Set_Pin_Direction+0x10c>
     f48:	88 0f       	add	r24, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	0a 94       	dec	r0
     f4e:	e2 f7       	brpl	.-8      	; 0xf48 <DIO_U8_Set_Pin_Direction+0x108>
     f50:	80 95       	com	r24
     f52:	84 23       	and	r24, r20
     f54:	8c 93       	st	X, r24
     f56:	57 c0       	rjmp	.+174    	; 0x1006 <DIO_U8_Set_Pin_Direction+0x1c6>
				break;
			case GROUP_C:
				Assign_Bit(DIO_U8_DDRC,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	81 30       	cpi	r24, 0x01	; 1
     f5c:	a1 f4       	brne	.+40     	; 0xf86 <DIO_U8_Set_Pin_Direction+0x146>
     f5e:	a4 e3       	ldi	r26, 0x34	; 52
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e4 e3       	ldi	r30, 0x34	; 52
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	48 2f       	mov	r20, r24
     f6a:	8a 81       	ldd	r24, Y+2	; 0x02
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	02 2e       	mov	r0, r18
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <DIO_U8_Set_Pin_Direction+0x13c>
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	0a 94       	dec	r0
     f7e:	e2 f7       	brpl	.-8      	; 0xf78 <DIO_U8_Set_Pin_Direction+0x138>
     f80:	84 2b       	or	r24, r20
     f82:	8c 93       	st	X, r24
     f84:	40 c0       	rjmp	.+128    	; 0x1006 <DIO_U8_Set_Pin_Direction+0x1c6>
     f86:	a4 e3       	ldi	r26, 0x34	; 52
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e4 e3       	ldi	r30, 0x34	; 52
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	48 2f       	mov	r20, r24
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	02 2e       	mov	r0, r18
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <DIO_U8_Set_Pin_Direction+0x164>
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	0a 94       	dec	r0
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <DIO_U8_Set_Pin_Direction+0x160>
     fa8:	80 95       	com	r24
     faa:	84 23       	and	r24, r20
     fac:	8c 93       	st	X, r24
     fae:	2b c0       	rjmp	.+86     	; 0x1006 <DIO_U8_Set_Pin_Direction+0x1c6>
				break;
			case GROUP_D:
				Assign_Bit(DIO_U8_DDRD,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	81 30       	cpi	r24, 0x01	; 1
     fb4:	a1 f4       	brne	.+40     	; 0xfde <DIO_U8_Set_Pin_Direction+0x19e>
     fb6:	a1 e3       	ldi	r26, 0x31	; 49
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e1 e3       	ldi	r30, 0x31	; 49
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	48 2f       	mov	r20, r24
     fc2:	8a 81       	ldd	r24, Y+2	; 0x02
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	02 2e       	mov	r0, r18
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <DIO_U8_Set_Pin_Direction+0x194>
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	0a 94       	dec	r0
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <DIO_U8_Set_Pin_Direction+0x190>
     fd8:	84 2b       	or	r24, r20
     fda:	8c 93       	st	X, r24
     fdc:	14 c0       	rjmp	.+40     	; 0x1006 <DIO_U8_Set_Pin_Direction+0x1c6>
     fde:	a1 e3       	ldi	r26, 0x31	; 49
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e1 e3       	ldi	r30, 0x31	; 49
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	48 2f       	mov	r20, r24
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 2e       	mov	r0, r18
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <DIO_U8_Set_Pin_Direction+0x1bc>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	0a 94       	dec	r0
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <DIO_U8_Set_Pin_Direction+0x1b8>
    1000:	80 95       	com	r24
    1002:	84 23       	and	r24, r20
    1004:	8c 93       	st	X, r24

	}
	else{
		return INVALID_PORT_ID;
	}
	return Success;
    1006:	1c 82       	std	Y+4, r1	; 0x04
    1008:	05 c0       	rjmp	.+10     	; 0x1014 <DIO_U8_Set_Pin_Direction+0x1d4>
				Assign_Bit(DIO_U8_DDRD,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
				break;
			}
		}
		else{
			return INVALID_PIN_ID;
    100a:	9f ef       	ldi	r25, 0xFF	; 255
    100c:	9c 83       	std	Y+4, r25	; 0x04
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_U8_Set_Pin_Direction+0x1d4>
		}

	}
	else{
		return INVALID_PORT_ID;
    1010:	25 ef       	ldi	r18, 0xF5	; 245
    1012:	2c 83       	std	Y+4, r18	; 0x04
    1014:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	return Success;

}
    1016:	26 96       	adiw	r28, 0x06	; 6
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <DIO_U8_Set_Port_Direction>:

u8 DIO_U8_Set_Port_Direction(u8 Copy_U8_Port_ID,u8 Copy_U8_Port_Dir){
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <DIO_U8_Set_Port_Direction+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <DIO_U8_Set_Port_Direction+0x8>
    1030:	0f 92       	push	r0
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	89 83       	std	Y+1, r24	; 0x01
    1038:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_U8_Port_ID <= GROUP_D) && (Copy_U8_Port_ID >= GROUP_A)){
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	84 30       	cpi	r24, 0x04	; 4
    103e:	a0 f5       	brcc	.+104    	; 0x10a8 <DIO_U8_Set_Port_Direction+0x80>
		switch(Copy_U8_Port_ID){
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	3d 83       	std	Y+5, r19	; 0x05
    1048:	2c 83       	std	Y+4, r18	; 0x04
    104a:	8c 81       	ldd	r24, Y+4	; 0x04
    104c:	9d 81       	ldd	r25, Y+5	; 0x05
    104e:	81 30       	cpi	r24, 0x01	; 1
    1050:	91 05       	cpc	r25, r1
    1052:	d1 f0       	breq	.+52     	; 0x1088 <DIO_U8_Set_Port_Direction+0x60>
    1054:	2c 81       	ldd	r18, Y+4	; 0x04
    1056:	3d 81       	ldd	r19, Y+5	; 0x05
    1058:	22 30       	cpi	r18, 0x02	; 2
    105a:	31 05       	cpc	r19, r1
    105c:	2c f4       	brge	.+10     	; 0x1068 <DIO_U8_Set_Port_Direction+0x40>
    105e:	8c 81       	ldd	r24, Y+4	; 0x04
    1060:	9d 81       	ldd	r25, Y+5	; 0x05
    1062:	00 97       	sbiw	r24, 0x00	; 0
    1064:	61 f0       	breq	.+24     	; 0x107e <DIO_U8_Set_Port_Direction+0x56>
    1066:	1e c0       	rjmp	.+60     	; 0x10a4 <DIO_U8_Set_Port_Direction+0x7c>
    1068:	2c 81       	ldd	r18, Y+4	; 0x04
    106a:	3d 81       	ldd	r19, Y+5	; 0x05
    106c:	22 30       	cpi	r18, 0x02	; 2
    106e:	31 05       	cpc	r19, r1
    1070:	81 f0       	breq	.+32     	; 0x1092 <DIO_U8_Set_Port_Direction+0x6a>
    1072:	8c 81       	ldd	r24, Y+4	; 0x04
    1074:	9d 81       	ldd	r25, Y+5	; 0x05
    1076:	83 30       	cpi	r24, 0x03	; 3
    1078:	91 05       	cpc	r25, r1
    107a:	81 f0       	breq	.+32     	; 0x109c <DIO_U8_Set_Port_Direction+0x74>
    107c:	13 c0       	rjmp	.+38     	; 0x10a4 <DIO_U8_Set_Port_Direction+0x7c>
		case GROUP_A:
			DIO_U8_DDRA = Copy_U8_Port_Dir;
    107e:	ea e3       	ldi	r30, 0x3A	; 58
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	80 83       	st	Z, r24
    1086:	0e c0       	rjmp	.+28     	; 0x10a4 <DIO_U8_Set_Port_Direction+0x7c>
			break;
		case GROUP_B:
			DIO_U8_DDRB = Copy_U8_Port_Dir;
    1088:	e7 e3       	ldi	r30, 0x37	; 55
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	80 83       	st	Z, r24
    1090:	09 c0       	rjmp	.+18     	; 0x10a4 <DIO_U8_Set_Port_Direction+0x7c>
			break;
		case GROUP_C:
			DIO_U8_DDRC = Copy_U8_Port_Dir;
    1092:	e4 e3       	ldi	r30, 0x34	; 52
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	80 83       	st	Z, r24
    109a:	04 c0       	rjmp	.+8      	; 0x10a4 <DIO_U8_Set_Port_Direction+0x7c>
			break;
		case GROUP_D:
			DIO_U8_DDRD = Copy_U8_Port_Dir;
    109c:	e1 e3       	ldi	r30, 0x31	; 49
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	80 83       	st	Z, r24
		}
	}
	else{
		return INVALID_PORT_ID;
	}
	return Success;
    10a4:	1b 82       	std	Y+3, r1	; 0x03
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <DIO_U8_Set_Port_Direction+0x84>
			DIO_U8_DDRD = Copy_U8_Port_Dir;
			break;
		}
	}
	else{
		return INVALID_PORT_ID;
    10a8:	95 ef       	ldi	r25, 0xF5	; 245
    10aa:	9b 83       	std	Y+3, r25	; 0x03
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	return Success;
}
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <DIO_U8_Set_Port_Value>:

u8 DIO_U8_Set_Port_Value(u8 Copy_U8_Port_ID,u8 Copy_U8_Port_Value){   //lw 3aiz a4t8al 3la al value bta3t al port kolo;
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <DIO_U8_Set_Port_Value+0x6>
    10c4:	00 d0       	rcall	.+0      	; 0x10c6 <DIO_U8_Set_Port_Value+0x8>
    10c6:	0f 92       	push	r0
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	89 83       	std	Y+1, r24	; 0x01
    10ce:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_U8_Port_ID <= GROUP_D) && (Copy_U8_Port_ID >= GROUP_A)){
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	84 30       	cpi	r24, 0x04	; 4
    10d4:	a0 f5       	brcc	.+104    	; 0x113e <DIO_U8_Set_Port_Value+0x80>
		switch(Copy_U8_Port_ID){
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	3d 83       	std	Y+5, r19	; 0x05
    10de:	2c 83       	std	Y+4, r18	; 0x04
    10e0:	8c 81       	ldd	r24, Y+4	; 0x04
    10e2:	9d 81       	ldd	r25, Y+5	; 0x05
    10e4:	81 30       	cpi	r24, 0x01	; 1
    10e6:	91 05       	cpc	r25, r1
    10e8:	d1 f0       	breq	.+52     	; 0x111e <DIO_U8_Set_Port_Value+0x60>
    10ea:	2c 81       	ldd	r18, Y+4	; 0x04
    10ec:	3d 81       	ldd	r19, Y+5	; 0x05
    10ee:	22 30       	cpi	r18, 0x02	; 2
    10f0:	31 05       	cpc	r19, r1
    10f2:	2c f4       	brge	.+10     	; 0x10fe <DIO_U8_Set_Port_Value+0x40>
    10f4:	8c 81       	ldd	r24, Y+4	; 0x04
    10f6:	9d 81       	ldd	r25, Y+5	; 0x05
    10f8:	00 97       	sbiw	r24, 0x00	; 0
    10fa:	61 f0       	breq	.+24     	; 0x1114 <DIO_U8_Set_Port_Value+0x56>
    10fc:	1e c0       	rjmp	.+60     	; 0x113a <DIO_U8_Set_Port_Value+0x7c>
    10fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1100:	3d 81       	ldd	r19, Y+5	; 0x05
    1102:	22 30       	cpi	r18, 0x02	; 2
    1104:	31 05       	cpc	r19, r1
    1106:	81 f0       	breq	.+32     	; 0x1128 <DIO_U8_Set_Port_Value+0x6a>
    1108:	8c 81       	ldd	r24, Y+4	; 0x04
    110a:	9d 81       	ldd	r25, Y+5	; 0x05
    110c:	83 30       	cpi	r24, 0x03	; 3
    110e:	91 05       	cpc	r25, r1
    1110:	81 f0       	breq	.+32     	; 0x1132 <DIO_U8_Set_Port_Value+0x74>
    1112:	13 c0       	rjmp	.+38     	; 0x113a <DIO_U8_Set_Port_Value+0x7c>
		case GROUP_A:
			DIO_U8_PORTA = Copy_U8_Port_Value;
    1114:	eb e3       	ldi	r30, 0x3B	; 59
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	80 83       	st	Z, r24
    111c:	0e c0       	rjmp	.+28     	; 0x113a <DIO_U8_Set_Port_Value+0x7c>
			break;
		case GROUP_B:
			DIO_U8_PORTB = Copy_U8_Port_Value;
    111e:	e8 e3       	ldi	r30, 0x38	; 56
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	80 83       	st	Z, r24
    1126:	09 c0       	rjmp	.+18     	; 0x113a <DIO_U8_Set_Port_Value+0x7c>
			break;
		case GROUP_C:
			DIO_U8_PORTC = Copy_U8_Port_Value;
    1128:	e5 e3       	ldi	r30, 0x35	; 53
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	80 83       	st	Z, r24
    1130:	04 c0       	rjmp	.+8      	; 0x113a <DIO_U8_Set_Port_Value+0x7c>
			break;
		case GROUP_D:
			DIO_U8_PORTD = Copy_U8_Port_Value;
    1132:	e2 e3       	ldi	r30, 0x32	; 50
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	80 83       	st	Z, r24
	}
	else{
		return INVALID_PORT_ID;
	}

	return Success;
    113a:	1b 82       	std	Y+3, r1	; 0x03
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <DIO_U8_Set_Port_Value+0x84>
			DIO_U8_PORTD = Copy_U8_Port_Value;
			break;
		}
	}
	else{
		return INVALID_PORT_ID;
    113e:	95 ef       	ldi	r25, 0xF5	; 245
    1140:	9b 83       	std	Y+3, r25	; 0x03
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
	}

	return Success;
}
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	cf 91       	pop	r28
    1150:	df 91       	pop	r29
    1152:	08 95       	ret

00001154 <DIO_U8_Get_Pin_Direction>:

u8 DIO_U8_Get_Pin_Direction(u8 Copy_U8_Port_ID, u8 Copy_U8_Pin_ID ){
    1154:	df 93       	push	r29
    1156:	cf 93       	push	r28
    1158:	00 d0       	rcall	.+0      	; 0x115a <DIO_U8_Get_Pin_Direction+0x6>
    115a:	00 d0       	rcall	.+0      	; 0x115c <DIO_U8_Get_Pin_Direction+0x8>
    115c:	00 d0       	rcall	.+0      	; 0x115e <DIO_U8_Get_Pin_Direction+0xa>
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
    1162:	8a 83       	std	Y+2, r24	; 0x02
    1164:	6b 83       	std	Y+3, r22	; 0x03
	u8 Pin_direction;

	if ((Copy_U8_Port_ID <= GROUP_D) && (Copy_U8_Port_ID >= GROUP_A)){
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	84 30       	cpi	r24, 0x04	; 4
    116a:	08 f0       	brcs	.+2      	; 0x116e <DIO_U8_Get_Pin_Direction+0x1a>
    116c:	6a c0       	rjmp	.+212    	; 0x1242 <DIO_U8_Get_Pin_Direction+0xee>
		switch(Copy_U8_Port_ID){
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	3e 83       	std	Y+6, r19	; 0x06
    1176:	2d 83       	std	Y+5, r18	; 0x05
    1178:	4d 81       	ldd	r20, Y+5	; 0x05
    117a:	5e 81       	ldd	r21, Y+6	; 0x06
    117c:	41 30       	cpi	r20, 0x01	; 1
    117e:	51 05       	cpc	r21, r1
    1180:	41 f1       	breq	.+80     	; 0x11d2 <DIO_U8_Get_Pin_Direction+0x7e>
    1182:	8d 81       	ldd	r24, Y+5	; 0x05
    1184:	9e 81       	ldd	r25, Y+6	; 0x06
    1186:	82 30       	cpi	r24, 0x02	; 2
    1188:	91 05       	cpc	r25, r1
    118a:	34 f4       	brge	.+12     	; 0x1198 <DIO_U8_Get_Pin_Direction+0x44>
    118c:	2d 81       	ldd	r18, Y+5	; 0x05
    118e:	3e 81       	ldd	r19, Y+6	; 0x06
    1190:	21 15       	cp	r18, r1
    1192:	31 05       	cpc	r19, r1
    1194:	61 f0       	breq	.+24     	; 0x11ae <DIO_U8_Get_Pin_Direction+0x5a>
    1196:	52 c0       	rjmp	.+164    	; 0x123c <DIO_U8_Get_Pin_Direction+0xe8>
    1198:	4d 81       	ldd	r20, Y+5	; 0x05
    119a:	5e 81       	ldd	r21, Y+6	; 0x06
    119c:	42 30       	cpi	r20, 0x02	; 2
    119e:	51 05       	cpc	r21, r1
    11a0:	51 f1       	breq	.+84     	; 0x11f6 <DIO_U8_Get_Pin_Direction+0xa2>
    11a2:	8d 81       	ldd	r24, Y+5	; 0x05
    11a4:	9e 81       	ldd	r25, Y+6	; 0x06
    11a6:	83 30       	cpi	r24, 0x03	; 3
    11a8:	91 05       	cpc	r25, r1
    11aa:	b9 f1       	breq	.+110    	; 0x121a <DIO_U8_Get_Pin_Direction+0xc6>
    11ac:	47 c0       	rjmp	.+142    	; 0x123c <DIO_U8_Get_Pin_Direction+0xe8>
		case GROUP_A:
			Pin_direction = Get_Bit(DIO_U8_DDRA,Copy_U8_Pin_ID);
    11ae:	ea e3       	ldi	r30, 0x3A	; 58
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	88 2f       	mov	r24, r24
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	a9 01       	movw	r20, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <DIO_U8_Get_Pin_Direction+0x72>
    11c2:	55 95       	asr	r21
    11c4:	47 95       	ror	r20
    11c6:	8a 95       	dec	r24
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <DIO_U8_Get_Pin_Direction+0x6e>
    11ca:	ca 01       	movw	r24, r20
    11cc:	81 70       	andi	r24, 0x01	; 1
    11ce:	89 83       	std	Y+1, r24	; 0x01
    11d0:	35 c0       	rjmp	.+106    	; 0x123c <DIO_U8_Get_Pin_Direction+0xe8>
			break;
		case GROUP_B:
			Pin_direction = Get_Bit(DIO_U8_DDRB,Copy_U8_Pin_ID);
    11d2:	e7 e3       	ldi	r30, 0x37	; 55
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	88 2f       	mov	r24, r24
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	a9 01       	movw	r20, r18
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <DIO_U8_Get_Pin_Direction+0x96>
    11e6:	55 95       	asr	r21
    11e8:	47 95       	ror	r20
    11ea:	8a 95       	dec	r24
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <DIO_U8_Get_Pin_Direction+0x92>
    11ee:	ca 01       	movw	r24, r20
    11f0:	81 70       	andi	r24, 0x01	; 1
    11f2:	89 83       	std	Y+1, r24	; 0x01
    11f4:	23 c0       	rjmp	.+70     	; 0x123c <DIO_U8_Get_Pin_Direction+0xe8>
			break;
		case GROUP_C:
			Pin_direction = Get_Bit(DIO_U8_DDRC,Copy_U8_Pin_ID);
    11f6:	e4 e3       	ldi	r30, 0x34	; 52
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	88 2f       	mov	r24, r24
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	a9 01       	movw	r20, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <DIO_U8_Get_Pin_Direction+0xba>
    120a:	55 95       	asr	r21
    120c:	47 95       	ror	r20
    120e:	8a 95       	dec	r24
    1210:	e2 f7       	brpl	.-8      	; 0x120a <DIO_U8_Get_Pin_Direction+0xb6>
    1212:	ca 01       	movw	r24, r20
    1214:	81 70       	andi	r24, 0x01	; 1
    1216:	89 83       	std	Y+1, r24	; 0x01
    1218:	11 c0       	rjmp	.+34     	; 0x123c <DIO_U8_Get_Pin_Direction+0xe8>
			break;
		case GROUP_D:
			Pin_direction = Get_Bit(DIO_U8_DDRD,Copy_U8_Pin_ID);
    121a:	e1 e3       	ldi	r30, 0x31	; 49
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	8b 81       	ldd	r24, Y+3	; 0x03
    1226:	88 2f       	mov	r24, r24
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	a9 01       	movw	r20, r18
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <DIO_U8_Get_Pin_Direction+0xde>
    122e:	55 95       	asr	r21
    1230:	47 95       	ror	r20
    1232:	8a 95       	dec	r24
    1234:	e2 f7       	brpl	.-8      	; 0x122e <DIO_U8_Get_Pin_Direction+0xda>
    1236:	ca 01       	movw	r24, r20
    1238:	81 70       	andi	r24, 0x01	; 1
    123a:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	else{
		return INVALID_PORT_ID;
	}
	return Pin_direction;
    123c:	59 81       	ldd	r21, Y+1	; 0x01
    123e:	5c 83       	std	Y+4, r21	; 0x04
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <DIO_U8_Get_Pin_Direction+0xf2>
			Pin_direction = Get_Bit(DIO_U8_DDRD,Copy_U8_Pin_ID);
			break;
		}
	}
	else{
		return INVALID_PORT_ID;
    1242:	85 ef       	ldi	r24, 0xF5	; 245
    1244:	8c 83       	std	Y+4, r24	; 0x04
    1246:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	return Pin_direction;
}
    1248:	26 96       	adiw	r28, 0x06	; 6
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	f8 94       	cli
    124e:	de bf       	out	0x3e, r29	; 62
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	cd bf       	out	0x3d, r28	; 61
    1254:	cf 91       	pop	r28
    1256:	df 91       	pop	r29
    1258:	08 95       	ret

0000125a <DIO_U8_Get_Port_Direction>:

u8 DIO_U8_Get_Port_Direction(u8 Copy_U8_Port_ID){
    125a:	df 93       	push	r29
    125c:	cf 93       	push	r28
    125e:	00 d0       	rcall	.+0      	; 0x1260 <DIO_U8_Get_Port_Direction+0x6>
    1260:	00 d0       	rcall	.+0      	; 0x1262 <DIO_U8_Get_Port_Direction+0x8>
    1262:	0f 92       	push	r0
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	8a 83       	std	Y+2, r24	; 0x02
	u8 port_direction;
	if((Copy_U8_Port_ID <= GROUP_D) && (Copy_U8_Port_ID >= GROUP_A)){
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	84 30       	cpi	r24, 0x04	; 4
    126e:	a8 f5       	brcc	.+106    	; 0x12da <DIO_U8_Get_Port_Direction+0x80>
		switch(Copy_U8_Port_ID){
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	3d 83       	std	Y+5, r19	; 0x05
    1278:	2c 83       	std	Y+4, r18	; 0x04
    127a:	8c 81       	ldd	r24, Y+4	; 0x04
    127c:	9d 81       	ldd	r25, Y+5	; 0x05
    127e:	81 30       	cpi	r24, 0x01	; 1
    1280:	91 05       	cpc	r25, r1
    1282:	d1 f0       	breq	.+52     	; 0x12b8 <DIO_U8_Get_Port_Direction+0x5e>
    1284:	2c 81       	ldd	r18, Y+4	; 0x04
    1286:	3d 81       	ldd	r19, Y+5	; 0x05
    1288:	22 30       	cpi	r18, 0x02	; 2
    128a:	31 05       	cpc	r19, r1
    128c:	2c f4       	brge	.+10     	; 0x1298 <DIO_U8_Get_Port_Direction+0x3e>
    128e:	8c 81       	ldd	r24, Y+4	; 0x04
    1290:	9d 81       	ldd	r25, Y+5	; 0x05
    1292:	00 97       	sbiw	r24, 0x00	; 0
    1294:	61 f0       	breq	.+24     	; 0x12ae <DIO_U8_Get_Port_Direction+0x54>
    1296:	1e c0       	rjmp	.+60     	; 0x12d4 <DIO_U8_Get_Port_Direction+0x7a>
    1298:	2c 81       	ldd	r18, Y+4	; 0x04
    129a:	3d 81       	ldd	r19, Y+5	; 0x05
    129c:	22 30       	cpi	r18, 0x02	; 2
    129e:	31 05       	cpc	r19, r1
    12a0:	81 f0       	breq	.+32     	; 0x12c2 <DIO_U8_Get_Port_Direction+0x68>
    12a2:	8c 81       	ldd	r24, Y+4	; 0x04
    12a4:	9d 81       	ldd	r25, Y+5	; 0x05
    12a6:	83 30       	cpi	r24, 0x03	; 3
    12a8:	91 05       	cpc	r25, r1
    12aa:	81 f0       	breq	.+32     	; 0x12cc <DIO_U8_Get_Port_Direction+0x72>
    12ac:	13 c0       	rjmp	.+38     	; 0x12d4 <DIO_U8_Get_Port_Direction+0x7a>
		case GROUP_A:
			port_direction = DIO_U8_DDRA;
    12ae:	ea e3       	ldi	r30, 0x3A	; 58
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	89 83       	std	Y+1, r24	; 0x01
    12b6:	0e c0       	rjmp	.+28     	; 0x12d4 <DIO_U8_Get_Port_Direction+0x7a>
			break;
		case GROUP_B:
			port_direction = DIO_U8_DDRB;
    12b8:	e7 e3       	ldi	r30, 0x37	; 55
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	89 83       	std	Y+1, r24	; 0x01
    12c0:	09 c0       	rjmp	.+18     	; 0x12d4 <DIO_U8_Get_Port_Direction+0x7a>
			break;
		case GROUP_C:
			port_direction = DIO_U8_DDRC;
    12c2:	e4 e3       	ldi	r30, 0x34	; 52
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	89 83       	std	Y+1, r24	; 0x01
    12ca:	04 c0       	rjmp	.+8      	; 0x12d4 <DIO_U8_Get_Port_Direction+0x7a>
			break;
		case GROUP_D:
			port_direction = DIO_U8_DDRD;
    12cc:	e1 e3       	ldi	r30, 0x31	; 49
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	89 83       	std	Y+1, r24	; 0x01
	}
	else{
		return INVALID_PORT_ID;
	}

	return port_direction;
    12d4:	99 81       	ldd	r25, Y+1	; 0x01
    12d6:	9b 83       	std	Y+3, r25	; 0x03
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <DIO_U8_Get_Port_Direction+0x84>
			break;

		}
	}
	else{
		return INVALID_PORT_ID;
    12da:	25 ef       	ldi	r18, 0xF5	; 245
    12dc:	2b 83       	std	Y+3, r18	; 0x03
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
	}

	return port_direction;
}
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	08 95       	ret

000012f0 <DIO_U8_Get_Port_Value>:


// get port value_U8_PINB = port_direction

u8 DIO_U8_Get_Port_Value(u8 Copy_U8_Port_ID,u8* Copy_U8_Port_Value){
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	00 d0       	rcall	.+0      	; 0x12f6 <DIO_U8_Get_Port_Value+0x6>
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <DIO_U8_Get_Port_Value+0x8>
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <DIO_U8_Get_Port_Value+0xa>
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	89 83       	std	Y+1, r24	; 0x01
    1300:	7b 83       	std	Y+3, r23	; 0x03
    1302:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_U8_Port_ID <= GROUP_D) && (Copy_U8_Port_ID >= GROUP_A)){
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	84 30       	cpi	r24, 0x04	; 4
    1308:	e0 f5       	brcc	.+120    	; 0x1382 <DIO_U8_Get_Port_Value+0x92>
		switch(Copy_U8_Port_ID){
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	3e 83       	std	Y+6, r19	; 0x06
    1312:	2d 83       	std	Y+5, r18	; 0x05
    1314:	8d 81       	ldd	r24, Y+5	; 0x05
    1316:	9e 81       	ldd	r25, Y+6	; 0x06
    1318:	81 30       	cpi	r24, 0x01	; 1
    131a:	91 05       	cpc	r25, r1
    131c:	e1 f0       	breq	.+56     	; 0x1356 <DIO_U8_Get_Port_Value+0x66>
    131e:	2d 81       	ldd	r18, Y+5	; 0x05
    1320:	3e 81       	ldd	r19, Y+6	; 0x06
    1322:	22 30       	cpi	r18, 0x02	; 2
    1324:	31 05       	cpc	r19, r1
    1326:	2c f4       	brge	.+10     	; 0x1332 <DIO_U8_Get_Port_Value+0x42>
    1328:	8d 81       	ldd	r24, Y+5	; 0x05
    132a:	9e 81       	ldd	r25, Y+6	; 0x06
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	61 f0       	breq	.+24     	; 0x1348 <DIO_U8_Get_Port_Value+0x58>
    1330:	26 c0       	rjmp	.+76     	; 0x137e <DIO_U8_Get_Port_Value+0x8e>
    1332:	2d 81       	ldd	r18, Y+5	; 0x05
    1334:	3e 81       	ldd	r19, Y+6	; 0x06
    1336:	22 30       	cpi	r18, 0x02	; 2
    1338:	31 05       	cpc	r19, r1
    133a:	a1 f0       	breq	.+40     	; 0x1364 <DIO_U8_Get_Port_Value+0x74>
    133c:	8d 81       	ldd	r24, Y+5	; 0x05
    133e:	9e 81       	ldd	r25, Y+6	; 0x06
    1340:	83 30       	cpi	r24, 0x03	; 3
    1342:	91 05       	cpc	r25, r1
    1344:	b1 f0       	breq	.+44     	; 0x1372 <DIO_U8_Get_Port_Value+0x82>
    1346:	1b c0       	rjmp	.+54     	; 0x137e <DIO_U8_Get_Port_Value+0x8e>
			case GROUP_A:
				*Copy_U8_Port_Value = DIO_U8_PINA;
    1348:	e9 e3       	ldi	r30, 0x39	; 57
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	ea 81       	ldd	r30, Y+2	; 0x02
    1350:	fb 81       	ldd	r31, Y+3	; 0x03
    1352:	80 83       	st	Z, r24
    1354:	14 c0       	rjmp	.+40     	; 0x137e <DIO_U8_Get_Port_Value+0x8e>
				break;
			case GROUP_B:
				*Copy_U8_Port_Value = DIO_U8_PINB;
    1356:	e6 e3       	ldi	r30, 0x36	; 54
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	ea 81       	ldd	r30, Y+2	; 0x02
    135e:	fb 81       	ldd	r31, Y+3	; 0x03
    1360:	80 83       	st	Z, r24
    1362:	0d c0       	rjmp	.+26     	; 0x137e <DIO_U8_Get_Port_Value+0x8e>
				break;
			case GROUP_C:
				*Copy_U8_Port_Value = DIO_U8_PINC;
    1364:	e3 e3       	ldi	r30, 0x33	; 51
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	ea 81       	ldd	r30, Y+2	; 0x02
    136c:	fb 81       	ldd	r31, Y+3	; 0x03
    136e:	80 83       	st	Z, r24
    1370:	06 c0       	rjmp	.+12     	; 0x137e <DIO_U8_Get_Port_Value+0x8e>
				break;
			case GROUP_D:
				*Copy_U8_Port_Value = DIO_U8_PIND;
    1372:	e0 e3       	ldi	r30, 0x30	; 48
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	ea 81       	ldd	r30, Y+2	; 0x02
    137a:	fb 81       	ldd	r31, Y+3	; 0x03
    137c:	80 83       	st	Z, r24

	}
	else{
		return INVALID_PORT_ID;
	}
	return 0;
    137e:	1c 82       	std	Y+4, r1	; 0x04
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <DIO_U8_Get_Port_Value+0x96>
				break;
		}

	}
	else{
		return INVALID_PORT_ID;
    1382:	95 ef       	ldi	r25, 0xF5	; 245
    1384:	9c 83       	std	Y+4, r25	; 0x04
    1386:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	return 0;
}
    1388:	26 96       	adiw	r28, 0x06	; 6
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	cd bf       	out	0x3d, r28	; 61
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <LCD_Void_Init_8Bits>:

#include "LCD_Interface.h"
#include "LCD_Private.h"
#include <avr/delay.h>

void LCD_Void_Init_8Bits (void){
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
    13a2:	e8 97       	sbiw	r28, 0x38	; 56
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	f8 94       	cli
    13a8:	de bf       	out	0x3e, r29	; 62
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	cd bf       	out	0x3d, r28	; 61
	DIO_U8_Set_Port_Direction(LCD_U8_DATA_Port, maximum_port_direction);
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	6f ef       	ldi	r22, 0xFF	; 255
    13b2:	0e 94 14 08 	call	0x1028	; 0x1028 <DIO_U8_Set_Port_Direction>
	DIO_U8_Set_Pin_Direction(LCD_U8_CTRL_Port, LCD_U8_RS_PIN, OUTPUT);
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	60 e0       	ldi	r22, 0x00	; 0
    13ba:	41 e0       	ldi	r20, 0x01	; 1
    13bc:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_U8_Set_Pin_Direction>
	DIO_U8_Set_Pin_Direction(LCD_U8_CTRL_Port, LCD_U8_RW_PIN, OUTPUT);
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	61 e0       	ldi	r22, 0x01	; 1
    13c4:	41 e0       	ldi	r20, 0x01	; 1
    13c6:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_U8_Set_Pin_Direction>
	DIO_U8_Set_Pin_Direction(LCD_U8_CTRL_Port, LCD_U8_ENABLE_PIN, OUTPUT);
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	62 e0       	ldi	r22, 0x02	; 2
    13ce:	41 e0       	ldi	r20, 0x01	; 1
    13d0:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_U8_Set_Pin_Direction>
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	a8 e4       	ldi	r26, 0x48	; 72
    13da:	b2 e4       	ldi	r27, 0x42	; 66
    13dc:	8d ab       	std	Y+53, r24	; 0x35
    13de:	9e ab       	std	Y+54, r25	; 0x36
    13e0:	af ab       	std	Y+55, r26	; 0x37
    13e2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13e4:	6d a9       	ldd	r22, Y+53	; 0x35
    13e6:	7e a9       	ldd	r23, Y+54	; 0x36
    13e8:	8f a9       	ldd	r24, Y+55	; 0x37
    13ea:	98 ad       	ldd	r25, Y+56	; 0x38
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	4a ef       	ldi	r20, 0xFA	; 250
    13f2:	54 e4       	ldi	r21, 0x44	; 68
    13f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13f8:	dc 01       	movw	r26, r24
    13fa:	cb 01       	movw	r24, r22
    13fc:	89 ab       	std	Y+49, r24	; 0x31
    13fe:	9a ab       	std	Y+50, r25	; 0x32
    1400:	ab ab       	std	Y+51, r26	; 0x33
    1402:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1404:	69 a9       	ldd	r22, Y+49	; 0x31
    1406:	7a a9       	ldd	r23, Y+50	; 0x32
    1408:	8b a9       	ldd	r24, Y+51	; 0x33
    140a:	9c a9       	ldd	r25, Y+52	; 0x34
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	40 e8       	ldi	r20, 0x80	; 128
    1412:	5f e3       	ldi	r21, 0x3F	; 63
    1414:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1418:	88 23       	and	r24, r24
    141a:	2c f4       	brge	.+10     	; 0x1426 <LCD_Void_Init_8Bits+0x8c>
		__ticks = 1;
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	98 ab       	std	Y+48, r25	; 0x30
    1422:	8f a7       	std	Y+47, r24	; 0x2f
    1424:	3f c0       	rjmp	.+126    	; 0x14a4 <LCD_Void_Init_8Bits+0x10a>
	else if (__tmp > 65535)
    1426:	69 a9       	ldd	r22, Y+49	; 0x31
    1428:	7a a9       	ldd	r23, Y+50	; 0x32
    142a:	8b a9       	ldd	r24, Y+51	; 0x33
    142c:	9c a9       	ldd	r25, Y+52	; 0x34
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	3f ef       	ldi	r19, 0xFF	; 255
    1432:	4f e7       	ldi	r20, 0x7F	; 127
    1434:	57 e4       	ldi	r21, 0x47	; 71
    1436:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    143a:	18 16       	cp	r1, r24
    143c:	4c f5       	brge	.+82     	; 0x1490 <LCD_Void_Init_8Bits+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    143e:	6d a9       	ldd	r22, Y+53	; 0x35
    1440:	7e a9       	ldd	r23, Y+54	; 0x36
    1442:	8f a9       	ldd	r24, Y+55	; 0x37
    1444:	98 ad       	ldd	r25, Y+56	; 0x38
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	40 e2       	ldi	r20, 0x20	; 32
    144c:	51 e4       	ldi	r21, 0x41	; 65
    144e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	bc 01       	movw	r22, r24
    1458:	cd 01       	movw	r24, r26
    145a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	98 ab       	std	Y+48, r25	; 0x30
    1464:	8f a7       	std	Y+47, r24	; 0x2f
    1466:	0f c0       	rjmp	.+30     	; 0x1486 <LCD_Void_Init_8Bits+0xec>
    1468:	88 ec       	ldi	r24, 0xC8	; 200
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	9e a7       	std	Y+46, r25	; 0x2e
    146e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1470:	8d a5       	ldd	r24, Y+45	; 0x2d
    1472:	9e a5       	ldd	r25, Y+46	; 0x2e
    1474:	01 97       	sbiw	r24, 0x01	; 1
    1476:	f1 f7       	brne	.-4      	; 0x1474 <LCD_Void_Init_8Bits+0xda>
    1478:	9e a7       	std	Y+46, r25	; 0x2e
    147a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    147c:	8f a5       	ldd	r24, Y+47	; 0x2f
    147e:	98 a9       	ldd	r25, Y+48	; 0x30
    1480:	01 97       	sbiw	r24, 0x01	; 1
    1482:	98 ab       	std	Y+48, r25	; 0x30
    1484:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1486:	8f a5       	ldd	r24, Y+47	; 0x2f
    1488:	98 a9       	ldd	r25, Y+48	; 0x30
    148a:	00 97       	sbiw	r24, 0x00	; 0
    148c:	69 f7       	brne	.-38     	; 0x1468 <LCD_Void_Init_8Bits+0xce>
    148e:	14 c0       	rjmp	.+40     	; 0x14b8 <LCD_Void_Init_8Bits+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1490:	69 a9       	ldd	r22, Y+49	; 0x31
    1492:	7a a9       	ldd	r23, Y+50	; 0x32
    1494:	8b a9       	ldd	r24, Y+51	; 0x33
    1496:	9c a9       	ldd	r25, Y+52	; 0x34
    1498:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    149c:	dc 01       	movw	r26, r24
    149e:	cb 01       	movw	r24, r22
    14a0:	98 ab       	std	Y+48, r25	; 0x30
    14a2:	8f a7       	std	Y+47, r24	; 0x2f
    14a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    14a6:	98 a9       	ldd	r25, Y+48	; 0x30
    14a8:	9c a7       	std	Y+44, r25	; 0x2c
    14aa:	8b a7       	std	Y+43, r24	; 0x2b
    14ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    14ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    14b0:	01 97       	sbiw	r24, 0x01	; 1
    14b2:	f1 f7       	brne	.-4      	; 0x14b0 <LCD_Void_Init_8Bits+0x116>
    14b4:	9c a7       	std	Y+44, r25	; 0x2c
    14b6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	LCD_Void_Write_Cmd(Init_Function_set);  //FUNCTION set  see starting from page 12 in lcd datasheet
    14b8:	88 e3       	ldi	r24, 0x38	; 56
    14ba:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCD_Void_Write_Cmd>
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	a8 e4       	ldi	r26, 0x48	; 72
    14c4:	b2 e4       	ldi	r27, 0x42	; 66
    14c6:	8f a3       	std	Y+39, r24	; 0x27
    14c8:	98 a7       	std	Y+40, r25	; 0x28
    14ca:	a9 a7       	std	Y+41, r26	; 0x29
    14cc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ce:	6f a1       	ldd	r22, Y+39	; 0x27
    14d0:	78 a5       	ldd	r23, Y+40	; 0x28
    14d2:	89 a5       	ldd	r24, Y+41	; 0x29
    14d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	4a ef       	ldi	r20, 0xFA	; 250
    14dc:	54 e4       	ldi	r21, 0x44	; 68
    14de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14e2:	dc 01       	movw	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	8b a3       	std	Y+35, r24	; 0x23
    14e8:	9c a3       	std	Y+36, r25	; 0x24
    14ea:	ad a3       	std	Y+37, r26	; 0x25
    14ec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14ee:	6b a1       	ldd	r22, Y+35	; 0x23
    14f0:	7c a1       	ldd	r23, Y+36	; 0x24
    14f2:	8d a1       	ldd	r24, Y+37	; 0x25
    14f4:	9e a1       	ldd	r25, Y+38	; 0x26
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	40 e8       	ldi	r20, 0x80	; 128
    14fc:	5f e3       	ldi	r21, 0x3F	; 63
    14fe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1502:	88 23       	and	r24, r24
    1504:	2c f4       	brge	.+10     	; 0x1510 <LCD_Void_Init_8Bits+0x176>
		__ticks = 1;
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	9a a3       	std	Y+34, r25	; 0x22
    150c:	89 a3       	std	Y+33, r24	; 0x21
    150e:	3f c0       	rjmp	.+126    	; 0x158e <LCD_Void_Init_8Bits+0x1f4>
	else if (__tmp > 65535)
    1510:	6b a1       	ldd	r22, Y+35	; 0x23
    1512:	7c a1       	ldd	r23, Y+36	; 0x24
    1514:	8d a1       	ldd	r24, Y+37	; 0x25
    1516:	9e a1       	ldd	r25, Y+38	; 0x26
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	3f ef       	ldi	r19, 0xFF	; 255
    151c:	4f e7       	ldi	r20, 0x7F	; 127
    151e:	57 e4       	ldi	r21, 0x47	; 71
    1520:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1524:	18 16       	cp	r1, r24
    1526:	4c f5       	brge	.+82     	; 0x157a <LCD_Void_Init_8Bits+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1528:	6f a1       	ldd	r22, Y+39	; 0x27
    152a:	78 a5       	ldd	r23, Y+40	; 0x28
    152c:	89 a5       	ldd	r24, Y+41	; 0x29
    152e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	40 e2       	ldi	r20, 0x20	; 32
    1536:	51 e4       	ldi	r21, 0x41	; 65
    1538:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    153c:	dc 01       	movw	r26, r24
    153e:	cb 01       	movw	r24, r22
    1540:	bc 01       	movw	r22, r24
    1542:	cd 01       	movw	r24, r26
    1544:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	9a a3       	std	Y+34, r25	; 0x22
    154e:	89 a3       	std	Y+33, r24	; 0x21
    1550:	0f c0       	rjmp	.+30     	; 0x1570 <LCD_Void_Init_8Bits+0x1d6>
    1552:	88 ec       	ldi	r24, 0xC8	; 200
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	98 a3       	std	Y+32, r25	; 0x20
    1558:	8f 8f       	std	Y+31, r24	; 0x1f
    155a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    155c:	98 a1       	ldd	r25, Y+32	; 0x20
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	f1 f7       	brne	.-4      	; 0x155e <LCD_Void_Init_8Bits+0x1c4>
    1562:	98 a3       	std	Y+32, r25	; 0x20
    1564:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1566:	89 a1       	ldd	r24, Y+33	; 0x21
    1568:	9a a1       	ldd	r25, Y+34	; 0x22
    156a:	01 97       	sbiw	r24, 0x01	; 1
    156c:	9a a3       	std	Y+34, r25	; 0x22
    156e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1570:	89 a1       	ldd	r24, Y+33	; 0x21
    1572:	9a a1       	ldd	r25, Y+34	; 0x22
    1574:	00 97       	sbiw	r24, 0x00	; 0
    1576:	69 f7       	brne	.-38     	; 0x1552 <LCD_Void_Init_8Bits+0x1b8>
    1578:	14 c0       	rjmp	.+40     	; 0x15a2 <LCD_Void_Init_8Bits+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    157a:	6b a1       	ldd	r22, Y+35	; 0x23
    157c:	7c a1       	ldd	r23, Y+36	; 0x24
    157e:	8d a1       	ldd	r24, Y+37	; 0x25
    1580:	9e a1       	ldd	r25, Y+38	; 0x26
    1582:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	9a a3       	std	Y+34, r25	; 0x22
    158c:	89 a3       	std	Y+33, r24	; 0x21
    158e:	89 a1       	ldd	r24, Y+33	; 0x21
    1590:	9a a1       	ldd	r25, Y+34	; 0x22
    1592:	9e 8f       	std	Y+30, r25	; 0x1e
    1594:	8d 8f       	std	Y+29, r24	; 0x1d
    1596:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1598:	9e 8d       	ldd	r25, Y+30	; 0x1e
    159a:	01 97       	sbiw	r24, 0x01	; 1
    159c:	f1 f7       	brne	.-4      	; 0x159a <LCD_Void_Init_8Bits+0x200>
    159e:	9e 8f       	std	Y+30, r25	; 0x1e
    15a0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);
	LCD_Void_Write_Cmd(Init_Display_OnOff);  //display on/off
    15a2:	8c e0       	ldi	r24, 0x0C	; 12
    15a4:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCD_Void_Write_Cmd>
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	a8 e4       	ldi	r26, 0x48	; 72
    15ae:	b2 e4       	ldi	r27, 0x42	; 66
    15b0:	89 8f       	std	Y+25, r24	; 0x19
    15b2:	9a 8f       	std	Y+26, r25	; 0x1a
    15b4:	ab 8f       	std	Y+27, r26	; 0x1b
    15b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15b8:	69 8d       	ldd	r22, Y+25	; 0x19
    15ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	4a ef       	ldi	r20, 0xFA	; 250
    15c6:	54 e4       	ldi	r21, 0x44	; 68
    15c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
    15d0:	8d 8b       	std	Y+21, r24	; 0x15
    15d2:	9e 8b       	std	Y+22, r25	; 0x16
    15d4:	af 8b       	std	Y+23, r26	; 0x17
    15d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15d8:	6d 89       	ldd	r22, Y+21	; 0x15
    15da:	7e 89       	ldd	r23, Y+22	; 0x16
    15dc:	8f 89       	ldd	r24, Y+23	; 0x17
    15de:	98 8d       	ldd	r25, Y+24	; 0x18
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	40 e8       	ldi	r20, 0x80	; 128
    15e6:	5f e3       	ldi	r21, 0x3F	; 63
    15e8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15ec:	88 23       	and	r24, r24
    15ee:	2c f4       	brge	.+10     	; 0x15fa <LCD_Void_Init_8Bits+0x260>
		__ticks = 1;
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	9c 8b       	std	Y+20, r25	; 0x14
    15f6:	8b 8b       	std	Y+19, r24	; 0x13
    15f8:	3f c0       	rjmp	.+126    	; 0x1678 <LCD_Void_Init_8Bits+0x2de>
	else if (__tmp > 65535)
    15fa:	6d 89       	ldd	r22, Y+21	; 0x15
    15fc:	7e 89       	ldd	r23, Y+22	; 0x16
    15fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1600:	98 8d       	ldd	r25, Y+24	; 0x18
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	3f ef       	ldi	r19, 0xFF	; 255
    1606:	4f e7       	ldi	r20, 0x7F	; 127
    1608:	57 e4       	ldi	r21, 0x47	; 71
    160a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    160e:	18 16       	cp	r1, r24
    1610:	4c f5       	brge	.+82     	; 0x1664 <LCD_Void_Init_8Bits+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1612:	69 8d       	ldd	r22, Y+25	; 0x19
    1614:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1616:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1618:	9c 8d       	ldd	r25, Y+28	; 0x1c
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	40 e2       	ldi	r20, 0x20	; 32
    1620:	51 e4       	ldi	r21, 0x41	; 65
    1622:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	bc 01       	movw	r22, r24
    162c:	cd 01       	movw	r24, r26
    162e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	9c 8b       	std	Y+20, r25	; 0x14
    1638:	8b 8b       	std	Y+19, r24	; 0x13
    163a:	0f c0       	rjmp	.+30     	; 0x165a <LCD_Void_Init_8Bits+0x2c0>
    163c:	88 ec       	ldi	r24, 0xC8	; 200
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	9a 8b       	std	Y+18, r25	; 0x12
    1642:	89 8b       	std	Y+17, r24	; 0x11
    1644:	89 89       	ldd	r24, Y+17	; 0x11
    1646:	9a 89       	ldd	r25, Y+18	; 0x12
    1648:	01 97       	sbiw	r24, 0x01	; 1
    164a:	f1 f7       	brne	.-4      	; 0x1648 <LCD_Void_Init_8Bits+0x2ae>
    164c:	9a 8b       	std	Y+18, r25	; 0x12
    164e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1650:	8b 89       	ldd	r24, Y+19	; 0x13
    1652:	9c 89       	ldd	r25, Y+20	; 0x14
    1654:	01 97       	sbiw	r24, 0x01	; 1
    1656:	9c 8b       	std	Y+20, r25	; 0x14
    1658:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    165a:	8b 89       	ldd	r24, Y+19	; 0x13
    165c:	9c 89       	ldd	r25, Y+20	; 0x14
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	69 f7       	brne	.-38     	; 0x163c <LCD_Void_Init_8Bits+0x2a2>
    1662:	14 c0       	rjmp	.+40     	; 0x168c <LCD_Void_Init_8Bits+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1664:	6d 89       	ldd	r22, Y+21	; 0x15
    1666:	7e 89       	ldd	r23, Y+22	; 0x16
    1668:	8f 89       	ldd	r24, Y+23	; 0x17
    166a:	98 8d       	ldd	r25, Y+24	; 0x18
    166c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	9c 8b       	std	Y+20, r25	; 0x14
    1676:	8b 8b       	std	Y+19, r24	; 0x13
    1678:	8b 89       	ldd	r24, Y+19	; 0x13
    167a:	9c 89       	ldd	r25, Y+20	; 0x14
    167c:	98 8b       	std	Y+16, r25	; 0x10
    167e:	8f 87       	std	Y+15, r24	; 0x0f
    1680:	8f 85       	ldd	r24, Y+15	; 0x0f
    1682:	98 89       	ldd	r25, Y+16	; 0x10
    1684:	01 97       	sbiw	r24, 0x01	; 1
    1686:	f1 f7       	brne	.-4      	; 0x1684 <LCD_Void_Init_8Bits+0x2ea>
    1688:	98 8b       	std	Y+16, r25	; 0x10
    168a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	LCD_Void_Write_Cmd(Init_Display_Clear);  //display clear
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCD_Void_Write_Cmd>
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	a0 e0       	ldi	r26, 0x00	; 0
    1698:	b0 e4       	ldi	r27, 0x40	; 64
    169a:	8b 87       	std	Y+11, r24	; 0x0b
    169c:	9c 87       	std	Y+12, r25	; 0x0c
    169e:	ad 87       	std	Y+13, r26	; 0x0d
    16a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	4a ef       	ldi	r20, 0xFA	; 250
    16b0:	54 e4       	ldi	r21, 0x44	; 68
    16b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	8f 83       	std	Y+7, r24	; 0x07
    16bc:	98 87       	std	Y+8, r25	; 0x08
    16be:	a9 87       	std	Y+9, r26	; 0x09
    16c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16c2:	6f 81       	ldd	r22, Y+7	; 0x07
    16c4:	78 85       	ldd	r23, Y+8	; 0x08
    16c6:	89 85       	ldd	r24, Y+9	; 0x09
    16c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	40 e8       	ldi	r20, 0x80	; 128
    16d0:	5f e3       	ldi	r21, 0x3F	; 63
    16d2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16d6:	88 23       	and	r24, r24
    16d8:	2c f4       	brge	.+10     	; 0x16e4 <LCD_Void_Init_8Bits+0x34a>
		__ticks = 1;
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	9e 83       	std	Y+6, r25	; 0x06
    16e0:	8d 83       	std	Y+5, r24	; 0x05
    16e2:	3f c0       	rjmp	.+126    	; 0x1762 <LCD_Void_Init_8Bits+0x3c8>
	else if (__tmp > 65535)
    16e4:	6f 81       	ldd	r22, Y+7	; 0x07
    16e6:	78 85       	ldd	r23, Y+8	; 0x08
    16e8:	89 85       	ldd	r24, Y+9	; 0x09
    16ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	3f ef       	ldi	r19, 0xFF	; 255
    16f0:	4f e7       	ldi	r20, 0x7F	; 127
    16f2:	57 e4       	ldi	r21, 0x47	; 71
    16f4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16f8:	18 16       	cp	r1, r24
    16fa:	4c f5       	brge	.+82     	; 0x174e <LCD_Void_Init_8Bits+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    16fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1700:	8d 85       	ldd	r24, Y+13	; 0x0d
    1702:	9e 85       	ldd	r25, Y+14	; 0x0e
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	40 e2       	ldi	r20, 0x20	; 32
    170a:	51 e4       	ldi	r21, 0x41	; 65
    170c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	bc 01       	movw	r22, r24
    1716:	cd 01       	movw	r24, r26
    1718:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	9e 83       	std	Y+6, r25	; 0x06
    1722:	8d 83       	std	Y+5, r24	; 0x05
    1724:	0f c0       	rjmp	.+30     	; 0x1744 <LCD_Void_Init_8Bits+0x3aa>
    1726:	88 ec       	ldi	r24, 0xC8	; 200
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	9c 83       	std	Y+4, r25	; 0x04
    172c:	8b 83       	std	Y+3, r24	; 0x03
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	9c 81       	ldd	r25, Y+4	; 0x04
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	f1 f7       	brne	.-4      	; 0x1732 <LCD_Void_Init_8Bits+0x398>
    1736:	9c 83       	std	Y+4, r25	; 0x04
    1738:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    173a:	8d 81       	ldd	r24, Y+5	; 0x05
    173c:	9e 81       	ldd	r25, Y+6	; 0x06
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	9e 83       	std	Y+6, r25	; 0x06
    1742:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1744:	8d 81       	ldd	r24, Y+5	; 0x05
    1746:	9e 81       	ldd	r25, Y+6	; 0x06
    1748:	00 97       	sbiw	r24, 0x00	; 0
    174a:	69 f7       	brne	.-38     	; 0x1726 <LCD_Void_Init_8Bits+0x38c>
    174c:	14 c0       	rjmp	.+40     	; 0x1776 <LCD_Void_Init_8Bits+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    174e:	6f 81       	ldd	r22, Y+7	; 0x07
    1750:	78 85       	ldd	r23, Y+8	; 0x08
    1752:	89 85       	ldd	r24, Y+9	; 0x09
    1754:	9a 85       	ldd	r25, Y+10	; 0x0a
    1756:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	9e 83       	std	Y+6, r25	; 0x06
    1760:	8d 83       	std	Y+5, r24	; 0x05
    1762:	8d 81       	ldd	r24, Y+5	; 0x05
    1764:	9e 81       	ldd	r25, Y+6	; 0x06
    1766:	9a 83       	std	Y+2, r25	; 0x02
    1768:	89 83       	std	Y+1, r24	; 0x01
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	9a 81       	ldd	r25, Y+2	; 0x02
    176e:	01 97       	sbiw	r24, 0x01	; 1
    1770:	f1 f7       	brne	.-4      	; 0x176e <LCD_Void_Init_8Bits+0x3d4>
    1772:	9a 83       	std	Y+2, r25	; 0x02
    1774:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_Void_Write_Cmd(Init_Entry_Data_Set);  //Entry Mode set
    1776:	86 e0       	ldi	r24, 0x06	; 6
    1778:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCD_Void_Write_Cmd>
}
    177c:	e8 96       	adiw	r28, 0x38	; 56
    177e:	0f b6       	in	r0, 0x3f	; 63
    1780:	f8 94       	cli
    1782:	de bf       	out	0x3e, r29	; 62
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	cd bf       	out	0x3d, r28	; 61
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	08 95       	ret

0000178e <LCD_Void_Write_Cmd>:


void LCD_Void_Write_Cmd(u8 Copy_u8_Cmd){
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	0f 92       	push	r0
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
    1798:	89 83       	std	Y+1, r24	; 0x01
	DIO_U8_Set_Pin_Value(LCD_U8_CTRL_Port, LCD_U8_RS_PIN, LOW);
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	60 e0       	ldi	r22, 0x00	; 0
    179e:	40 e0       	ldi	r20, 0x00	; 0
    17a0:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_U8_Set_Pin_Value>
	LCD_Void_Write(Copy_u8_Cmd);
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <LCD_Void_Write>
}
    17aa:	0f 90       	pop	r0
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	08 95       	ret

000017b2 <LCD_Void_Write_Data>:

void LCD_Void_Write_Data(u8 Copy_u8_Data){
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	0f 92       	push	r0
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
    17bc:	89 83       	std	Y+1, r24	; 0x01
	DIO_U8_Set_Pin_Value(LCD_U8_CTRL_Port, LCD_U8_RS_PIN, HIGH);
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	41 e0       	ldi	r20, 0x01	; 1
    17c4:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_U8_Set_Pin_Value>
	LCD_Void_Write(Copy_u8_Data);
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <LCD_Void_Write>
}
    17ce:	0f 90       	pop	r0
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	08 95       	ret

000017d6 <LCD_Void_Write>:

void LCD_Void_Write(u8 Copy_U8_Value){
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
    17de:	2f 97       	sbiw	r28, 0x0f	; 15
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	f8 94       	cli
    17e4:	de bf       	out	0x3e, r29	; 62
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	cd bf       	out	0x3d, r28	; 61
    17ea:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_U8_Set_Pin_Value(LCD_U8_CTRL_Port, LCD_U8_RW_PIN, LOW);
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	61 e0       	ldi	r22, 0x01	; 1
    17f0:	40 e0       	ldi	r20, 0x00	; 0
    17f2:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_U8_Set_Pin_Value>
	DIO_U8_Set_Pin_Value(LCD_U8_DATA_Port, LCD_U8_DATA_PIN_0 ,Get_Bit(Copy_U8_Value,BIT0));
    17f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    17f8:	98 2f       	mov	r25, r24
    17fa:	91 70       	andi	r25, 0x01	; 1
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	60 e0       	ldi	r22, 0x00	; 0
    1800:	49 2f       	mov	r20, r25
    1802:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_U8_Set_Pin_Value>
	DIO_U8_Set_Pin_Value(LCD_U8_DATA_Port, LCD_U8_DATA_PIN_1 ,Get_Bit(Copy_U8_Value,BIT1));
    1806:	8f 85       	ldd	r24, Y+15	; 0x0f
    1808:	86 95       	lsr	r24
    180a:	98 2f       	mov	r25, r24
    180c:	91 70       	andi	r25, 0x01	; 1
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	61 e0       	ldi	r22, 0x01	; 1
    1812:	49 2f       	mov	r20, r25
    1814:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_U8_Set_Pin_Value>
	DIO_U8_Set_Pin_Value(LCD_U8_DATA_Port, LCD_U8_DATA_PIN_2 ,Get_Bit(Copy_U8_Value,BIT2));
    1818:	8f 85       	ldd	r24, Y+15	; 0x0f
    181a:	86 95       	lsr	r24
    181c:	86 95       	lsr	r24
    181e:	98 2f       	mov	r25, r24
    1820:	91 70       	andi	r25, 0x01	; 1
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	62 e0       	ldi	r22, 0x02	; 2
    1826:	49 2f       	mov	r20, r25
    1828:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_U8_Set_Pin_Value>
	DIO_U8_Set_Pin_Value(LCD_U8_DATA_Port, LCD_U8_DATA_PIN_3 ,Get_Bit(Copy_U8_Value,BIT3));
    182c:	8f 85       	ldd	r24, Y+15	; 0x0f
    182e:	86 95       	lsr	r24
    1830:	86 95       	lsr	r24
    1832:	86 95       	lsr	r24
    1834:	98 2f       	mov	r25, r24
    1836:	91 70       	andi	r25, 0x01	; 1
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	63 e0       	ldi	r22, 0x03	; 3
    183c:	49 2f       	mov	r20, r25
    183e:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_U8_Set_Pin_Value>
	DIO_U8_Set_Pin_Value(LCD_U8_DATA_Port, LCD_U8_DATA_PIN_4 ,Get_Bit(Copy_U8_Value,BIT4));
    1842:	8f 85       	ldd	r24, Y+15	; 0x0f
    1844:	82 95       	swap	r24
    1846:	8f 70       	andi	r24, 0x0F	; 15
    1848:	98 2f       	mov	r25, r24
    184a:	91 70       	andi	r25, 0x01	; 1
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	64 e0       	ldi	r22, 0x04	; 4
    1850:	49 2f       	mov	r20, r25
    1852:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_U8_Set_Pin_Value>
	DIO_U8_Set_Pin_Value(LCD_U8_DATA_Port, LCD_U8_DATA_PIN_5 ,Get_Bit(Copy_U8_Value,BIT5));
    1856:	8f 85       	ldd	r24, Y+15	; 0x0f
    1858:	82 95       	swap	r24
    185a:	86 95       	lsr	r24
    185c:	87 70       	andi	r24, 0x07	; 7
    185e:	98 2f       	mov	r25, r24
    1860:	91 70       	andi	r25, 0x01	; 1
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	65 e0       	ldi	r22, 0x05	; 5
    1866:	49 2f       	mov	r20, r25
    1868:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_U8_Set_Pin_Value>
	DIO_U8_Set_Pin_Value(LCD_U8_DATA_Port, LCD_U8_DATA_PIN_6 ,Get_Bit(Copy_U8_Value,BIT6));
    186c:	8f 85       	ldd	r24, Y+15	; 0x0f
    186e:	82 95       	swap	r24
    1870:	86 95       	lsr	r24
    1872:	86 95       	lsr	r24
    1874:	83 70       	andi	r24, 0x03	; 3
    1876:	98 2f       	mov	r25, r24
    1878:	91 70       	andi	r25, 0x01	; 1
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	66 e0       	ldi	r22, 0x06	; 6
    187e:	49 2f       	mov	r20, r25
    1880:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_U8_Set_Pin_Value>
	DIO_U8_Set_Pin_Value(LCD_U8_DATA_Port, LCD_U8_DATA_PIN_7 ,Get_Bit(Copy_U8_Value,BIT7));
    1884:	8f 85       	ldd	r24, Y+15	; 0x0f
    1886:	98 2f       	mov	r25, r24
    1888:	99 1f       	adc	r25, r25
    188a:	99 27       	eor	r25, r25
    188c:	99 1f       	adc	r25, r25
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	67 e0       	ldi	r22, 0x07	; 7
    1892:	49 2f       	mov	r20, r25
    1894:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_U8_Set_Pin_Value>

	DIO_U8_Set_Pin_Value(LCD_U8_CTRL_Port, LCD_U8_ENABLE_PIN, HIGH);
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	62 e0       	ldi	r22, 0x02	; 2
    189c:	41 e0       	ldi	r20, 0x01	; 1
    189e:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_U8_Set_Pin_Value>
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	a0 e8       	ldi	r26, 0x80	; 128
    18a8:	bf e3       	ldi	r27, 0x3F	; 63
    18aa:	8b 87       	std	Y+11, r24	; 0x0b
    18ac:	9c 87       	std	Y+12, r25	; 0x0c
    18ae:	ad 87       	std	Y+13, r26	; 0x0d
    18b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    18b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    18b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	4a ef       	ldi	r20, 0xFA	; 250
    18c0:	54 e4       	ldi	r21, 0x44	; 68
    18c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	8f 83       	std	Y+7, r24	; 0x07
    18cc:	98 87       	std	Y+8, r25	; 0x08
    18ce:	a9 87       	std	Y+9, r26	; 0x09
    18d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18d2:	6f 81       	ldd	r22, Y+7	; 0x07
    18d4:	78 85       	ldd	r23, Y+8	; 0x08
    18d6:	89 85       	ldd	r24, Y+9	; 0x09
    18d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	40 e8       	ldi	r20, 0x80	; 128
    18e0:	5f e3       	ldi	r21, 0x3F	; 63
    18e2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18e6:	88 23       	and	r24, r24
    18e8:	2c f4       	brge	.+10     	; 0x18f4 <LCD_Void_Write+0x11e>
		__ticks = 1;
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	9e 83       	std	Y+6, r25	; 0x06
    18f0:	8d 83       	std	Y+5, r24	; 0x05
    18f2:	3f c0       	rjmp	.+126    	; 0x1972 <LCD_Void_Write+0x19c>
	else if (__tmp > 65535)
    18f4:	6f 81       	ldd	r22, Y+7	; 0x07
    18f6:	78 85       	ldd	r23, Y+8	; 0x08
    18f8:	89 85       	ldd	r24, Y+9	; 0x09
    18fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	3f ef       	ldi	r19, 0xFF	; 255
    1900:	4f e7       	ldi	r20, 0x7F	; 127
    1902:	57 e4       	ldi	r21, 0x47	; 71
    1904:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1908:	18 16       	cp	r1, r24
    190a:	4c f5       	brge	.+82     	; 0x195e <LCD_Void_Write+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    190c:	6b 85       	ldd	r22, Y+11	; 0x0b
    190e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1910:	8d 85       	ldd	r24, Y+13	; 0x0d
    1912:	9e 85       	ldd	r25, Y+14	; 0x0e
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	40 e2       	ldi	r20, 0x20	; 32
    191a:	51 e4       	ldi	r21, 0x41	; 65
    191c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	bc 01       	movw	r22, r24
    1926:	cd 01       	movw	r24, r26
    1928:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	9e 83       	std	Y+6, r25	; 0x06
    1932:	8d 83       	std	Y+5, r24	; 0x05
    1934:	0f c0       	rjmp	.+30     	; 0x1954 <LCD_Void_Write+0x17e>
    1936:	88 ec       	ldi	r24, 0xC8	; 200
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	9c 83       	std	Y+4, r25	; 0x04
    193c:	8b 83       	std	Y+3, r24	; 0x03
    193e:	8b 81       	ldd	r24, Y+3	; 0x03
    1940:	9c 81       	ldd	r25, Y+4	; 0x04
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	f1 f7       	brne	.-4      	; 0x1942 <LCD_Void_Write+0x16c>
    1946:	9c 83       	std	Y+4, r25	; 0x04
    1948:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    194a:	8d 81       	ldd	r24, Y+5	; 0x05
    194c:	9e 81       	ldd	r25, Y+6	; 0x06
    194e:	01 97       	sbiw	r24, 0x01	; 1
    1950:	9e 83       	std	Y+6, r25	; 0x06
    1952:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1954:	8d 81       	ldd	r24, Y+5	; 0x05
    1956:	9e 81       	ldd	r25, Y+6	; 0x06
    1958:	00 97       	sbiw	r24, 0x00	; 0
    195a:	69 f7       	brne	.-38     	; 0x1936 <LCD_Void_Write+0x160>
    195c:	14 c0       	rjmp	.+40     	; 0x1986 <LCD_Void_Write+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    195e:	6f 81       	ldd	r22, Y+7	; 0x07
    1960:	78 85       	ldd	r23, Y+8	; 0x08
    1962:	89 85       	ldd	r24, Y+9	; 0x09
    1964:	9a 85       	ldd	r25, Y+10	; 0x0a
    1966:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	9e 83       	std	Y+6, r25	; 0x06
    1970:	8d 83       	std	Y+5, r24	; 0x05
    1972:	8d 81       	ldd	r24, Y+5	; 0x05
    1974:	9e 81       	ldd	r25, Y+6	; 0x06
    1976:	9a 83       	std	Y+2, r25	; 0x02
    1978:	89 83       	std	Y+1, r24	; 0x01
    197a:	89 81       	ldd	r24, Y+1	; 0x01
    197c:	9a 81       	ldd	r25, Y+2	; 0x02
    197e:	01 97       	sbiw	r24, 0x01	; 1
    1980:	f1 f7       	brne	.-4      	; 0x197e <LCD_Void_Write+0x1a8>
    1982:	9a 83       	std	Y+2, r25	; 0x02
    1984:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_U8_Set_Pin_Value(LCD_U8_CTRL_Port, LCD_U8_ENABLE_PIN, LOW);
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	62 e0       	ldi	r22, 0x02	; 2
    198a:	40 e0       	ldi	r20, 0x00	; 0
    198c:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_U8_Set_Pin_Value>

}
    1990:	2f 96       	adiw	r28, 0x0f	; 15
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	de bf       	out	0x3e, r29	; 62
    1998:	0f be       	out	0x3f, r0	; 63
    199a:	cd bf       	out	0x3d, r28	; 61
    199c:	cf 91       	pop	r28
    199e:	df 91       	pop	r29
    19a0:	08 95       	ret

000019a2 <LCD_Void_Write_String>:


void LCD_Void_Write_String(u8* Copy_PU8_DATA, u8 Copy_U8_X_Postion, u8 Copy_U8_Y_Postion) {
    19a2:	df 93       	push	r29
    19a4:	cf 93       	push	r28
    19a6:	00 d0       	rcall	.+0      	; 0x19a8 <LCD_Void_Write_String+0x6>
    19a8:	00 d0       	rcall	.+0      	; 0x19aa <LCD_Void_Write_String+0x8>
    19aa:	00 d0       	rcall	.+0      	; 0x19ac <LCD_Void_Write_String+0xa>
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
    19b0:	9c 83       	std	Y+4, r25	; 0x04
    19b2:	8b 83       	std	Y+3, r24	; 0x03
    19b4:	6d 83       	std	Y+5, r22	; 0x05
    19b6:	4e 83       	std	Y+6, r20	; 0x06
    u8 Local_U8_DDRAM_Address;
    u8 counter = 0;
    19b8:	19 82       	std	Y+1, r1	; 0x01
    if (Copy_U8_X_Postion > 15 || Copy_U8_Y_Postion > 1) {
    19ba:	8d 81       	ldd	r24, Y+5	; 0x05
    19bc:	80 31       	cpi	r24, 0x10	; 16
    19be:	18 f4       	brcc	.+6      	; 0x19c6 <LCD_Void_Write_String+0x24>
    19c0:	8e 81       	ldd	r24, Y+6	; 0x06
    19c2:	82 30       	cpi	r24, 0x02	; 2
    19c4:	38 f0       	brcs	.+14     	; 0x19d4 <LCD_Void_Write_String+0x32>
        LCD_Void_Write_String((u8*)"Invalid entry", 0, 0);
    19c6:	80 e6       	ldi	r24, 0x60	; 96
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	60 e0       	ldi	r22, 0x00	; 0
    19cc:	40 e0       	ldi	r20, 0x00	; 0
    19ce:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <LCD_Void_Write_String>
    19d2:	3a c0       	rjmp	.+116    	; 0x1a48 <LCD_Void_Write_String+0xa6>
        return;
    }
    Local_U8_DDRAM_Address = Copy_U8_X_Postion + (Copy_U8_Y_Postion * 64);
    19d4:	8e 81       	ldd	r24, Y+6	; 0x06
    19d6:	88 2f       	mov	r24, r24
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	00 24       	eor	r0, r0
    19dc:	96 95       	lsr	r25
    19de:	87 95       	ror	r24
    19e0:	07 94       	ror	r0
    19e2:	96 95       	lsr	r25
    19e4:	87 95       	ror	r24
    19e6:	07 94       	ror	r0
    19e8:	98 2f       	mov	r25, r24
    19ea:	80 2d       	mov	r24, r0
    19ec:	98 2f       	mov	r25, r24
    19ee:	8d 81       	ldd	r24, Y+5	; 0x05
    19f0:	89 0f       	add	r24, r25
    19f2:	8a 83       	std	Y+2, r24	; 0x02
    Local_U8_DDRAM_Address |= DDRAM_ADDRESS;
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	80 68       	ori	r24, 0x80	; 128
    19f8:	8a 83       	std	Y+2, r24	; 0x02
    LCD_Void_Write_Cmd(Local_U8_DDRAM_Address);
    19fa:	8a 81       	ldd	r24, Y+2	; 0x02
    19fc:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCD_Void_Write_Cmd>
    1a00:	1e c0       	rjmp	.+60     	; 0x1a3e <LCD_Void_Write_String+0x9c>

    while (*Copy_PU8_DATA != '\0') {
        LCD_Void_Write_Data(*Copy_PU8_DATA);
    1a02:	eb 81       	ldd	r30, Y+3	; 0x03
    1a04:	fc 81       	ldd	r31, Y+4	; 0x04
    1a06:	80 81       	ld	r24, Z
    1a08:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <LCD_Void_Write_Data>
        Copy_PU8_DATA++;
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a10:	01 96       	adiw	r24, 0x01	; 1
    1a12:	9c 83       	std	Y+4, r25	; 0x04
    1a14:	8b 83       	std	Y+3, r24	; 0x03
        counter++;
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	8f 5f       	subi	r24, 0xFF	; 255
    1a1a:	89 83       	std	Y+1, r24	; 0x01
        if (counter == 16) {
    1a1c:	89 81       	ldd	r24, Y+1	; 0x01
    1a1e:	80 31       	cpi	r24, 0x10	; 16
    1a20:	71 f4       	brne	.+28     	; 0x1a3e <LCD_Void_Write_String+0x9c>
            if (Copy_U8_Y_Postion == 0) {
    1a22:	8e 81       	ldd	r24, Y+6	; 0x06
    1a24:	88 23       	and	r24, r24
    1a26:	19 f4       	brne	.+6      	; 0x1a2e <LCD_Void_Write_String+0x8c>
                Local_U8_DDRAM_Address = Second_Line_Start;
    1a28:	80 e4       	ldi	r24, 0x40	; 64
    1a2a:	8a 83       	std	Y+2, r24	; 0x02
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <LCD_Void_Write_String+0x90>
            } else {
            	Local_U8_DDRAM_Address = Copy_U8_X_Postion;
    1a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a30:	8a 83       	std	Y+2, r24	; 0x02
            }
            Local_U8_DDRAM_Address |= DDRAM_ADDRESS;
    1a32:	8a 81       	ldd	r24, Y+2	; 0x02
    1a34:	80 68       	ori	r24, 0x80	; 128
    1a36:	8a 83       	std	Y+2, r24	; 0x02
            LCD_Void_Write_Cmd(Local_U8_DDRAM_Address);
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCD_Void_Write_Cmd>
    }
    Local_U8_DDRAM_Address = Copy_U8_X_Postion + (Copy_U8_Y_Postion * 64);
    Local_U8_DDRAM_Address |= DDRAM_ADDRESS;
    LCD_Void_Write_Cmd(Local_U8_DDRAM_Address);

    while (*Copy_PU8_DATA != '\0') {
    1a3e:	eb 81       	ldd	r30, Y+3	; 0x03
    1a40:	fc 81       	ldd	r31, Y+4	; 0x04
    1a42:	80 81       	ld	r24, Z
    1a44:	88 23       	and	r24, r24
    1a46:	e9 f6       	brne	.-70     	; 0x1a02 <LCD_Void_Write_String+0x60>
            }
            Local_U8_DDRAM_Address |= DDRAM_ADDRESS;
            LCD_Void_Write_Cmd(Local_U8_DDRAM_Address);
        }
    }
}
    1a48:	26 96       	adiw	r28, 0x06	; 6
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	f8 94       	cli
    1a4e:	de bf       	out	0x3e, r29	; 62
    1a50:	0f be       	out	0x3f, r0	; 63
    1a52:	cd bf       	out	0x3d, r28	; 61
    1a54:	cf 91       	pop	r28
    1a56:	df 91       	pop	r29
    1a58:	08 95       	ret

00001a5a <LCD_Void_Write_Number>:



void LCD_Void_Write_Number(u32 Copy_U32_Number, u8 Copy_U8_X_Postion, u8 Copy_U8_Y_Postion){
    1a5a:	df 93       	push	r29
    1a5c:	cf 93       	push	r28
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	a1 97       	sbiw	r28, 0x21	; 33
    1a64:	0f b6       	in	r0, 0x3f	; 63
    1a66:	f8 94       	cli
    1a68:	de bf       	out	0x3e, r29	; 62
    1a6a:	0f be       	out	0x3f, r0	; 63
    1a6c:	cd bf       	out	0x3d, r28	; 61
    1a6e:	6c 8f       	std	Y+28, r22	; 0x1c
    1a70:	7d 8f       	std	Y+29, r23	; 0x1d
    1a72:	8e 8f       	std	Y+30, r24	; 0x1e
    1a74:	9f 8f       	std	Y+31, r25	; 0x1f
    1a76:	48 a3       	std	Y+32, r20	; 0x20
    1a78:	29 a3       	std	Y+33, r18	; 0x21
    u8 Copy_U8_Reminder;
    u8 Copy_U8_arr[20];
    u8 i=0;
    1a7a:	1e 82       	std	Y+6, r1	; 0x06
    u8 Local_U8_DDRAM_Address;
    u8 counter = 0; // Initialize counter variable to 0
    1a7c:	1c 82       	std	Y+4, r1	; 0x04

    if (Copy_U8_X_Postion > 15 || Copy_U8_Y_Postion > 1) {
    1a7e:	88 a1       	ldd	r24, Y+32	; 0x20
    1a80:	80 31       	cpi	r24, 0x10	; 16
    1a82:	18 f4       	brcc	.+6      	; 0x1a8a <LCD_Void_Write_Number+0x30>
    1a84:	89 a1       	ldd	r24, Y+33	; 0x21
    1a86:	82 30       	cpi	r24, 0x02	; 2
    1a88:	38 f0       	brcs	.+14     	; 0x1a98 <LCD_Void_Write_Number+0x3e>
        LCD_Void_Write_String((u8*)"Invalid entry", 0, 0);
    1a8a:	80 e6       	ldi	r24, 0x60	; 96
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	60 e0       	ldi	r22, 0x00	; 0
    1a90:	40 e0       	ldi	r20, 0x00	; 0
    1a92:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <LCD_Void_Write_String>
    1a96:	f2 c0       	rjmp	.+484    	; 0x1c7c <LCD_Void_Write_Number+0x222>
        return;
    }

    Local_U8_DDRAM_Address = Copy_U8_X_Postion + (Copy_U8_Y_Postion * 64);
    1a98:	89 a1       	ldd	r24, Y+33	; 0x21
    1a9a:	88 2f       	mov	r24, r24
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	00 24       	eor	r0, r0
    1aa0:	96 95       	lsr	r25
    1aa2:	87 95       	ror	r24
    1aa4:	07 94       	ror	r0
    1aa6:	96 95       	lsr	r25
    1aa8:	87 95       	ror	r24
    1aaa:	07 94       	ror	r0
    1aac:	98 2f       	mov	r25, r24
    1aae:	80 2d       	mov	r24, r0
    1ab0:	98 2f       	mov	r25, r24
    1ab2:	88 a1       	ldd	r24, Y+32	; 0x20
    1ab4:	89 0f       	add	r24, r25
    1ab6:	8d 83       	std	Y+5, r24	; 0x05
    Local_U8_DDRAM_Address |= DDRAM_ADDRESS;
    1ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aba:	80 68       	ori	r24, 0x80	; 128
    1abc:	8d 83       	std	Y+5, r24	; 0x05
    LCD_Void_Write_Cmd(Local_U8_DDRAM_Address);
    1abe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac0:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCD_Void_Write_Cmd>

    if (Copy_U32_Number == 0) {
    1ac4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ac6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ac8:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1aca:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1acc:	00 97       	sbiw	r24, 0x00	; 0
    1ace:	a1 05       	cpc	r26, r1
    1ad0:	b1 05       	cpc	r27, r1
    1ad2:	09 f0       	breq	.+2      	; 0x1ad6 <LCD_Void_Write_Number+0x7c>
    1ad4:	44 c0       	rjmp	.+136    	; 0x1b5e <LCD_Void_Write_Number+0x104>
        Copy_U8_arr[i] = '0';
    1ad6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ad8:	28 2f       	mov	r18, r24
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	ce 01       	movw	r24, r28
    1ade:	08 96       	adiw	r24, 0x08	; 8
    1ae0:	fc 01       	movw	r30, r24
    1ae2:	e2 0f       	add	r30, r18
    1ae4:	f3 1f       	adc	r31, r19
    1ae6:	80 e3       	ldi	r24, 0x30	; 48
    1ae8:	80 83       	st	Z, r24
        i++;
    1aea:	8e 81       	ldd	r24, Y+6	; 0x06
    1aec:	8f 5f       	subi	r24, 0xFF	; 255
    1aee:	8e 83       	std	Y+6, r24	; 0x06
        counter++;
    1af0:	8c 81       	ldd	r24, Y+4	; 0x04
    1af2:	8f 5f       	subi	r24, 0xFF	; 255
    1af4:	8c 83       	std	Y+4, r24	; 0x04
    1af6:	3b c0       	rjmp	.+118    	; 0x1b6e <LCD_Void_Write_Number+0x114>
    } else {
        while(Copy_U32_Number != 0){
            Copy_U8_Reminder = Copy_U32_Number % 10;
    1af8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1afa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1afc:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1afe:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1b00:	2a e0       	ldi	r18, 0x0A	; 10
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	40 e0       	ldi	r20, 0x00	; 0
    1b06:	50 e0       	ldi	r21, 0x00	; 0
    1b08:	bc 01       	movw	r22, r24
    1b0a:	cd 01       	movw	r24, r26
    1b0c:	0e 94 19 13 	call	0x2632	; 0x2632 <__udivmodsi4>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	8f 83       	std	Y+7, r24	; 0x07
            Copy_U8_arr[i] = Copy_U8_Reminder +'0';
    1b16:	8e 81       	ldd	r24, Y+6	; 0x06
    1b18:	28 2f       	mov	r18, r24
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	8f 81       	ldd	r24, Y+7	; 0x07
    1b1e:	48 2f       	mov	r20, r24
    1b20:	40 5d       	subi	r20, 0xD0	; 208
    1b22:	ce 01       	movw	r24, r28
    1b24:	08 96       	adiw	r24, 0x08	; 8
    1b26:	fc 01       	movw	r30, r24
    1b28:	e2 0f       	add	r30, r18
    1b2a:	f3 1f       	adc	r31, r19
    1b2c:	40 83       	st	Z, r20
            i++;
    1b2e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b30:	8f 5f       	subi	r24, 0xFF	; 255
    1b32:	8e 83       	std	Y+6, r24	; 0x06
            Copy_U32_Number = Copy_U32_Number / 10;
    1b34:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b36:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b38:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1b3a:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1b3c:	2a e0       	ldi	r18, 0x0A	; 10
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	40 e0       	ldi	r20, 0x00	; 0
    1b42:	50 e0       	ldi	r21, 0x00	; 0
    1b44:	bc 01       	movw	r22, r24
    1b46:	cd 01       	movw	r24, r26
    1b48:	0e 94 19 13 	call	0x2632	; 0x2632 <__udivmodsi4>
    1b4c:	da 01       	movw	r26, r20
    1b4e:	c9 01       	movw	r24, r18
    1b50:	8c 8f       	std	Y+28, r24	; 0x1c
    1b52:	9d 8f       	std	Y+29, r25	; 0x1d
    1b54:	ae 8f       	std	Y+30, r26	; 0x1e
    1b56:	bf 8f       	std	Y+31, r27	; 0x1f
            counter++;
    1b58:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5a:	8f 5f       	subi	r24, 0xFF	; 255
    1b5c:	8c 83       	std	Y+4, r24	; 0x04
    if (Copy_U32_Number == 0) {
        Copy_U8_arr[i] = '0';
        i++;
        counter++;
    } else {
        while(Copy_U32_Number != 0){
    1b5e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b60:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b62:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1b64:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1b66:	00 97       	sbiw	r24, 0x00	; 0
    1b68:	a1 05       	cpc	r26, r1
    1b6a:	b1 05       	cpc	r27, r1
    1b6c:	29 f6       	brne	.-118    	; 0x1af8 <LCD_Void_Write_Number+0x9e>
            i++;
            Copy_U32_Number = Copy_U32_Number / 10;
            counter++;
        }
    }
    Copy_U8_arr[i] = '\0';
    1b6e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b70:	28 2f       	mov	r18, r24
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	ce 01       	movw	r24, r28
    1b76:	08 96       	adiw	r24, 0x08	; 8
    1b78:	fc 01       	movw	r30, r24
    1b7a:	e2 0f       	add	r30, r18
    1b7c:	f3 1f       	adc	r31, r19
    1b7e:	10 82       	st	Z, r1

    // Reverse the order of the digits in the array

    for (u8 j = 0; j < i/2; j++) {
    1b80:	1b 82       	std	Y+3, r1	; 0x03
    1b82:	39 c0       	rjmp	.+114    	; 0x1bf6 <LCD_Void_Write_Number+0x19c>
        u8 temp = Copy_U8_arr[j];
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	ce 01       	movw	r24, r28
    1b8c:	08 96       	adiw	r24, 0x08	; 8
    1b8e:	fc 01       	movw	r30, r24
    1b90:	e2 0f       	add	r30, r18
    1b92:	f3 1f       	adc	r31, r19
    1b94:	80 81       	ld	r24, Z
    1b96:	8a 83       	std	Y+2, r24	; 0x02
        Copy_U8_arr[j] = Copy_U8_arr[i-1-j];
    1b98:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9a:	48 2f       	mov	r20, r24
    1b9c:	50 e0       	ldi	r21, 0x00	; 0
    1b9e:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba0:	88 2f       	mov	r24, r24
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	9c 01       	movw	r18, r24
    1ba6:	21 50       	subi	r18, 0x01	; 1
    1ba8:	30 40       	sbci	r19, 0x00	; 0
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	88 2f       	mov	r24, r24
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	28 1b       	sub	r18, r24
    1bb2:	39 0b       	sbc	r19, r25
    1bb4:	ce 01       	movw	r24, r28
    1bb6:	08 96       	adiw	r24, 0x08	; 8
    1bb8:	fc 01       	movw	r30, r24
    1bba:	e2 0f       	add	r30, r18
    1bbc:	f3 1f       	adc	r31, r19
    1bbe:	20 81       	ld	r18, Z
    1bc0:	ce 01       	movw	r24, r28
    1bc2:	08 96       	adiw	r24, 0x08	; 8
    1bc4:	fc 01       	movw	r30, r24
    1bc6:	e4 0f       	add	r30, r20
    1bc8:	f5 1f       	adc	r31, r21
    1bca:	20 83       	st	Z, r18
        Copy_U8_arr[i-1-j] = temp;
    1bcc:	8e 81       	ldd	r24, Y+6	; 0x06
    1bce:	88 2f       	mov	r24, r24
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	9c 01       	movw	r18, r24
    1bd4:	21 50       	subi	r18, 0x01	; 1
    1bd6:	30 40       	sbci	r19, 0x00	; 0
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	88 2f       	mov	r24, r24
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	28 1b       	sub	r18, r24
    1be0:	39 0b       	sbc	r19, r25
    1be2:	ce 01       	movw	r24, r28
    1be4:	08 96       	adiw	r24, 0x08	; 8
    1be6:	fc 01       	movw	r30, r24
    1be8:	e2 0f       	add	r30, r18
    1bea:	f3 1f       	adc	r31, r19
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	80 83       	st	Z, r24
    }
    Copy_U8_arr[i] = '\0';

    // Reverse the order of the digits in the array

    for (u8 j = 0; j < i/2; j++) {
    1bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf2:	8f 5f       	subi	r24, 0xFF	; 255
    1bf4:	8b 83       	std	Y+3, r24	; 0x03
    1bf6:	8e 81       	ldd	r24, Y+6	; 0x06
    1bf8:	98 2f       	mov	r25, r24
    1bfa:	96 95       	lsr	r25
    1bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfe:	89 17       	cp	r24, r25
    1c00:	08 f2       	brcs	.-126    	; 0x1b84 <LCD_Void_Write_Number+0x12a>
        Copy_U8_arr[i-1-j] = temp;
    }


    // Print the array elements and check for line break
    for(u8 j = 0; Copy_U8_arr[j] != '\0'; j++){
    1c02:	19 82       	std	Y+1, r1	; 0x01
    1c04:	30 c0       	rjmp	.+96     	; 0x1c66 <LCD_Void_Write_Number+0x20c>
        LCD_Void_Write_Data(Copy_U8_arr[j]);
    1c06:	89 81       	ldd	r24, Y+1	; 0x01
    1c08:	28 2f       	mov	r18, r24
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	ce 01       	movw	r24, r28
    1c0e:	08 96       	adiw	r24, 0x08	; 8
    1c10:	fc 01       	movw	r30, r24
    1c12:	e2 0f       	add	r30, r18
    1c14:	f3 1f       	adc	r31, r19
    1c16:	80 81       	ld	r24, Z
    1c18:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <LCD_Void_Write_Data>
        counter++;
    1c1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c1e:	8f 5f       	subi	r24, 0xFF	; 255
    1c20:	8c 83       	std	Y+4, r24	; 0x04
        if (counter == 16) {
    1c22:	8c 81       	ldd	r24, Y+4	; 0x04
    1c24:	80 31       	cpi	r24, 0x10	; 16
    1c26:	e1 f4       	brne	.+56     	; 0x1c60 <LCD_Void_Write_Number+0x206>
            if (Copy_U8_Y_Postion == 0) {
    1c28:	89 a1       	ldd	r24, Y+33	; 0x21
    1c2a:	88 23       	and	r24, r24
    1c2c:	19 f4       	brne	.+6      	; 0x1c34 <LCD_Void_Write_Number+0x1da>
                Local_U8_DDRAM_Address = Second_Line_Start;
    1c2e:	80 e4       	ldi	r24, 0x40	; 64
    1c30:	8d 83       	std	Y+5, r24	; 0x05
    1c32:	10 c0       	rjmp	.+32     	; 0x1c54 <LCD_Void_Write_Number+0x1fa>
            } else {
            	Local_U8_DDRAM_Address = Copy_U8_X_Postion + (Copy_U8_Y_Postion * 64);
    1c34:	89 a1       	ldd	r24, Y+33	; 0x21
    1c36:	88 2f       	mov	r24, r24
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	00 24       	eor	r0, r0
    1c3c:	96 95       	lsr	r25
    1c3e:	87 95       	ror	r24
    1c40:	07 94       	ror	r0
    1c42:	96 95       	lsr	r25
    1c44:	87 95       	ror	r24
    1c46:	07 94       	ror	r0
    1c48:	98 2f       	mov	r25, r24
    1c4a:	80 2d       	mov	r24, r0
    1c4c:	98 2f       	mov	r25, r24
    1c4e:	88 a1       	ldd	r24, Y+32	; 0x20
    1c50:	89 0f       	add	r24, r25
    1c52:	8d 83       	std	Y+5, r24	; 0x05
            }
            Local_U8_DDRAM_Address |= DDRAM_ADDRESS;
    1c54:	8d 81       	ldd	r24, Y+5	; 0x05
    1c56:	80 68       	ori	r24, 0x80	; 128
    1c58:	8d 83       	std	Y+5, r24	; 0x05
            LCD_Void_Write_Cmd(Local_U8_DDRAM_Address);
    1c5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5c:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCD_Void_Write_Cmd>
        Copy_U8_arr[i-1-j] = temp;
    }


    // Print the array elements and check for line break
    for(u8 j = 0; Copy_U8_arr[j] != '\0'; j++){
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
    1c62:	8f 5f       	subi	r24, 0xFF	; 255
    1c64:	89 83       	std	Y+1, r24	; 0x01
    1c66:	89 81       	ldd	r24, Y+1	; 0x01
    1c68:	28 2f       	mov	r18, r24
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	ce 01       	movw	r24, r28
    1c6e:	08 96       	adiw	r24, 0x08	; 8
    1c70:	fc 01       	movw	r30, r24
    1c72:	e2 0f       	add	r30, r18
    1c74:	f3 1f       	adc	r31, r19
    1c76:	80 81       	ld	r24, Z
    1c78:	88 23       	and	r24, r24
    1c7a:	29 f6       	brne	.-118    	; 0x1c06 <LCD_Void_Write_Number+0x1ac>
            }
            Local_U8_DDRAM_Address |= DDRAM_ADDRESS;
            LCD_Void_Write_Cmd(Local_U8_DDRAM_Address);
        }
    }
}
    1c7c:	a1 96       	adiw	r28, 0x21	; 33
    1c7e:	0f b6       	in	r0, 0x3f	; 63
    1c80:	f8 94       	cli
    1c82:	de bf       	out	0x3e, r29	; 62
    1c84:	0f be       	out	0x3f, r0	; 63
    1c86:	cd bf       	out	0x3d, r28	; 61
    1c88:	cf 91       	pop	r28
    1c8a:	df 91       	pop	r29
    1c8c:	08 95       	ret

00001c8e <LCD_ClearDisplay>:

void LCD_ClearDisplay(){
    1c8e:	df 93       	push	r29
    1c90:	cf 93       	push	r28
    1c92:	cd b7       	in	r28, 0x3d	; 61
    1c94:	de b7       	in	r29, 0x3e	; 62
    1c96:	2e 97       	sbiw	r28, 0x0e	; 14
    1c98:	0f b6       	in	r0, 0x3f	; 63
    1c9a:	f8 94       	cli
    1c9c:	de bf       	out	0x3e, r29	; 62
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	cd bf       	out	0x3d, r28	; 61
	LCD_Void_Write_Cmd(Init_Display_Clear);  //display clear
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCD_Void_Write_Cmd>
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	a0 e0       	ldi	r26, 0x00	; 0
    1cae:	b0 e4       	ldi	r27, 0x40	; 64
    1cb0:	8b 87       	std	Y+11, r24	; 0x0b
    1cb2:	9c 87       	std	Y+12, r25	; 0x0c
    1cb4:	ad 87       	std	Y+13, r26	; 0x0d
    1cb6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	4a ef       	ldi	r20, 0xFA	; 250
    1cc6:	54 e4       	ldi	r21, 0x44	; 68
    1cc8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	8f 83       	std	Y+7, r24	; 0x07
    1cd2:	98 87       	std	Y+8, r25	; 0x08
    1cd4:	a9 87       	std	Y+9, r26	; 0x09
    1cd6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cda:	78 85       	ldd	r23, Y+8	; 0x08
    1cdc:	89 85       	ldd	r24, Y+9	; 0x09
    1cde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	40 e8       	ldi	r20, 0x80	; 128
    1ce6:	5f e3       	ldi	r21, 0x3F	; 63
    1ce8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cec:	88 23       	and	r24, r24
    1cee:	2c f4       	brge	.+10     	; 0x1cfa <LCD_ClearDisplay+0x6c>
		__ticks = 1;
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	9e 83       	std	Y+6, r25	; 0x06
    1cf6:	8d 83       	std	Y+5, r24	; 0x05
    1cf8:	3f c0       	rjmp	.+126    	; 0x1d78 <LCD_ClearDisplay+0xea>
	else if (__tmp > 65535)
    1cfa:	6f 81       	ldd	r22, Y+7	; 0x07
    1cfc:	78 85       	ldd	r23, Y+8	; 0x08
    1cfe:	89 85       	ldd	r24, Y+9	; 0x09
    1d00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	3f ef       	ldi	r19, 0xFF	; 255
    1d06:	4f e7       	ldi	r20, 0x7F	; 127
    1d08:	57 e4       	ldi	r21, 0x47	; 71
    1d0a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d0e:	18 16       	cp	r1, r24
    1d10:	4c f5       	brge	.+82     	; 0x1d64 <LCD_ClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d12:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d14:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d16:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d18:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	40 e2       	ldi	r20, 0x20	; 32
    1d20:	51 e4       	ldi	r21, 0x41	; 65
    1d22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	bc 01       	movw	r22, r24
    1d2c:	cd 01       	movw	r24, r26
    1d2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	9e 83       	std	Y+6, r25	; 0x06
    1d38:	8d 83       	std	Y+5, r24	; 0x05
    1d3a:	0f c0       	rjmp	.+30     	; 0x1d5a <LCD_ClearDisplay+0xcc>
    1d3c:	88 ec       	ldi	r24, 0xC8	; 200
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	9c 83       	std	Y+4, r25	; 0x04
    1d42:	8b 83       	std	Y+3, r24	; 0x03
    1d44:	8b 81       	ldd	r24, Y+3	; 0x03
    1d46:	9c 81       	ldd	r25, Y+4	; 0x04
    1d48:	01 97       	sbiw	r24, 0x01	; 1
    1d4a:	f1 f7       	brne	.-4      	; 0x1d48 <LCD_ClearDisplay+0xba>
    1d4c:	9c 83       	std	Y+4, r25	; 0x04
    1d4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d50:	8d 81       	ldd	r24, Y+5	; 0x05
    1d52:	9e 81       	ldd	r25, Y+6	; 0x06
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	9e 83       	std	Y+6, r25	; 0x06
    1d58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5e:	00 97       	sbiw	r24, 0x00	; 0
    1d60:	69 f7       	brne	.-38     	; 0x1d3c <LCD_ClearDisplay+0xae>
    1d62:	14 c0       	rjmp	.+40     	; 0x1d8c <LCD_ClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d64:	6f 81       	ldd	r22, Y+7	; 0x07
    1d66:	78 85       	ldd	r23, Y+8	; 0x08
    1d68:	89 85       	ldd	r24, Y+9	; 0x09
    1d6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	9e 83       	std	Y+6, r25	; 0x06
    1d76:	8d 83       	std	Y+5, r24	; 0x05
    1d78:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7c:	9a 83       	std	Y+2, r25	; 0x02
    1d7e:	89 83       	std	Y+1, r24	; 0x01
    1d80:	89 81       	ldd	r24, Y+1	; 0x01
    1d82:	9a 81       	ldd	r25, Y+2	; 0x02
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	f1 f7       	brne	.-4      	; 0x1d84 <LCD_ClearDisplay+0xf6>
    1d88:	9a 83       	std	Y+2, r25	; 0x02
    1d8a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1d8c:	2e 96       	adiw	r28, 0x0e	; 14
    1d8e:	0f b6       	in	r0, 0x3f	; 63
    1d90:	f8 94       	cli
    1d92:	de bf       	out	0x3e, r29	; 62
    1d94:	0f be       	out	0x3f, r0	; 63
    1d96:	cd bf       	out	0x3d, r28	; 61
    1d98:	cf 91       	pop	r28
    1d9a:	df 91       	pop	r29
    1d9c:	08 95       	ret

00001d9e <Calculate_String_Length>:

u8 Calculate_String_Length(u8* Copy_PU8_DATA){
    1d9e:	df 93       	push	r29
    1da0:	cf 93       	push	r28
    1da2:	00 d0       	rcall	.+0      	; 0x1da4 <Calculate_String_Length+0x6>
    1da4:	0f 92       	push	r0
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
    1daa:	9b 83       	std	Y+3, r25	; 0x03
    1dac:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    1dae:	19 82       	std	Y+1, r1	; 0x01
    1db0:	08 c0       	rjmp	.+16     	; 0x1dc2 <Calculate_String_Length+0x24>
	while(*Copy_PU8_DATA != '\0'){
		i++;
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	8f 5f       	subi	r24, 0xFF	; 255
    1db6:	89 83       	std	Y+1, r24	; 0x01
		Copy_PU8_DATA++;
    1db8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dba:	9b 81       	ldd	r25, Y+3	; 0x03
    1dbc:	01 96       	adiw	r24, 0x01	; 1
    1dbe:	9b 83       	std	Y+3, r25	; 0x03
    1dc0:	8a 83       	std	Y+2, r24	; 0x02
	_delay_ms(2);
}

u8 Calculate_String_Length(u8* Copy_PU8_DATA){
	u8 i=0;
	while(*Copy_PU8_DATA != '\0'){
    1dc2:	ea 81       	ldd	r30, Y+2	; 0x02
    1dc4:	fb 81       	ldd	r31, Y+3	; 0x03
    1dc6:	80 81       	ld	r24, Z
    1dc8:	88 23       	and	r24, r24
    1dca:	99 f7       	brne	.-26     	; 0x1db2 <Calculate_String_Length+0x14>
		i++;
		Copy_PU8_DATA++;

	}
	return i;
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	cf 91       	pop	r28
    1dd6:	df 91       	pop	r29
    1dd8:	08 95       	ret

00001dda <reverse>:


void reverse(u8 arr[], u8 lenght){
    1dda:	df 93       	push	r29
    1ddc:	cf 93       	push	r28
    1dde:	00 d0       	rcall	.+0      	; 0x1de0 <reverse+0x6>
    1de0:	00 d0       	rcall	.+0      	; 0x1de2 <reverse+0x8>
    1de2:	00 d0       	rcall	.+0      	; 0x1de4 <reverse+0xa>
    1de4:	cd b7       	in	r28, 0x3d	; 61
    1de6:	de b7       	in	r29, 0x3e	; 62
    1de8:	9d 83       	std	Y+5, r25	; 0x05
    1dea:	8c 83       	std	Y+4, r24	; 0x04
    1dec:	6e 83       	std	Y+6, r22	; 0x06
	u8 start=0;
    1dee:	1b 82       	std	Y+3, r1	; 0x03
	u8 end = lenght -1;
    1df0:	8e 81       	ldd	r24, Y+6	; 0x06
    1df2:	81 50       	subi	r24, 0x01	; 1
    1df4:	8a 83       	std	Y+2, r24	; 0x02
    1df6:	2c c0       	rjmp	.+88     	; 0x1e50 <reverse+0x76>

	while(start< end){

		u8 temp = arr[start];
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	28 2f       	mov	r18, r24
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1e00:	9d 81       	ldd	r25, Y+5	; 0x05
    1e02:	fc 01       	movw	r30, r24
    1e04:	e2 0f       	add	r30, r18
    1e06:	f3 1f       	adc	r31, r19
    1e08:	80 81       	ld	r24, Z
    1e0a:	89 83       	std	Y+1, r24	; 0x01
		arr[start] = arr[end];
    1e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0e:	28 2f       	mov	r18, r24
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	8c 81       	ldd	r24, Y+4	; 0x04
    1e14:	9d 81       	ldd	r25, Y+5	; 0x05
    1e16:	dc 01       	movw	r26, r24
    1e18:	a2 0f       	add	r26, r18
    1e1a:	b3 1f       	adc	r27, r19
    1e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1e:	28 2f       	mov	r18, r24
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	8c 81       	ldd	r24, Y+4	; 0x04
    1e24:	9d 81       	ldd	r25, Y+5	; 0x05
    1e26:	fc 01       	movw	r30, r24
    1e28:	e2 0f       	add	r30, r18
    1e2a:	f3 1f       	adc	r31, r19
    1e2c:	80 81       	ld	r24, Z
    1e2e:	8c 93       	st	X, r24
		arr[end] = temp;
    1e30:	8a 81       	ldd	r24, Y+2	; 0x02
    1e32:	28 2f       	mov	r18, r24
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	8c 81       	ldd	r24, Y+4	; 0x04
    1e38:	9d 81       	ldd	r25, Y+5	; 0x05
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	e2 0f       	add	r30, r18
    1e3e:	f3 1f       	adc	r31, r19
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	80 83       	st	Z, r24
		start++;
    1e44:	8b 81       	ldd	r24, Y+3	; 0x03
    1e46:	8f 5f       	subi	r24, 0xFF	; 255
    1e48:	8b 83       	std	Y+3, r24	; 0x03
		end++;
    1e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4c:	8f 5f       	subi	r24, 0xFF	; 255
    1e4e:	8a 83       	std	Y+2, r24	; 0x02

void reverse(u8 arr[], u8 lenght){
	u8 start=0;
	u8 end = lenght -1;

	while(start< end){
    1e50:	9b 81       	ldd	r25, Y+3	; 0x03
    1e52:	8a 81       	ldd	r24, Y+2	; 0x02
    1e54:	98 17       	cp	r25, r24
    1e56:	80 f2       	brcs	.-96     	; 0x1df8 <reverse+0x1e>
		arr[end] = temp;
		start++;
		end++;

	}
}
    1e58:	26 96       	adiw	r28, 0x06	; 6
    1e5a:	0f b6       	in	r0, 0x3f	; 63
    1e5c:	f8 94       	cli
    1e5e:	de bf       	out	0x3e, r29	; 62
    1e60:	0f be       	out	0x3f, r0	; 63
    1e62:	cd bf       	out	0x3d, r28	; 61
    1e64:	cf 91       	pop	r28
    1e66:	df 91       	pop	r29
    1e68:	08 95       	ret

00001e6a <main>:
#include "LCD_Config.h"
#include "LCD_Interface.h"
#include "LCD_Private.h"
#include <avr\delay.h>

int main(){
    1e6a:	0f 93       	push	r16
    1e6c:	1f 93       	push	r17
    1e6e:	df 93       	push	r29
    1e70:	cf 93       	push	r28
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62
    1e76:	c5 56       	subi	r28, 0x65	; 101
    1e78:	d0 40       	sbci	r29, 0x00	; 0
    1e7a:	0f b6       	in	r0, 0x3f	; 63
    1e7c:	f8 94       	cli
    1e7e:	de bf       	out	0x3e, r29	; 62
    1e80:	0f be       	out	0x3f, r0	; 63
    1e82:	cd bf       	out	0x3d, r28	; 61
	char arr[10]={0b11000000,0b11111001,0b10100100,0b10110000,0b10011001,0b10010010,0b10000010,0b11111000,0b10000000,0b10010000};
    1e84:	ce 01       	movw	r24, r28
    1e86:	89 5a       	subi	r24, 0xA9	; 169
    1e88:	9f 4f       	sbci	r25, 0xFF	; 255
    1e8a:	a3 96       	adiw	r28, 0x23	; 35
    1e8c:	9f af       	std	Y+63, r25	; 0x3f
    1e8e:	8e af       	std	Y+62, r24	; 0x3e
    1e90:	a3 97       	sbiw	r28, 0x23	; 35
    1e92:	8c eb       	ldi	r24, 0xBC	; 188
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	a5 96       	adiw	r28, 0x25	; 37
    1e98:	9f af       	std	Y+63, r25	; 0x3f
    1e9a:	8e af       	std	Y+62, r24	; 0x3e
    1e9c:	a5 97       	sbiw	r28, 0x25	; 37
    1e9e:	9a e0       	ldi	r25, 0x0A	; 10
    1ea0:	a6 96       	adiw	r28, 0x26	; 38
    1ea2:	9f af       	std	Y+63, r25	; 0x3f
    1ea4:	a6 97       	sbiw	r28, 0x26	; 38
    1ea6:	a5 96       	adiw	r28, 0x25	; 37
    1ea8:	ee ad       	ldd	r30, Y+62	; 0x3e
    1eaa:	ff ad       	ldd	r31, Y+63	; 0x3f
    1eac:	a5 97       	sbiw	r28, 0x25	; 37
    1eae:	00 80       	ld	r0, Z
    1eb0:	a5 96       	adiw	r28, 0x25	; 37
    1eb2:	8e ad       	ldd	r24, Y+62	; 0x3e
    1eb4:	9f ad       	ldd	r25, Y+63	; 0x3f
    1eb6:	a5 97       	sbiw	r28, 0x25	; 37
    1eb8:	01 96       	adiw	r24, 0x01	; 1
    1eba:	a5 96       	adiw	r28, 0x25	; 37
    1ebc:	9f af       	std	Y+63, r25	; 0x3f
    1ebe:	8e af       	std	Y+62, r24	; 0x3e
    1ec0:	a5 97       	sbiw	r28, 0x25	; 37
    1ec2:	a3 96       	adiw	r28, 0x23	; 35
    1ec4:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ec6:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ec8:	a3 97       	sbiw	r28, 0x23	; 35
    1eca:	00 82       	st	Z, r0
    1ecc:	a3 96       	adiw	r28, 0x23	; 35
    1ece:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ed0:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ed2:	a3 97       	sbiw	r28, 0x23	; 35
    1ed4:	01 96       	adiw	r24, 0x01	; 1
    1ed6:	a3 96       	adiw	r28, 0x23	; 35
    1ed8:	9f af       	std	Y+63, r25	; 0x3f
    1eda:	8e af       	std	Y+62, r24	; 0x3e
    1edc:	a3 97       	sbiw	r28, 0x23	; 35
    1ede:	a6 96       	adiw	r28, 0x26	; 38
    1ee0:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ee2:	a6 97       	sbiw	r28, 0x26	; 38
    1ee4:	91 50       	subi	r25, 0x01	; 1
    1ee6:	a6 96       	adiw	r28, 0x26	; 38
    1ee8:	9f af       	std	Y+63, r25	; 0x3f
    1eea:	a6 97       	sbiw	r28, 0x26	; 38
    1eec:	a6 96       	adiw	r28, 0x26	; 38
    1eee:	ef ad       	ldd	r30, Y+63	; 0x3f
    1ef0:	a6 97       	sbiw	r28, 0x26	; 38
    1ef2:	ee 23       	and	r30, r30
    1ef4:	c1 f6       	brne	.-80     	; 0x1ea6 <main+0x3c>
	LCD_Void_Init_8Bits();
    1ef6:	0e 94 cd 09 	call	0x139a	; 0x139a <LCD_Void_Init_8Bits>

	DIO_U8_Set_Port_Direction(GROUP_C,maximum_port_direction);
    1efa:	82 e0       	ldi	r24, 0x02	; 2
    1efc:	6f ef       	ldi	r22, 0xFF	; 255
    1efe:	0e 94 14 08 	call	0x1028	; 0x1028 <DIO_U8_Set_Port_Direction>

	DIO_U8_Set_Pin_Direction(GROUP_D,PIN0,OUTPUT);
    1f02:	83 e0       	ldi	r24, 0x03	; 3
    1f04:	60 e0       	ldi	r22, 0x00	; 0
    1f06:	41 e0       	ldi	r20, 0x01	; 1
    1f08:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_U8_Set_Pin_Direction>

	while(1){
		for(u8 i=5;i>0;i--){
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	ea 5a       	subi	r30, 0xAA	; 170
    1f10:	ff 4f       	sbci	r31, 0xFF	; 255
    1f12:	85 e0       	ldi	r24, 0x05	; 5
    1f14:	80 83       	st	Z, r24
    1f16:	62 c1       	rjmp	.+708    	; 0x21dc <main+0x372>
			LCD_Void_Write_String((u8*)"DOOR IS OPENING IN:",0,0);
    1f18:	8e e6       	ldi	r24, 0x6E	; 110
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	60 e0       	ldi	r22, 0x00	; 0
    1f1e:	40 e0       	ldi	r20, 0x00	; 0
    1f20:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <LCD_Void_Write_String>
			DIO_U8_Set_Port_Value(GROUP_C,arr[i]);
    1f24:	fe 01       	movw	r30, r28
    1f26:	ea 5a       	subi	r30, 0xAA	; 170
    1f28:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2a:	80 81       	ld	r24, Z
    1f2c:	28 2f       	mov	r18, r24
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	ce 01       	movw	r24, r28
    1f32:	89 5a       	subi	r24, 0xA9	; 169
    1f34:	9f 4f       	sbci	r25, 0xFF	; 255
    1f36:	fc 01       	movw	r30, r24
    1f38:	e2 0f       	add	r30, r18
    1f3a:	f3 1f       	adc	r31, r19
    1f3c:	90 81       	ld	r25, Z
    1f3e:	82 e0       	ldi	r24, 0x02	; 2
    1f40:	69 2f       	mov	r22, r25
    1f42:	0e 94 5f 08 	call	0x10be	; 0x10be <DIO_U8_Set_Port_Value>
			DIO_U8_Set_Pin_Value(GROUP_D,PIN0,HIGH);
    1f46:	83 e0       	ldi	r24, 0x03	; 3
    1f48:	60 e0       	ldi	r22, 0x00	; 0
    1f4a:	41 e0       	ldi	r20, 0x01	; 1
    1f4c:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_U8_Set_Pin_Value>
    1f50:	fe 01       	movw	r30, r28
    1f52:	ef 5a       	subi	r30, 0xAF	; 175
    1f54:	ff 4f       	sbci	r31, 0xFF	; 255
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	a8 e4       	ldi	r26, 0x48	; 72
    1f5c:	b2 e4       	ldi	r27, 0x42	; 66
    1f5e:	80 83       	st	Z, r24
    1f60:	91 83       	std	Z+1, r25	; 0x01
    1f62:	a2 83       	std	Z+2, r26	; 0x02
    1f64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f66:	8e 01       	movw	r16, r28
    1f68:	03 5b       	subi	r16, 0xB3	; 179
    1f6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	ef 5a       	subi	r30, 0xAF	; 175
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	60 81       	ld	r22, Z
    1f74:	71 81       	ldd	r23, Z+1	; 0x01
    1f76:	82 81       	ldd	r24, Z+2	; 0x02
    1f78:	93 81       	ldd	r25, Z+3	; 0x03
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	4a ef       	ldi	r20, 0xFA	; 250
    1f80:	54 e4       	ldi	r21, 0x44	; 68
    1f82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	f8 01       	movw	r30, r16
    1f8c:	80 83       	st	Z, r24
    1f8e:	91 83       	std	Z+1, r25	; 0x01
    1f90:	a2 83       	std	Z+2, r26	; 0x02
    1f92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f94:	fe 01       	movw	r30, r28
    1f96:	e3 5b       	subi	r30, 0xB3	; 179
    1f98:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9a:	60 81       	ld	r22, Z
    1f9c:	71 81       	ldd	r23, Z+1	; 0x01
    1f9e:	82 81       	ldd	r24, Z+2	; 0x02
    1fa0:	93 81       	ldd	r25, Z+3	; 0x03
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	40 e8       	ldi	r20, 0x80	; 128
    1fa8:	5f e3       	ldi	r21, 0x3F	; 63
    1faa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fae:	88 23       	and	r24, r24
    1fb0:	44 f4       	brge	.+16     	; 0x1fc2 <main+0x158>
		__ticks = 1;
    1fb2:	fe 01       	movw	r30, r28
    1fb4:	e5 5b       	subi	r30, 0xB5	; 181
    1fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	91 83       	std	Z+1, r25	; 0x01
    1fbe:	80 83       	st	Z, r24
    1fc0:	64 c0       	rjmp	.+200    	; 0x208a <main+0x220>
	else if (__tmp > 65535)
    1fc2:	fe 01       	movw	r30, r28
    1fc4:	e3 5b       	subi	r30, 0xB3	; 179
    1fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc8:	60 81       	ld	r22, Z
    1fca:	71 81       	ldd	r23, Z+1	; 0x01
    1fcc:	82 81       	ldd	r24, Z+2	; 0x02
    1fce:	93 81       	ldd	r25, Z+3	; 0x03
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	3f ef       	ldi	r19, 0xFF	; 255
    1fd4:	4f e7       	ldi	r20, 0x7F	; 127
    1fd6:	57 e4       	ldi	r21, 0x47	; 71
    1fd8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fdc:	18 16       	cp	r1, r24
    1fde:	0c f0       	brlt	.+2      	; 0x1fe2 <main+0x178>
    1fe0:	43 c0       	rjmp	.+134    	; 0x2068 <main+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	ef 5a       	subi	r30, 0xAF	; 175
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	60 81       	ld	r22, Z
    1fea:	71 81       	ldd	r23, Z+1	; 0x01
    1fec:	82 81       	ldd	r24, Z+2	; 0x02
    1fee:	93 81       	ldd	r25, Z+3	; 0x03
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	40 e2       	ldi	r20, 0x20	; 32
    1ff6:	51 e4       	ldi	r21, 0x41	; 65
    1ff8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	8e 01       	movw	r16, r28
    2002:	05 5b       	subi	r16, 0xB5	; 181
    2004:	1f 4f       	sbci	r17, 0xFF	; 255
    2006:	bc 01       	movw	r22, r24
    2008:	cd 01       	movw	r24, r26
    200a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	f8 01       	movw	r30, r16
    2014:	91 83       	std	Z+1, r25	; 0x01
    2016:	80 83       	st	Z, r24
    2018:	1f c0       	rjmp	.+62     	; 0x2058 <main+0x1ee>
    201a:	fe 01       	movw	r30, r28
    201c:	e7 5b       	subi	r30, 0xB7	; 183
    201e:	ff 4f       	sbci	r31, 0xFF	; 255
    2020:	88 ec       	ldi	r24, 0xC8	; 200
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	91 83       	std	Z+1, r25	; 0x01
    2026:	80 83       	st	Z, r24
    2028:	fe 01       	movw	r30, r28
    202a:	e7 5b       	subi	r30, 0xB7	; 183
    202c:	ff 4f       	sbci	r31, 0xFF	; 255
    202e:	80 81       	ld	r24, Z
    2030:	91 81       	ldd	r25, Z+1	; 0x01
    2032:	01 97       	sbiw	r24, 0x01	; 1
    2034:	f1 f7       	brne	.-4      	; 0x2032 <main+0x1c8>
    2036:	fe 01       	movw	r30, r28
    2038:	e7 5b       	subi	r30, 0xB7	; 183
    203a:	ff 4f       	sbci	r31, 0xFF	; 255
    203c:	91 83       	std	Z+1, r25	; 0x01
    203e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2040:	de 01       	movw	r26, r28
    2042:	a5 5b       	subi	r26, 0xB5	; 181
    2044:	bf 4f       	sbci	r27, 0xFF	; 255
    2046:	fe 01       	movw	r30, r28
    2048:	e5 5b       	subi	r30, 0xB5	; 181
    204a:	ff 4f       	sbci	r31, 0xFF	; 255
    204c:	80 81       	ld	r24, Z
    204e:	91 81       	ldd	r25, Z+1	; 0x01
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	11 96       	adiw	r26, 0x01	; 1
    2054:	9c 93       	st	X, r25
    2056:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2058:	fe 01       	movw	r30, r28
    205a:	e5 5b       	subi	r30, 0xB5	; 181
    205c:	ff 4f       	sbci	r31, 0xFF	; 255
    205e:	80 81       	ld	r24, Z
    2060:	91 81       	ldd	r25, Z+1	; 0x01
    2062:	00 97       	sbiw	r24, 0x00	; 0
    2064:	d1 f6       	brne	.-76     	; 0x201a <main+0x1b0>
    2066:	27 c0       	rjmp	.+78     	; 0x20b6 <main+0x24c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2068:	8e 01       	movw	r16, r28
    206a:	05 5b       	subi	r16, 0xB5	; 181
    206c:	1f 4f       	sbci	r17, 0xFF	; 255
    206e:	fe 01       	movw	r30, r28
    2070:	e3 5b       	subi	r30, 0xB3	; 179
    2072:	ff 4f       	sbci	r31, 0xFF	; 255
    2074:	60 81       	ld	r22, Z
    2076:	71 81       	ldd	r23, Z+1	; 0x01
    2078:	82 81       	ldd	r24, Z+2	; 0x02
    207a:	93 81       	ldd	r25, Z+3	; 0x03
    207c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	f8 01       	movw	r30, r16
    2086:	91 83       	std	Z+1, r25	; 0x01
    2088:	80 83       	st	Z, r24
    208a:	de 01       	movw	r26, r28
    208c:	a9 5b       	subi	r26, 0xB9	; 185
    208e:	bf 4f       	sbci	r27, 0xFF	; 255
    2090:	fe 01       	movw	r30, r28
    2092:	e5 5b       	subi	r30, 0xB5	; 181
    2094:	ff 4f       	sbci	r31, 0xFF	; 255
    2096:	80 81       	ld	r24, Z
    2098:	91 81       	ldd	r25, Z+1	; 0x01
    209a:	8d 93       	st	X+, r24
    209c:	9c 93       	st	X, r25
    209e:	fe 01       	movw	r30, r28
    20a0:	e9 5b       	subi	r30, 0xB9	; 185
    20a2:	ff 4f       	sbci	r31, 0xFF	; 255
    20a4:	80 81       	ld	r24, Z
    20a6:	91 81       	ldd	r25, Z+1	; 0x01
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <main+0x23e>
    20ac:	fe 01       	movw	r30, r28
    20ae:	e9 5b       	subi	r30, 0xB9	; 185
    20b0:	ff 4f       	sbci	r31, 0xFF	; 255
    20b2:	91 83       	std	Z+1, r25	; 0x01
    20b4:	80 83       	st	Z, r24
			_delay_ms(50);
			DIO_U8_Set_Pin_Value(GROUP_D,PIN0,LOW);
    20b6:	83 e0       	ldi	r24, 0x03	; 3
    20b8:	60 e0       	ldi	r22, 0x00	; 0
    20ba:	40 e0       	ldi	r20, 0x00	; 0
    20bc:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_U8_Set_Pin_Value>
    20c0:	fe 01       	movw	r30, r28
    20c2:	ed 5b       	subi	r30, 0xBD	; 189
    20c4:	ff 4f       	sbci	r31, 0xFF	; 255
    20c6:	80 e0       	ldi	r24, 0x00	; 0
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	a8 e4       	ldi	r26, 0x48	; 72
    20cc:	b2 e4       	ldi	r27, 0x42	; 66
    20ce:	80 83       	st	Z, r24
    20d0:	91 83       	std	Z+1, r25	; 0x01
    20d2:	a2 83       	std	Z+2, r26	; 0x02
    20d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20d6:	8e 01       	movw	r16, r28
    20d8:	01 5c       	subi	r16, 0xC1	; 193
    20da:	1f 4f       	sbci	r17, 0xFF	; 255
    20dc:	fe 01       	movw	r30, r28
    20de:	ed 5b       	subi	r30, 0xBD	; 189
    20e0:	ff 4f       	sbci	r31, 0xFF	; 255
    20e2:	60 81       	ld	r22, Z
    20e4:	71 81       	ldd	r23, Z+1	; 0x01
    20e6:	82 81       	ldd	r24, Z+2	; 0x02
    20e8:	93 81       	ldd	r25, Z+3	; 0x03
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	4a ef       	ldi	r20, 0xFA	; 250
    20f0:	54 e4       	ldi	r21, 0x44	; 68
    20f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	f8 01       	movw	r30, r16
    20fc:	80 83       	st	Z, r24
    20fe:	91 83       	std	Z+1, r25	; 0x01
    2100:	a2 83       	std	Z+2, r26	; 0x02
    2102:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2104:	fe 01       	movw	r30, r28
    2106:	ff 96       	adiw	r30, 0x3f	; 63
    2108:	60 81       	ld	r22, Z
    210a:	71 81       	ldd	r23, Z+1	; 0x01
    210c:	82 81       	ldd	r24, Z+2	; 0x02
    210e:	93 81       	ldd	r25, Z+3	; 0x03
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	40 e8       	ldi	r20, 0x80	; 128
    2116:	5f e3       	ldi	r21, 0x3F	; 63
    2118:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    211c:	88 23       	and	r24, r24
    211e:	2c f4       	brge	.+10     	; 0x212a <main+0x2c0>
		__ticks = 1;
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	9e af       	std	Y+62, r25	; 0x3e
    2126:	8d af       	std	Y+61, r24	; 0x3d
    2128:	46 c0       	rjmp	.+140    	; 0x21b6 <main+0x34c>
	else if (__tmp > 65535)
    212a:	fe 01       	movw	r30, r28
    212c:	ff 96       	adiw	r30, 0x3f	; 63
    212e:	60 81       	ld	r22, Z
    2130:	71 81       	ldd	r23, Z+1	; 0x01
    2132:	82 81       	ldd	r24, Z+2	; 0x02
    2134:	93 81       	ldd	r25, Z+3	; 0x03
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	3f ef       	ldi	r19, 0xFF	; 255
    213a:	4f e7       	ldi	r20, 0x7F	; 127
    213c:	57 e4       	ldi	r21, 0x47	; 71
    213e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2142:	18 16       	cp	r1, r24
    2144:	64 f5       	brge	.+88     	; 0x219e <main+0x334>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2146:	fe 01       	movw	r30, r28
    2148:	ed 5b       	subi	r30, 0xBD	; 189
    214a:	ff 4f       	sbci	r31, 0xFF	; 255
    214c:	60 81       	ld	r22, Z
    214e:	71 81       	ldd	r23, Z+1	; 0x01
    2150:	82 81       	ldd	r24, Z+2	; 0x02
    2152:	93 81       	ldd	r25, Z+3	; 0x03
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	40 e2       	ldi	r20, 0x20	; 32
    215a:	51 e4       	ldi	r21, 0x41	; 65
    215c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	bc 01       	movw	r22, r24
    2166:	cd 01       	movw	r24, r26
    2168:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	9e af       	std	Y+62, r25	; 0x3e
    2172:	8d af       	std	Y+61, r24	; 0x3d
    2174:	0f c0       	rjmp	.+30     	; 0x2194 <main+0x32a>
    2176:	88 ec       	ldi	r24, 0xC8	; 200
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	9c af       	std	Y+60, r25	; 0x3c
    217c:	8b af       	std	Y+59, r24	; 0x3b
    217e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2180:	9c ad       	ldd	r25, Y+60	; 0x3c
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	f1 f7       	brne	.-4      	; 0x2182 <main+0x318>
    2186:	9c af       	std	Y+60, r25	; 0x3c
    2188:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    218a:	8d ad       	ldd	r24, Y+61	; 0x3d
    218c:	9e ad       	ldd	r25, Y+62	; 0x3e
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	9e af       	std	Y+62, r25	; 0x3e
    2192:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2194:	8d ad       	ldd	r24, Y+61	; 0x3d
    2196:	9e ad       	ldd	r25, Y+62	; 0x3e
    2198:	00 97       	sbiw	r24, 0x00	; 0
    219a:	69 f7       	brne	.-38     	; 0x2176 <main+0x30c>
    219c:	16 c0       	rjmp	.+44     	; 0x21ca <main+0x360>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    219e:	fe 01       	movw	r30, r28
    21a0:	ff 96       	adiw	r30, 0x3f	; 63
    21a2:	60 81       	ld	r22, Z
    21a4:	71 81       	ldd	r23, Z+1	; 0x01
    21a6:	82 81       	ldd	r24, Z+2	; 0x02
    21a8:	93 81       	ldd	r25, Z+3	; 0x03
    21aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	9e af       	std	Y+62, r25	; 0x3e
    21b4:	8d af       	std	Y+61, r24	; 0x3d
    21b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    21b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    21ba:	9a af       	std	Y+58, r25	; 0x3a
    21bc:	89 af       	std	Y+57, r24	; 0x39
    21be:	89 ad       	ldd	r24, Y+57	; 0x39
    21c0:	9a ad       	ldd	r25, Y+58	; 0x3a
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	f1 f7       	brne	.-4      	; 0x21c2 <main+0x358>
    21c6:	9a af       	std	Y+58, r25	; 0x3a
    21c8:	89 af       	std	Y+57, r24	; 0x39
	DIO_U8_Set_Port_Direction(GROUP_C,maximum_port_direction);

	DIO_U8_Set_Pin_Direction(GROUP_D,PIN0,OUTPUT);

	while(1){
		for(u8 i=5;i>0;i--){
    21ca:	de 01       	movw	r26, r28
    21cc:	aa 5a       	subi	r26, 0xAA	; 170
    21ce:	bf 4f       	sbci	r27, 0xFF	; 255
    21d0:	fe 01       	movw	r30, r28
    21d2:	ea 5a       	subi	r30, 0xAA	; 170
    21d4:	ff 4f       	sbci	r31, 0xFF	; 255
    21d6:	80 81       	ld	r24, Z
    21d8:	81 50       	subi	r24, 0x01	; 1
    21da:	8c 93       	st	X, r24
    21dc:	fe 01       	movw	r30, r28
    21de:	ea 5a       	subi	r30, 0xAA	; 170
    21e0:	ff 4f       	sbci	r31, 0xFF	; 255
    21e2:	80 81       	ld	r24, Z
    21e4:	88 23       	and	r24, r24
    21e6:	09 f0       	breq	.+2      	; 0x21ea <main+0x380>
    21e8:	97 ce       	rjmp	.-722    	; 0x1f18 <main+0xae>
			DIO_U8_Set_Pin_Value(GROUP_D,PIN0,HIGH);
			_delay_ms(50);
			DIO_U8_Set_Pin_Value(GROUP_D,PIN0,LOW);
			_delay_ms(50);
		}
		LCD_ClearDisplay();
    21ea:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <LCD_ClearDisplay>

		DIO_U8_Set_Port_Value(GROUP_C,arr[0]);
    21ee:	fe 01       	movw	r30, r28
    21f0:	e9 5a       	subi	r30, 0xA9	; 169
    21f2:	ff 4f       	sbci	r31, 0xFF	; 255
    21f4:	90 81       	ld	r25, Z
    21f6:	82 e0       	ldi	r24, 0x02	; 2
    21f8:	69 2f       	mov	r22, r25
    21fa:	0e 94 5f 08 	call	0x10be	; 0x10be <DIO_U8_Set_Port_Value>
		LCD_Void_Write_String((u8*)"DOOR IS OPENED",0,0);
    21fe:	82 e8       	ldi	r24, 0x82	; 130
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	60 e0       	ldi	r22, 0x00	; 0
    2204:	40 e0       	ldi	r20, 0x00	; 0
    2206:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <LCD_Void_Write_String>
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	aa ef       	ldi	r26, 0xFA	; 250
    2210:	b3 e4       	ldi	r27, 0x43	; 67
    2212:	8d ab       	std	Y+53, r24	; 0x35
    2214:	9e ab       	std	Y+54, r25	; 0x36
    2216:	af ab       	std	Y+55, r26	; 0x37
    2218:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    221a:	6d a9       	ldd	r22, Y+53	; 0x35
    221c:	7e a9       	ldd	r23, Y+54	; 0x36
    221e:	8f a9       	ldd	r24, Y+55	; 0x37
    2220:	98 ad       	ldd	r25, Y+56	; 0x38
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	4a ef       	ldi	r20, 0xFA	; 250
    2228:	54 e4       	ldi	r21, 0x44	; 68
    222a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	89 ab       	std	Y+49, r24	; 0x31
    2234:	9a ab       	std	Y+50, r25	; 0x32
    2236:	ab ab       	std	Y+51, r26	; 0x33
    2238:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    223a:	69 a9       	ldd	r22, Y+49	; 0x31
    223c:	7a a9       	ldd	r23, Y+50	; 0x32
    223e:	8b a9       	ldd	r24, Y+51	; 0x33
    2240:	9c a9       	ldd	r25, Y+52	; 0x34
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	40 e8       	ldi	r20, 0x80	; 128
    2248:	5f e3       	ldi	r21, 0x3F	; 63
    224a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    224e:	88 23       	and	r24, r24
    2250:	2c f4       	brge	.+10     	; 0x225c <main+0x3f2>
		__ticks = 1;
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	98 ab       	std	Y+48, r25	; 0x30
    2258:	8f a7       	std	Y+47, r24	; 0x2f
    225a:	3f c0       	rjmp	.+126    	; 0x22da <main+0x470>
	else if (__tmp > 65535)
    225c:	69 a9       	ldd	r22, Y+49	; 0x31
    225e:	7a a9       	ldd	r23, Y+50	; 0x32
    2260:	8b a9       	ldd	r24, Y+51	; 0x33
    2262:	9c a9       	ldd	r25, Y+52	; 0x34
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	3f ef       	ldi	r19, 0xFF	; 255
    2268:	4f e7       	ldi	r20, 0x7F	; 127
    226a:	57 e4       	ldi	r21, 0x47	; 71
    226c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2270:	18 16       	cp	r1, r24
    2272:	4c f5       	brge	.+82     	; 0x22c6 <main+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2274:	6d a9       	ldd	r22, Y+53	; 0x35
    2276:	7e a9       	ldd	r23, Y+54	; 0x36
    2278:	8f a9       	ldd	r24, Y+55	; 0x37
    227a:	98 ad       	ldd	r25, Y+56	; 0x38
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	40 e2       	ldi	r20, 0x20	; 32
    2282:	51 e4       	ldi	r21, 0x41	; 65
    2284:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	bc 01       	movw	r22, r24
    228e:	cd 01       	movw	r24, r26
    2290:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	98 ab       	std	Y+48, r25	; 0x30
    229a:	8f a7       	std	Y+47, r24	; 0x2f
    229c:	0f c0       	rjmp	.+30     	; 0x22bc <main+0x452>
    229e:	88 ec       	ldi	r24, 0xC8	; 200
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	9e a7       	std	Y+46, r25	; 0x2e
    22a4:	8d a7       	std	Y+45, r24	; 0x2d
    22a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    22a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    22aa:	01 97       	sbiw	r24, 0x01	; 1
    22ac:	f1 f7       	brne	.-4      	; 0x22aa <main+0x440>
    22ae:	9e a7       	std	Y+46, r25	; 0x2e
    22b0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    22b4:	98 a9       	ldd	r25, Y+48	; 0x30
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	98 ab       	std	Y+48, r25	; 0x30
    22ba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    22be:	98 a9       	ldd	r25, Y+48	; 0x30
    22c0:	00 97       	sbiw	r24, 0x00	; 0
    22c2:	69 f7       	brne	.-38     	; 0x229e <main+0x434>
    22c4:	14 c0       	rjmp	.+40     	; 0x22ee <main+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c6:	69 a9       	ldd	r22, Y+49	; 0x31
    22c8:	7a a9       	ldd	r23, Y+50	; 0x32
    22ca:	8b a9       	ldd	r24, Y+51	; 0x33
    22cc:	9c a9       	ldd	r25, Y+52	; 0x34
    22ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	98 ab       	std	Y+48, r25	; 0x30
    22d8:	8f a7       	std	Y+47, r24	; 0x2f
    22da:	8f a5       	ldd	r24, Y+47	; 0x2f
    22dc:	98 a9       	ldd	r25, Y+48	; 0x30
    22de:	9c a7       	std	Y+44, r25	; 0x2c
    22e0:	8b a7       	std	Y+43, r24	; 0x2b
    22e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    22e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	f1 f7       	brne	.-4      	; 0x22e6 <main+0x47c>
    22ea:	9c a7       	std	Y+44, r25	; 0x2c
    22ec:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(500);
		LCD_ClearDisplay();
    22ee:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <LCD_ClearDisplay>

		for(u8 i=5;i>0;i--){
    22f2:	fe 01       	movw	r30, r28
    22f4:	eb 5a       	subi	r30, 0xAB	; 171
    22f6:	ff 4f       	sbci	r31, 0xFF	; 255
    22f8:	85 e0       	ldi	r24, 0x05	; 5
    22fa:	80 83       	st	Z, r24
    22fc:	10 c1       	rjmp	.+544    	; 0x251e <main+0x6b4>
			LCD_Void_Write_String((u8*)"DOOR IS CLOSING IN:",0,0);
    22fe:	81 e9       	ldi	r24, 0x91	; 145
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	60 e0       	ldi	r22, 0x00	; 0
    2304:	40 e0       	ldi	r20, 0x00	; 0
    2306:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <LCD_Void_Write_String>
			DIO_U8_Set_Port_Value(GROUP_C,arr[i]);
    230a:	fe 01       	movw	r30, r28
    230c:	eb 5a       	subi	r30, 0xAB	; 171
    230e:	ff 4f       	sbci	r31, 0xFF	; 255
    2310:	80 81       	ld	r24, Z
    2312:	28 2f       	mov	r18, r24
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	ce 01       	movw	r24, r28
    2318:	89 5a       	subi	r24, 0xA9	; 169
    231a:	9f 4f       	sbci	r25, 0xFF	; 255
    231c:	fc 01       	movw	r30, r24
    231e:	e2 0f       	add	r30, r18
    2320:	f3 1f       	adc	r31, r19
    2322:	90 81       	ld	r25, Z
    2324:	82 e0       	ldi	r24, 0x02	; 2
    2326:	69 2f       	mov	r22, r25
    2328:	0e 94 5f 08 	call	0x10be	; 0x10be <DIO_U8_Set_Port_Value>
			DIO_U8_Set_Pin_Value(GROUP_D,PIN0,HIGH);
    232c:	83 e0       	ldi	r24, 0x03	; 3
    232e:	60 e0       	ldi	r22, 0x00	; 0
    2330:	41 e0       	ldi	r20, 0x01	; 1
    2332:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_U8_Set_Pin_Value>
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	a8 e4       	ldi	r26, 0x48	; 72
    233c:	b2 e4       	ldi	r27, 0x42	; 66
    233e:	8f a3       	std	Y+39, r24	; 0x27
    2340:	98 a7       	std	Y+40, r25	; 0x28
    2342:	a9 a7       	std	Y+41, r26	; 0x29
    2344:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2346:	6f a1       	ldd	r22, Y+39	; 0x27
    2348:	78 a5       	ldd	r23, Y+40	; 0x28
    234a:	89 a5       	ldd	r24, Y+41	; 0x29
    234c:	9a a5       	ldd	r25, Y+42	; 0x2a
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	4a ef       	ldi	r20, 0xFA	; 250
    2354:	54 e4       	ldi	r21, 0x44	; 68
    2356:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	8b a3       	std	Y+35, r24	; 0x23
    2360:	9c a3       	std	Y+36, r25	; 0x24
    2362:	ad a3       	std	Y+37, r26	; 0x25
    2364:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2366:	6b a1       	ldd	r22, Y+35	; 0x23
    2368:	7c a1       	ldd	r23, Y+36	; 0x24
    236a:	8d a1       	ldd	r24, Y+37	; 0x25
    236c:	9e a1       	ldd	r25, Y+38	; 0x26
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	40 e8       	ldi	r20, 0x80	; 128
    2374:	5f e3       	ldi	r21, 0x3F	; 63
    2376:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    237a:	88 23       	and	r24, r24
    237c:	2c f4       	brge	.+10     	; 0x2388 <main+0x51e>
		__ticks = 1;
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	9a a3       	std	Y+34, r25	; 0x22
    2384:	89 a3       	std	Y+33, r24	; 0x21
    2386:	3f c0       	rjmp	.+126    	; 0x2406 <main+0x59c>
	else if (__tmp > 65535)
    2388:	6b a1       	ldd	r22, Y+35	; 0x23
    238a:	7c a1       	ldd	r23, Y+36	; 0x24
    238c:	8d a1       	ldd	r24, Y+37	; 0x25
    238e:	9e a1       	ldd	r25, Y+38	; 0x26
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	3f ef       	ldi	r19, 0xFF	; 255
    2394:	4f e7       	ldi	r20, 0x7F	; 127
    2396:	57 e4       	ldi	r21, 0x47	; 71
    2398:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    239c:	18 16       	cp	r1, r24
    239e:	4c f5       	brge	.+82     	; 0x23f2 <main+0x588>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a0:	6f a1       	ldd	r22, Y+39	; 0x27
    23a2:	78 a5       	ldd	r23, Y+40	; 0x28
    23a4:	89 a5       	ldd	r24, Y+41	; 0x29
    23a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	40 e2       	ldi	r20, 0x20	; 32
    23ae:	51 e4       	ldi	r21, 0x41	; 65
    23b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	bc 01       	movw	r22, r24
    23ba:	cd 01       	movw	r24, r26
    23bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	9a a3       	std	Y+34, r25	; 0x22
    23c6:	89 a3       	std	Y+33, r24	; 0x21
    23c8:	0f c0       	rjmp	.+30     	; 0x23e8 <main+0x57e>
    23ca:	88 ec       	ldi	r24, 0xC8	; 200
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	98 a3       	std	Y+32, r25	; 0x20
    23d0:	8f 8f       	std	Y+31, r24	; 0x1f
    23d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23d4:	98 a1       	ldd	r25, Y+32	; 0x20
    23d6:	01 97       	sbiw	r24, 0x01	; 1
    23d8:	f1 f7       	brne	.-4      	; 0x23d6 <main+0x56c>
    23da:	98 a3       	std	Y+32, r25	; 0x20
    23dc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23de:	89 a1       	ldd	r24, Y+33	; 0x21
    23e0:	9a a1       	ldd	r25, Y+34	; 0x22
    23e2:	01 97       	sbiw	r24, 0x01	; 1
    23e4:	9a a3       	std	Y+34, r25	; 0x22
    23e6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e8:	89 a1       	ldd	r24, Y+33	; 0x21
    23ea:	9a a1       	ldd	r25, Y+34	; 0x22
    23ec:	00 97       	sbiw	r24, 0x00	; 0
    23ee:	69 f7       	brne	.-38     	; 0x23ca <main+0x560>
    23f0:	14 c0       	rjmp	.+40     	; 0x241a <main+0x5b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f2:	6b a1       	ldd	r22, Y+35	; 0x23
    23f4:	7c a1       	ldd	r23, Y+36	; 0x24
    23f6:	8d a1       	ldd	r24, Y+37	; 0x25
    23f8:	9e a1       	ldd	r25, Y+38	; 0x26
    23fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	9a a3       	std	Y+34, r25	; 0x22
    2404:	89 a3       	std	Y+33, r24	; 0x21
    2406:	89 a1       	ldd	r24, Y+33	; 0x21
    2408:	9a a1       	ldd	r25, Y+34	; 0x22
    240a:	9e 8f       	std	Y+30, r25	; 0x1e
    240c:	8d 8f       	std	Y+29, r24	; 0x1d
    240e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2410:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2412:	01 97       	sbiw	r24, 0x01	; 1
    2414:	f1 f7       	brne	.-4      	; 0x2412 <main+0x5a8>
    2416:	9e 8f       	std	Y+30, r25	; 0x1e
    2418:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(50);
			DIO_U8_Set_Pin_Value(GROUP_D,PIN0,LOW);
    241a:	83 e0       	ldi	r24, 0x03	; 3
    241c:	60 e0       	ldi	r22, 0x00	; 0
    241e:	40 e0       	ldi	r20, 0x00	; 0
    2420:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_U8_Set_Pin_Value>
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	a8 e4       	ldi	r26, 0x48	; 72
    242a:	b2 e4       	ldi	r27, 0x42	; 66
    242c:	89 8f       	std	Y+25, r24	; 0x19
    242e:	9a 8f       	std	Y+26, r25	; 0x1a
    2430:	ab 8f       	std	Y+27, r26	; 0x1b
    2432:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2434:	69 8d       	ldd	r22, Y+25	; 0x19
    2436:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2438:	8b 8d       	ldd	r24, Y+27	; 0x1b
    243a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	4a ef       	ldi	r20, 0xFA	; 250
    2442:	54 e4       	ldi	r21, 0x44	; 68
    2444:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	8d 8b       	std	Y+21, r24	; 0x15
    244e:	9e 8b       	std	Y+22, r25	; 0x16
    2450:	af 8b       	std	Y+23, r26	; 0x17
    2452:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2454:	6d 89       	ldd	r22, Y+21	; 0x15
    2456:	7e 89       	ldd	r23, Y+22	; 0x16
    2458:	8f 89       	ldd	r24, Y+23	; 0x17
    245a:	98 8d       	ldd	r25, Y+24	; 0x18
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	40 e8       	ldi	r20, 0x80	; 128
    2462:	5f e3       	ldi	r21, 0x3F	; 63
    2464:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2468:	88 23       	and	r24, r24
    246a:	2c f4       	brge	.+10     	; 0x2476 <main+0x60c>
		__ticks = 1;
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	9c 8b       	std	Y+20, r25	; 0x14
    2472:	8b 8b       	std	Y+19, r24	; 0x13
    2474:	3f c0       	rjmp	.+126    	; 0x24f4 <main+0x68a>
	else if (__tmp > 65535)
    2476:	6d 89       	ldd	r22, Y+21	; 0x15
    2478:	7e 89       	ldd	r23, Y+22	; 0x16
    247a:	8f 89       	ldd	r24, Y+23	; 0x17
    247c:	98 8d       	ldd	r25, Y+24	; 0x18
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	3f ef       	ldi	r19, 0xFF	; 255
    2482:	4f e7       	ldi	r20, 0x7F	; 127
    2484:	57 e4       	ldi	r21, 0x47	; 71
    2486:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    248a:	18 16       	cp	r1, r24
    248c:	4c f5       	brge	.+82     	; 0x24e0 <main+0x676>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    248e:	69 8d       	ldd	r22, Y+25	; 0x19
    2490:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2492:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2494:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	40 e2       	ldi	r20, 0x20	; 32
    249c:	51 e4       	ldi	r21, 0x41	; 65
    249e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	bc 01       	movw	r22, r24
    24a8:	cd 01       	movw	r24, r26
    24aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	9c 8b       	std	Y+20, r25	; 0x14
    24b4:	8b 8b       	std	Y+19, r24	; 0x13
    24b6:	0f c0       	rjmp	.+30     	; 0x24d6 <main+0x66c>
    24b8:	88 ec       	ldi	r24, 0xC8	; 200
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	9a 8b       	std	Y+18, r25	; 0x12
    24be:	89 8b       	std	Y+17, r24	; 0x11
    24c0:	89 89       	ldd	r24, Y+17	; 0x11
    24c2:	9a 89       	ldd	r25, Y+18	; 0x12
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	f1 f7       	brne	.-4      	; 0x24c4 <main+0x65a>
    24c8:	9a 8b       	std	Y+18, r25	; 0x12
    24ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24cc:	8b 89       	ldd	r24, Y+19	; 0x13
    24ce:	9c 89       	ldd	r25, Y+20	; 0x14
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	9c 8b       	std	Y+20, r25	; 0x14
    24d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d6:	8b 89       	ldd	r24, Y+19	; 0x13
    24d8:	9c 89       	ldd	r25, Y+20	; 0x14
    24da:	00 97       	sbiw	r24, 0x00	; 0
    24dc:	69 f7       	brne	.-38     	; 0x24b8 <main+0x64e>
    24de:	14 c0       	rjmp	.+40     	; 0x2508 <main+0x69e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e0:	6d 89       	ldd	r22, Y+21	; 0x15
    24e2:	7e 89       	ldd	r23, Y+22	; 0x16
    24e4:	8f 89       	ldd	r24, Y+23	; 0x17
    24e6:	98 8d       	ldd	r25, Y+24	; 0x18
    24e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	9c 8b       	std	Y+20, r25	; 0x14
    24f2:	8b 8b       	std	Y+19, r24	; 0x13
    24f4:	8b 89       	ldd	r24, Y+19	; 0x13
    24f6:	9c 89       	ldd	r25, Y+20	; 0x14
    24f8:	98 8b       	std	Y+16, r25	; 0x10
    24fa:	8f 87       	std	Y+15, r24	; 0x0f
    24fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    24fe:	98 89       	ldd	r25, Y+16	; 0x10
    2500:	01 97       	sbiw	r24, 0x01	; 1
    2502:	f1 f7       	brne	.-4      	; 0x2500 <main+0x696>
    2504:	98 8b       	std	Y+16, r25	; 0x10
    2506:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(50);
			LCD_ClearDisplay();
    2508:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <LCD_ClearDisplay>
		DIO_U8_Set_Port_Value(GROUP_C,arr[0]);
		LCD_Void_Write_String((u8*)"DOOR IS OPENED",0,0);
		_delay_ms(500);
		LCD_ClearDisplay();

		for(u8 i=5;i>0;i--){
    250c:	de 01       	movw	r26, r28
    250e:	ab 5a       	subi	r26, 0xAB	; 171
    2510:	bf 4f       	sbci	r27, 0xFF	; 255
    2512:	fe 01       	movw	r30, r28
    2514:	eb 5a       	subi	r30, 0xAB	; 171
    2516:	ff 4f       	sbci	r31, 0xFF	; 255
    2518:	80 81       	ld	r24, Z
    251a:	81 50       	subi	r24, 0x01	; 1
    251c:	8c 93       	st	X, r24
    251e:	fe 01       	movw	r30, r28
    2520:	eb 5a       	subi	r30, 0xAB	; 171
    2522:	ff 4f       	sbci	r31, 0xFF	; 255
    2524:	80 81       	ld	r24, Z
    2526:	88 23       	and	r24, r24
    2528:	09 f0       	breq	.+2      	; 0x252c <main+0x6c2>
    252a:	e9 ce       	rjmp	.-558    	; 0x22fe <main+0x494>
			_delay_ms(50);
			DIO_U8_Set_Pin_Value(GROUP_D,PIN0,LOW);
			_delay_ms(50);
			LCD_ClearDisplay();
		}
		DIO_U8_Set_Port_Value(GROUP_C,arr[0]);
    252c:	fe 01       	movw	r30, r28
    252e:	e9 5a       	subi	r30, 0xA9	; 169
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	90 81       	ld	r25, Z
    2534:	82 e0       	ldi	r24, 0x02	; 2
    2536:	69 2f       	mov	r22, r25
    2538:	0e 94 5f 08 	call	0x10be	; 0x10be <DIO_U8_Set_Port_Value>
		LCD_Void_Write_String((u8*)"DOOR IS CLOSED",0,0);
    253c:	85 ea       	ldi	r24, 0xA5	; 165
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	60 e0       	ldi	r22, 0x00	; 0
    2542:	40 e0       	ldi	r20, 0x00	; 0
    2544:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <LCD_Void_Write_String>
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	aa ef       	ldi	r26, 0xFA	; 250
    254e:	b3 e4       	ldi	r27, 0x43	; 67
    2550:	8b 87       	std	Y+11, r24	; 0x0b
    2552:	9c 87       	std	Y+12, r25	; 0x0c
    2554:	ad 87       	std	Y+13, r26	; 0x0d
    2556:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2558:	6b 85       	ldd	r22, Y+11	; 0x0b
    255a:	7c 85       	ldd	r23, Y+12	; 0x0c
    255c:	8d 85       	ldd	r24, Y+13	; 0x0d
    255e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	4a ef       	ldi	r20, 0xFA	; 250
    2566:	54 e4       	ldi	r21, 0x44	; 68
    2568:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	8f 83       	std	Y+7, r24	; 0x07
    2572:	98 87       	std	Y+8, r25	; 0x08
    2574:	a9 87       	std	Y+9, r26	; 0x09
    2576:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2578:	6f 81       	ldd	r22, Y+7	; 0x07
    257a:	78 85       	ldd	r23, Y+8	; 0x08
    257c:	89 85       	ldd	r24, Y+9	; 0x09
    257e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	40 e8       	ldi	r20, 0x80	; 128
    2586:	5f e3       	ldi	r21, 0x3F	; 63
    2588:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    258c:	88 23       	and	r24, r24
    258e:	2c f4       	brge	.+10     	; 0x259a <main+0x730>
		__ticks = 1;
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	9e 83       	std	Y+6, r25	; 0x06
    2596:	8d 83       	std	Y+5, r24	; 0x05
    2598:	3f c0       	rjmp	.+126    	; 0x2618 <main+0x7ae>
	else if (__tmp > 65535)
    259a:	6f 81       	ldd	r22, Y+7	; 0x07
    259c:	78 85       	ldd	r23, Y+8	; 0x08
    259e:	89 85       	ldd	r24, Y+9	; 0x09
    25a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	3f ef       	ldi	r19, 0xFF	; 255
    25a6:	4f e7       	ldi	r20, 0x7F	; 127
    25a8:	57 e4       	ldi	r21, 0x47	; 71
    25aa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25ae:	18 16       	cp	r1, r24
    25b0:	4c f5       	brge	.+82     	; 0x2604 <main+0x79a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	40 e2       	ldi	r20, 0x20	; 32
    25c0:	51 e4       	ldi	r21, 0x41	; 65
    25c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	bc 01       	movw	r22, r24
    25cc:	cd 01       	movw	r24, r26
    25ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25d2:	dc 01       	movw	r26, r24
    25d4:	cb 01       	movw	r24, r22
    25d6:	9e 83       	std	Y+6, r25	; 0x06
    25d8:	8d 83       	std	Y+5, r24	; 0x05
    25da:	0f c0       	rjmp	.+30     	; 0x25fa <main+0x790>
    25dc:	88 ec       	ldi	r24, 0xC8	; 200
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	9c 83       	std	Y+4, r25	; 0x04
    25e2:	8b 83       	std	Y+3, r24	; 0x03
    25e4:	8b 81       	ldd	r24, Y+3	; 0x03
    25e6:	9c 81       	ldd	r25, Y+4	; 0x04
    25e8:	01 97       	sbiw	r24, 0x01	; 1
    25ea:	f1 f7       	brne	.-4      	; 0x25e8 <main+0x77e>
    25ec:	9c 83       	std	Y+4, r25	; 0x04
    25ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f0:	8d 81       	ldd	r24, Y+5	; 0x05
    25f2:	9e 81       	ldd	r25, Y+6	; 0x06
    25f4:	01 97       	sbiw	r24, 0x01	; 1
    25f6:	9e 83       	std	Y+6, r25	; 0x06
    25f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25fa:	8d 81       	ldd	r24, Y+5	; 0x05
    25fc:	9e 81       	ldd	r25, Y+6	; 0x06
    25fe:	00 97       	sbiw	r24, 0x00	; 0
    2600:	69 f7       	brne	.-38     	; 0x25dc <main+0x772>
    2602:	14 c0       	rjmp	.+40     	; 0x262c <main+0x7c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2604:	6f 81       	ldd	r22, Y+7	; 0x07
    2606:	78 85       	ldd	r23, Y+8	; 0x08
    2608:	89 85       	ldd	r24, Y+9	; 0x09
    260a:	9a 85       	ldd	r25, Y+10	; 0x0a
    260c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2610:	dc 01       	movw	r26, r24
    2612:	cb 01       	movw	r24, r22
    2614:	9e 83       	std	Y+6, r25	; 0x06
    2616:	8d 83       	std	Y+5, r24	; 0x05
    2618:	8d 81       	ldd	r24, Y+5	; 0x05
    261a:	9e 81       	ldd	r25, Y+6	; 0x06
    261c:	9a 83       	std	Y+2, r25	; 0x02
    261e:	89 83       	std	Y+1, r24	; 0x01
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	9a 81       	ldd	r25, Y+2	; 0x02
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	f1 f7       	brne	.-4      	; 0x2624 <main+0x7ba>
    2628:	9a 83       	std	Y+2, r25	; 0x02
    262a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		LCD_ClearDisplay();
    262c:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <LCD_ClearDisplay>
    2630:	6d cc       	rjmp	.-1830   	; 0x1f0c <main+0xa2>

00002632 <__udivmodsi4>:
    2632:	a1 e2       	ldi	r26, 0x21	; 33
    2634:	1a 2e       	mov	r1, r26
    2636:	aa 1b       	sub	r26, r26
    2638:	bb 1b       	sub	r27, r27
    263a:	fd 01       	movw	r30, r26
    263c:	0d c0       	rjmp	.+26     	; 0x2658 <__udivmodsi4_ep>

0000263e <__udivmodsi4_loop>:
    263e:	aa 1f       	adc	r26, r26
    2640:	bb 1f       	adc	r27, r27
    2642:	ee 1f       	adc	r30, r30
    2644:	ff 1f       	adc	r31, r31
    2646:	a2 17       	cp	r26, r18
    2648:	b3 07       	cpc	r27, r19
    264a:	e4 07       	cpc	r30, r20
    264c:	f5 07       	cpc	r31, r21
    264e:	20 f0       	brcs	.+8      	; 0x2658 <__udivmodsi4_ep>
    2650:	a2 1b       	sub	r26, r18
    2652:	b3 0b       	sbc	r27, r19
    2654:	e4 0b       	sbc	r30, r20
    2656:	f5 0b       	sbc	r31, r21

00002658 <__udivmodsi4_ep>:
    2658:	66 1f       	adc	r22, r22
    265a:	77 1f       	adc	r23, r23
    265c:	88 1f       	adc	r24, r24
    265e:	99 1f       	adc	r25, r25
    2660:	1a 94       	dec	r1
    2662:	69 f7       	brne	.-38     	; 0x263e <__udivmodsi4_loop>
    2664:	60 95       	com	r22
    2666:	70 95       	com	r23
    2668:	80 95       	com	r24
    266a:	90 95       	com	r25
    266c:	9b 01       	movw	r18, r22
    266e:	ac 01       	movw	r20, r24
    2670:	bd 01       	movw	r22, r26
    2672:	cf 01       	movw	r24, r30
    2674:	08 95       	ret

00002676 <__prologue_saves__>:
    2676:	2f 92       	push	r2
    2678:	3f 92       	push	r3
    267a:	4f 92       	push	r4
    267c:	5f 92       	push	r5
    267e:	6f 92       	push	r6
    2680:	7f 92       	push	r7
    2682:	8f 92       	push	r8
    2684:	9f 92       	push	r9
    2686:	af 92       	push	r10
    2688:	bf 92       	push	r11
    268a:	cf 92       	push	r12
    268c:	df 92       	push	r13
    268e:	ef 92       	push	r14
    2690:	ff 92       	push	r15
    2692:	0f 93       	push	r16
    2694:	1f 93       	push	r17
    2696:	cf 93       	push	r28
    2698:	df 93       	push	r29
    269a:	cd b7       	in	r28, 0x3d	; 61
    269c:	de b7       	in	r29, 0x3e	; 62
    269e:	ca 1b       	sub	r28, r26
    26a0:	db 0b       	sbc	r29, r27
    26a2:	0f b6       	in	r0, 0x3f	; 63
    26a4:	f8 94       	cli
    26a6:	de bf       	out	0x3e, r29	; 62
    26a8:	0f be       	out	0x3f, r0	; 63
    26aa:	cd bf       	out	0x3d, r28	; 61
    26ac:	09 94       	ijmp

000026ae <__epilogue_restores__>:
    26ae:	2a 88       	ldd	r2, Y+18	; 0x12
    26b0:	39 88       	ldd	r3, Y+17	; 0x11
    26b2:	48 88       	ldd	r4, Y+16	; 0x10
    26b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    26b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    26b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    26ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    26bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    26be:	aa 84       	ldd	r10, Y+10	; 0x0a
    26c0:	b9 84       	ldd	r11, Y+9	; 0x09
    26c2:	c8 84       	ldd	r12, Y+8	; 0x08
    26c4:	df 80       	ldd	r13, Y+7	; 0x07
    26c6:	ee 80       	ldd	r14, Y+6	; 0x06
    26c8:	fd 80       	ldd	r15, Y+5	; 0x05
    26ca:	0c 81       	ldd	r16, Y+4	; 0x04
    26cc:	1b 81       	ldd	r17, Y+3	; 0x03
    26ce:	aa 81       	ldd	r26, Y+2	; 0x02
    26d0:	b9 81       	ldd	r27, Y+1	; 0x01
    26d2:	ce 0f       	add	r28, r30
    26d4:	d1 1d       	adc	r29, r1
    26d6:	0f b6       	in	r0, 0x3f	; 63
    26d8:	f8 94       	cli
    26da:	de bf       	out	0x3e, r29	; 62
    26dc:	0f be       	out	0x3f, r0	; 63
    26de:	cd bf       	out	0x3d, r28	; 61
    26e0:	ed 01       	movw	r28, r26
    26e2:	08 95       	ret

000026e4 <_exit>:
    26e4:	f8 94       	cli

000026e6 <__stop_program>:
    26e6:	ff cf       	rjmp	.-2      	; 0x26e6 <__stop_program>
