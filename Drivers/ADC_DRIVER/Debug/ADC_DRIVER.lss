
ADC_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000225a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000116  00800060  0000225a  000022ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001950  00000000  00000000  000023e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d73  00000000  00000000  00003d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  00004aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d3  00000000  00000000  00004c27  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000200f  00000000  00000000  00004dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001170  00000000  00000000  00006e09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001001  00000000  00000000  00007f79  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00008f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c1  00000000  00000000  0000911c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ae  00000000  00000000  000093dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009c8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e5       	ldi	r30, 0x5A	; 90
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 87 10 	call	0x210e	; 0x210e <main>
      7a:	0c 94 2b 11 	jmp	0x2256	; 0x2256 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ae e6       	ldi	r26, 0x6E	; 110
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 10 11 	jmp	0x2220	; 0x2220 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 00 11 	jmp	0x2200	; 0x2200 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 1c 11 	jmp	0x2238	; 0x2238 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 00 11 	jmp	0x2200	; 0x2200 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 1c 11 	jmp	0x2238	; 0x2238 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8e e6       	ldi	r24, 0x6E	; 110
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 10 11 	jmp	0x2220	; 0x2220 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 00 11 	jmp	0x2200	; 0x2200 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 1c 11 	jmp	0x2238	; 0x2238 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 00 11 	jmp	0x2200	; 0x2200 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 1c 11 	jmp	0x2238	; 0x2238 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 00 11 	jmp	0x2200	; 0x2200 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 1c 11 	jmp	0x2238	; 0x2238 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 04 11 	jmp	0x2208	; 0x2208 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__epilogue_restores__+0x20>

000007ea <__floatunsisf>:
     7ea:	a8 e0       	ldi	r26, 0x08	; 8
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <__prologue_saves__+0x10>
     7f6:	7b 01       	movw	r14, r22
     7f8:	8c 01       	movw	r16, r24
     7fa:	61 15       	cp	r22, r1
     7fc:	71 05       	cpc	r23, r1
     7fe:	81 05       	cpc	r24, r1
     800:	91 05       	cpc	r25, r1
     802:	19 f4       	brne	.+6      	; 0x80a <__floatunsisf+0x20>
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	89 83       	std	Y+1, r24	; 0x01
     808:	60 c0       	rjmp	.+192    	; 0x8ca <__stack+0x6b>
     80a:	83 e0       	ldi	r24, 0x03	; 3
     80c:	89 83       	std	Y+1, r24	; 0x01
     80e:	8e e1       	ldi	r24, 0x1E	; 30
     810:	c8 2e       	mov	r12, r24
     812:	d1 2c       	mov	r13, r1
     814:	dc 82       	std	Y+4, r13	; 0x04
     816:	cb 82       	std	Y+3, r12	; 0x03
     818:	ed 82       	std	Y+5, r14	; 0x05
     81a:	fe 82       	std	Y+6, r15	; 0x06
     81c:	0f 83       	std	Y+7, r16	; 0x07
     81e:	18 87       	std	Y+8, r17	; 0x08
     820:	c8 01       	movw	r24, r16
     822:	b7 01       	movw	r22, r14
     824:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__clzsi2>
     828:	fc 01       	movw	r30, r24
     82a:	31 97       	sbiw	r30, 0x01	; 1
     82c:	f7 ff       	sbrs	r31, 7
     82e:	3b c0       	rjmp	.+118    	; 0x8a6 <__stack+0x47>
     830:	22 27       	eor	r18, r18
     832:	33 27       	eor	r19, r19
     834:	2e 1b       	sub	r18, r30
     836:	3f 0b       	sbc	r19, r31
     838:	57 01       	movw	r10, r14
     83a:	68 01       	movw	r12, r16
     83c:	02 2e       	mov	r0, r18
     83e:	04 c0       	rjmp	.+8      	; 0x848 <__floatunsisf+0x5e>
     840:	d6 94       	lsr	r13
     842:	c7 94       	ror	r12
     844:	b7 94       	ror	r11
     846:	a7 94       	ror	r10
     848:	0a 94       	dec	r0
     84a:	d2 f7       	brpl	.-12     	; 0x840 <__floatunsisf+0x56>
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	a0 e0       	ldi	r26, 0x00	; 0
     85a:	b0 e0       	ldi	r27, 0x00	; 0
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	aa 1f       	adc	r26, r26
     864:	bb 1f       	adc	r27, r27
     866:	2a 95       	dec	r18
     868:	d2 f7       	brpl	.-12     	; 0x85e <__floatunsisf+0x74>
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	a1 09       	sbc	r26, r1
     86e:	b1 09       	sbc	r27, r1
     870:	8e 21       	and	r24, r14
     872:	9f 21       	and	r25, r15
     874:	a0 23       	and	r26, r16
     876:	b1 23       	and	r27, r17
     878:	00 97       	sbiw	r24, 0x00	; 0
     87a:	a1 05       	cpc	r26, r1
     87c:	b1 05       	cpc	r27, r1
     87e:	21 f0       	breq	.+8      	; 0x888 <__stack+0x29>
     880:	41 e0       	ldi	r20, 0x01	; 1
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	4a 29       	or	r20, r10
     88a:	5b 29       	or	r21, r11
     88c:	6c 29       	or	r22, r12
     88e:	7d 29       	or	r23, r13
     890:	4d 83       	std	Y+5, r20	; 0x05
     892:	5e 83       	std	Y+6, r21	; 0x06
     894:	6f 83       	std	Y+7, r22	; 0x07
     896:	78 87       	std	Y+8, r23	; 0x08
     898:	8e e1       	ldi	r24, 0x1E	; 30
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	8e 1b       	sub	r24, r30
     89e:	9f 0b       	sbc	r25, r31
     8a0:	9c 83       	std	Y+4, r25	; 0x04
     8a2:	8b 83       	std	Y+3, r24	; 0x03
     8a4:	12 c0       	rjmp	.+36     	; 0x8ca <__stack+0x6b>
     8a6:	30 97       	sbiw	r30, 0x00	; 0
     8a8:	81 f0       	breq	.+32     	; 0x8ca <__stack+0x6b>
     8aa:	0e 2e       	mov	r0, r30
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <__stack+0x57>
     8ae:	ee 0c       	add	r14, r14
     8b0:	ff 1c       	adc	r15, r15
     8b2:	00 1f       	adc	r16, r16
     8b4:	11 1f       	adc	r17, r17
     8b6:	0a 94       	dec	r0
     8b8:	d2 f7       	brpl	.-12     	; 0x8ae <__stack+0x4f>
     8ba:	ed 82       	std	Y+5, r14	; 0x05
     8bc:	fe 82       	std	Y+6, r15	; 0x06
     8be:	0f 83       	std	Y+7, r16	; 0x07
     8c0:	18 87       	std	Y+8, r17	; 0x08
     8c2:	ce 1a       	sub	r12, r30
     8c4:	df 0a       	sbc	r13, r31
     8c6:	dc 82       	std	Y+4, r13	; 0x04
     8c8:	cb 82       	std	Y+3, r12	; 0x03
     8ca:	1a 82       	std	Y+2, r1	; 0x02
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     8d4:	28 96       	adiw	r28, 0x08	; 8
     8d6:	ea e0       	ldi	r30, 0x0A	; 10
     8d8:	0c 94 18 11 	jmp	0x2230	; 0x2230 <__epilogue_restores__+0x10>

000008dc <__clzsi2>:
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	7b 01       	movw	r14, r22
     8e6:	8c 01       	movw	r16, r24
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	e8 16       	cp	r14, r24
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	f8 06       	cpc	r15, r24
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	08 07       	cpc	r16, r24
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	18 07       	cpc	r17, r24
     8f8:	88 f4       	brcc	.+34     	; 0x91c <__clzsi2+0x40>
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
     8fc:	e8 16       	cp	r14, r24
     8fe:	f1 04       	cpc	r15, r1
     900:	01 05       	cpc	r16, r1
     902:	11 05       	cpc	r17, r1
     904:	31 f0       	breq	.+12     	; 0x912 <__clzsi2+0x36>
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x36>
     908:	88 e0       	ldi	r24, 0x08	; 8
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	17 c0       	rjmp	.+46     	; 0x940 <__clzsi2+0x64>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	12 c0       	rjmp	.+36     	; 0x940 <__clzsi2+0x64>
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	e8 16       	cp	r14, r24
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	f8 06       	cpc	r15, r24
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	08 07       	cpc	r16, r24
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	18 07       	cpc	r17, r24
     92c:	28 f0       	brcs	.+10     	; 0x938 <__clzsi2+0x5c>
     92e:	88 e1       	ldi	r24, 0x18	; 24
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	04 c0       	rjmp	.+8      	; 0x940 <__clzsi2+0x64>
     938:	80 e1       	ldi	r24, 0x10	; 16
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	20 e2       	ldi	r18, 0x20	; 32
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	28 1b       	sub	r18, r24
     94a:	39 0b       	sbc	r19, r25
     94c:	4a 0b       	sbc	r20, r26
     94e:	5b 0b       	sbc	r21, r27
     950:	04 c0       	rjmp	.+8      	; 0x95a <__clzsi2+0x7e>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	8a 95       	dec	r24
     95c:	d2 f7       	brpl	.-12     	; 0x952 <__clzsi2+0x76>
     95e:	f7 01       	movw	r30, r14
     960:	ea 58       	subi	r30, 0x8A	; 138
     962:	ff 4f       	sbci	r31, 0xFF	; 255
     964:	80 81       	ld	r24, Z
     966:	28 1b       	sub	r18, r24
     968:	31 09       	sbc	r19, r1
     96a:	41 09       	sbc	r20, r1
     96c:	51 09       	sbc	r21, r1
     96e:	c9 01       	movw	r24, r18
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	08 95       	ret

0000097a <__pack_f>:
     97a:	df 92       	push	r13
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	fc 01       	movw	r30, r24
     986:	e4 80       	ldd	r14, Z+4	; 0x04
     988:	f5 80       	ldd	r15, Z+5	; 0x05
     98a:	06 81       	ldd	r16, Z+6	; 0x06
     98c:	17 81       	ldd	r17, Z+7	; 0x07
     98e:	d1 80       	ldd	r13, Z+1	; 0x01
     990:	80 81       	ld	r24, Z
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	48 f4       	brcc	.+18     	; 0x9a8 <__pack_f+0x2e>
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	a0 e1       	ldi	r26, 0x10	; 16
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	e8 2a       	or	r14, r24
     9a0:	f9 2a       	or	r15, r25
     9a2:	0a 2b       	or	r16, r26
     9a4:	1b 2b       	or	r17, r27
     9a6:	a5 c0       	rjmp	.+330    	; 0xaf2 <__pack_f+0x178>
     9a8:	84 30       	cpi	r24, 0x04	; 4
     9aa:	09 f4       	brne	.+2      	; 0x9ae <__pack_f+0x34>
     9ac:	9f c0       	rjmp	.+318    	; 0xaec <__pack_f+0x172>
     9ae:	82 30       	cpi	r24, 0x02	; 2
     9b0:	21 f4       	brne	.+8      	; 0x9ba <__pack_f+0x40>
     9b2:	ee 24       	eor	r14, r14
     9b4:	ff 24       	eor	r15, r15
     9b6:	87 01       	movw	r16, r14
     9b8:	05 c0       	rjmp	.+10     	; 0x9c4 <__pack_f+0x4a>
     9ba:	e1 14       	cp	r14, r1
     9bc:	f1 04       	cpc	r15, r1
     9be:	01 05       	cpc	r16, r1
     9c0:	11 05       	cpc	r17, r1
     9c2:	19 f4       	brne	.+6      	; 0x9ca <__pack_f+0x50>
     9c4:	e0 e0       	ldi	r30, 0x00	; 0
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	96 c0       	rjmp	.+300    	; 0xaf6 <__pack_f+0x17c>
     9ca:	62 81       	ldd	r22, Z+2	; 0x02
     9cc:	73 81       	ldd	r23, Z+3	; 0x03
     9ce:	9f ef       	ldi	r25, 0xFF	; 255
     9d0:	62 38       	cpi	r22, 0x82	; 130
     9d2:	79 07       	cpc	r23, r25
     9d4:	0c f0       	brlt	.+2      	; 0x9d8 <__pack_f+0x5e>
     9d6:	5b c0       	rjmp	.+182    	; 0xa8e <__pack_f+0x114>
     9d8:	22 e8       	ldi	r18, 0x82	; 130
     9da:	3f ef       	ldi	r19, 0xFF	; 255
     9dc:	26 1b       	sub	r18, r22
     9de:	37 0b       	sbc	r19, r23
     9e0:	2a 31       	cpi	r18, 0x1A	; 26
     9e2:	31 05       	cpc	r19, r1
     9e4:	2c f0       	brlt	.+10     	; 0x9f0 <__pack_f+0x76>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	2a c0       	rjmp	.+84     	; 0xa44 <__pack_f+0xca>
     9f0:	b8 01       	movw	r22, r16
     9f2:	a7 01       	movw	r20, r14
     9f4:	02 2e       	mov	r0, r18
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__pack_f+0x86>
     9f8:	76 95       	lsr	r23
     9fa:	67 95       	ror	r22
     9fc:	57 95       	ror	r21
     9fe:	47 95       	ror	r20
     a00:	0a 94       	dec	r0
     a02:	d2 f7       	brpl	.-12     	; 0x9f8 <__pack_f+0x7e>
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <__pack_f+0x9c>
     a0e:	88 0f       	add	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	aa 1f       	adc	r26, r26
     a14:	bb 1f       	adc	r27, r27
     a16:	2a 95       	dec	r18
     a18:	d2 f7       	brpl	.-12     	; 0xa0e <__pack_f+0x94>
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	a1 09       	sbc	r26, r1
     a1e:	b1 09       	sbc	r27, r1
     a20:	8e 21       	and	r24, r14
     a22:	9f 21       	and	r25, r15
     a24:	a0 23       	and	r26, r16
     a26:	b1 23       	and	r27, r17
     a28:	00 97       	sbiw	r24, 0x00	; 0
     a2a:	a1 05       	cpc	r26, r1
     a2c:	b1 05       	cpc	r27, r1
     a2e:	21 f0       	breq	.+8      	; 0xa38 <__pack_f+0xbe>
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	9a 01       	movw	r18, r20
     a3a:	ab 01       	movw	r20, r22
     a3c:	28 2b       	or	r18, r24
     a3e:	39 2b       	or	r19, r25
     a40:	4a 2b       	or	r20, r26
     a42:	5b 2b       	or	r21, r27
     a44:	da 01       	movw	r26, r20
     a46:	c9 01       	movw	r24, r18
     a48:	8f 77       	andi	r24, 0x7F	; 127
     a4a:	90 70       	andi	r25, 0x00	; 0
     a4c:	a0 70       	andi	r26, 0x00	; 0
     a4e:	b0 70       	andi	r27, 0x00	; 0
     a50:	80 34       	cpi	r24, 0x40	; 64
     a52:	91 05       	cpc	r25, r1
     a54:	a1 05       	cpc	r26, r1
     a56:	b1 05       	cpc	r27, r1
     a58:	39 f4       	brne	.+14     	; 0xa68 <__pack_f+0xee>
     a5a:	27 ff       	sbrs	r18, 7
     a5c:	09 c0       	rjmp	.+18     	; 0xa70 <__pack_f+0xf6>
     a5e:	20 5c       	subi	r18, 0xC0	; 192
     a60:	3f 4f       	sbci	r19, 0xFF	; 255
     a62:	4f 4f       	sbci	r20, 0xFF	; 255
     a64:	5f 4f       	sbci	r21, 0xFF	; 255
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__pack_f+0xf6>
     a68:	21 5c       	subi	r18, 0xC1	; 193
     a6a:	3f 4f       	sbci	r19, 0xFF	; 255
     a6c:	4f 4f       	sbci	r20, 0xFF	; 255
     a6e:	5f 4f       	sbci	r21, 0xFF	; 255
     a70:	e0 e0       	ldi	r30, 0x00	; 0
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	20 30       	cpi	r18, 0x00	; 0
     a76:	a0 e0       	ldi	r26, 0x00	; 0
     a78:	3a 07       	cpc	r19, r26
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	4a 07       	cpc	r20, r26
     a7e:	a0 e4       	ldi	r26, 0x40	; 64
     a80:	5a 07       	cpc	r21, r26
     a82:	10 f0       	brcs	.+4      	; 0xa88 <__pack_f+0x10e>
     a84:	e1 e0       	ldi	r30, 0x01	; 1
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	79 01       	movw	r14, r18
     a8a:	8a 01       	movw	r16, r20
     a8c:	27 c0       	rjmp	.+78     	; 0xadc <__pack_f+0x162>
     a8e:	60 38       	cpi	r22, 0x80	; 128
     a90:	71 05       	cpc	r23, r1
     a92:	64 f5       	brge	.+88     	; 0xaec <__pack_f+0x172>
     a94:	fb 01       	movw	r30, r22
     a96:	e1 58       	subi	r30, 0x81	; 129
     a98:	ff 4f       	sbci	r31, 0xFF	; 255
     a9a:	d8 01       	movw	r26, r16
     a9c:	c7 01       	movw	r24, r14
     a9e:	8f 77       	andi	r24, 0x7F	; 127
     aa0:	90 70       	andi	r25, 0x00	; 0
     aa2:	a0 70       	andi	r26, 0x00	; 0
     aa4:	b0 70       	andi	r27, 0x00	; 0
     aa6:	80 34       	cpi	r24, 0x40	; 64
     aa8:	91 05       	cpc	r25, r1
     aaa:	a1 05       	cpc	r26, r1
     aac:	b1 05       	cpc	r27, r1
     aae:	39 f4       	brne	.+14     	; 0xabe <__pack_f+0x144>
     ab0:	e7 fe       	sbrs	r14, 7
     ab2:	0d c0       	rjmp	.+26     	; 0xace <__pack_f+0x154>
     ab4:	80 e4       	ldi	r24, 0x40	; 64
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	a0 e0       	ldi	r26, 0x00	; 0
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	04 c0       	rjmp	.+8      	; 0xac6 <__pack_f+0x14c>
     abe:	8f e3       	ldi	r24, 0x3F	; 63
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	a0 e0       	ldi	r26, 0x00	; 0
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
     ac6:	e8 0e       	add	r14, r24
     ac8:	f9 1e       	adc	r15, r25
     aca:	0a 1f       	adc	r16, r26
     acc:	1b 1f       	adc	r17, r27
     ace:	17 ff       	sbrs	r17, 7
     ad0:	05 c0       	rjmp	.+10     	; 0xadc <__pack_f+0x162>
     ad2:	16 95       	lsr	r17
     ad4:	07 95       	ror	r16
     ad6:	f7 94       	ror	r15
     ad8:	e7 94       	ror	r14
     ada:	31 96       	adiw	r30, 0x01	; 1
     adc:	87 e0       	ldi	r24, 0x07	; 7
     ade:	16 95       	lsr	r17
     ae0:	07 95       	ror	r16
     ae2:	f7 94       	ror	r15
     ae4:	e7 94       	ror	r14
     ae6:	8a 95       	dec	r24
     ae8:	d1 f7       	brne	.-12     	; 0xade <__pack_f+0x164>
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x17c>
     aec:	ee 24       	eor	r14, r14
     aee:	ff 24       	eor	r15, r15
     af0:	87 01       	movw	r16, r14
     af2:	ef ef       	ldi	r30, 0xFF	; 255
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	6e 2f       	mov	r22, r30
     af8:	67 95       	ror	r22
     afa:	66 27       	eor	r22, r22
     afc:	67 95       	ror	r22
     afe:	90 2f       	mov	r25, r16
     b00:	9f 77       	andi	r25, 0x7F	; 127
     b02:	d7 94       	ror	r13
     b04:	dd 24       	eor	r13, r13
     b06:	d7 94       	ror	r13
     b08:	8e 2f       	mov	r24, r30
     b0a:	86 95       	lsr	r24
     b0c:	49 2f       	mov	r20, r25
     b0e:	46 2b       	or	r20, r22
     b10:	58 2f       	mov	r21, r24
     b12:	5d 29       	or	r21, r13
     b14:	b7 01       	movw	r22, r14
     b16:	ca 01       	movw	r24, r20
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	ef 90       	pop	r14
     b20:	df 90       	pop	r13
     b22:	08 95       	ret

00000b24 <__unpack_f>:
     b24:	fc 01       	movw	r30, r24
     b26:	db 01       	movw	r26, r22
     b28:	40 81       	ld	r20, Z
     b2a:	51 81       	ldd	r21, Z+1	; 0x01
     b2c:	22 81       	ldd	r18, Z+2	; 0x02
     b2e:	62 2f       	mov	r22, r18
     b30:	6f 77       	andi	r22, 0x7F	; 127
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	22 1f       	adc	r18, r18
     b36:	22 27       	eor	r18, r18
     b38:	22 1f       	adc	r18, r18
     b3a:	93 81       	ldd	r25, Z+3	; 0x03
     b3c:	89 2f       	mov	r24, r25
     b3e:	88 0f       	add	r24, r24
     b40:	82 2b       	or	r24, r18
     b42:	28 2f       	mov	r18, r24
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	99 1f       	adc	r25, r25
     b48:	99 27       	eor	r25, r25
     b4a:	99 1f       	adc	r25, r25
     b4c:	11 96       	adiw	r26, 0x01	; 1
     b4e:	9c 93       	st	X, r25
     b50:	11 97       	sbiw	r26, 0x01	; 1
     b52:	21 15       	cp	r18, r1
     b54:	31 05       	cpc	r19, r1
     b56:	a9 f5       	brne	.+106    	; 0xbc2 <__unpack_f+0x9e>
     b58:	41 15       	cp	r20, r1
     b5a:	51 05       	cpc	r21, r1
     b5c:	61 05       	cpc	r22, r1
     b5e:	71 05       	cpc	r23, r1
     b60:	11 f4       	brne	.+4      	; 0xb66 <__unpack_f+0x42>
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	37 c0       	rjmp	.+110    	; 0xbd4 <__unpack_f+0xb0>
     b66:	82 e8       	ldi	r24, 0x82	; 130
     b68:	9f ef       	ldi	r25, 0xFF	; 255
     b6a:	13 96       	adiw	r26, 0x03	; 3
     b6c:	9c 93       	st	X, r25
     b6e:	8e 93       	st	-X, r24
     b70:	12 97       	sbiw	r26, 0x02	; 2
     b72:	9a 01       	movw	r18, r20
     b74:	ab 01       	movw	r20, r22
     b76:	67 e0       	ldi	r22, 0x07	; 7
     b78:	22 0f       	add	r18, r18
     b7a:	33 1f       	adc	r19, r19
     b7c:	44 1f       	adc	r20, r20
     b7e:	55 1f       	adc	r21, r21
     b80:	6a 95       	dec	r22
     b82:	d1 f7       	brne	.-12     	; 0xb78 <__unpack_f+0x54>
     b84:	83 e0       	ldi	r24, 0x03	; 3
     b86:	8c 93       	st	X, r24
     b88:	0d c0       	rjmp	.+26     	; 0xba4 <__unpack_f+0x80>
     b8a:	22 0f       	add	r18, r18
     b8c:	33 1f       	adc	r19, r19
     b8e:	44 1f       	adc	r20, r20
     b90:	55 1f       	adc	r21, r21
     b92:	12 96       	adiw	r26, 0x02	; 2
     b94:	8d 91       	ld	r24, X+
     b96:	9c 91       	ld	r25, X
     b98:	13 97       	sbiw	r26, 0x03	; 3
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	13 96       	adiw	r26, 0x03	; 3
     b9e:	9c 93       	st	X, r25
     ba0:	8e 93       	st	-X, r24
     ba2:	12 97       	sbiw	r26, 0x02	; 2
     ba4:	20 30       	cpi	r18, 0x00	; 0
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	38 07       	cpc	r19, r24
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	48 07       	cpc	r20, r24
     bae:	80 e4       	ldi	r24, 0x40	; 64
     bb0:	58 07       	cpc	r21, r24
     bb2:	58 f3       	brcs	.-42     	; 0xb8a <__unpack_f+0x66>
     bb4:	14 96       	adiw	r26, 0x04	; 4
     bb6:	2d 93       	st	X+, r18
     bb8:	3d 93       	st	X+, r19
     bba:	4d 93       	st	X+, r20
     bbc:	5c 93       	st	X, r21
     bbe:	17 97       	sbiw	r26, 0x07	; 7
     bc0:	08 95       	ret
     bc2:	2f 3f       	cpi	r18, 0xFF	; 255
     bc4:	31 05       	cpc	r19, r1
     bc6:	79 f4       	brne	.+30     	; 0xbe6 <__unpack_f+0xc2>
     bc8:	41 15       	cp	r20, r1
     bca:	51 05       	cpc	r21, r1
     bcc:	61 05       	cpc	r22, r1
     bce:	71 05       	cpc	r23, r1
     bd0:	19 f4       	brne	.+6      	; 0xbd8 <__unpack_f+0xb4>
     bd2:	84 e0       	ldi	r24, 0x04	; 4
     bd4:	8c 93       	st	X, r24
     bd6:	08 95       	ret
     bd8:	64 ff       	sbrs	r22, 4
     bda:	03 c0       	rjmp	.+6      	; 0xbe2 <__unpack_f+0xbe>
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	8c 93       	st	X, r24
     be0:	12 c0       	rjmp	.+36     	; 0xc06 <__unpack_f+0xe2>
     be2:	1c 92       	st	X, r1
     be4:	10 c0       	rjmp	.+32     	; 0xc06 <__unpack_f+0xe2>
     be6:	2f 57       	subi	r18, 0x7F	; 127
     be8:	30 40       	sbci	r19, 0x00	; 0
     bea:	13 96       	adiw	r26, 0x03	; 3
     bec:	3c 93       	st	X, r19
     bee:	2e 93       	st	-X, r18
     bf0:	12 97       	sbiw	r26, 0x02	; 2
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	8c 93       	st	X, r24
     bf6:	87 e0       	ldi	r24, 0x07	; 7
     bf8:	44 0f       	add	r20, r20
     bfa:	55 1f       	adc	r21, r21
     bfc:	66 1f       	adc	r22, r22
     bfe:	77 1f       	adc	r23, r23
     c00:	8a 95       	dec	r24
     c02:	d1 f7       	brne	.-12     	; 0xbf8 <__unpack_f+0xd4>
     c04:	70 64       	ori	r23, 0x40	; 64
     c06:	14 96       	adiw	r26, 0x04	; 4
     c08:	4d 93       	st	X+, r20
     c0a:	5d 93       	st	X+, r21
     c0c:	6d 93       	st	X+, r22
     c0e:	7c 93       	st	X, r23
     c10:	17 97       	sbiw	r26, 0x07	; 7
     c12:	08 95       	ret

00000c14 <__fpcmp_parts_f>:
     c14:	1f 93       	push	r17
     c16:	dc 01       	movw	r26, r24
     c18:	fb 01       	movw	r30, r22
     c1a:	9c 91       	ld	r25, X
     c1c:	92 30       	cpi	r25, 0x02	; 2
     c1e:	08 f4       	brcc	.+2      	; 0xc22 <__fpcmp_parts_f+0xe>
     c20:	47 c0       	rjmp	.+142    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c22:	80 81       	ld	r24, Z
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	08 f4       	brcc	.+2      	; 0xc2a <__fpcmp_parts_f+0x16>
     c28:	43 c0       	rjmp	.+134    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c2a:	94 30       	cpi	r25, 0x04	; 4
     c2c:	51 f4       	brne	.+20     	; 0xc42 <__fpcmp_parts_f+0x2e>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	84 30       	cpi	r24, 0x04	; 4
     c34:	99 f5       	brne	.+102    	; 0xc9c <__fpcmp_parts_f+0x88>
     c36:	81 81       	ldd	r24, Z+1	; 0x01
     c38:	68 2f       	mov	r22, r24
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	61 1b       	sub	r22, r17
     c3e:	71 09       	sbc	r23, r1
     c40:	3f c0       	rjmp	.+126    	; 0xcc0 <__fpcmp_parts_f+0xac>
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	21 f0       	breq	.+8      	; 0xc4e <__fpcmp_parts_f+0x3a>
     c46:	92 30       	cpi	r25, 0x02	; 2
     c48:	31 f4       	brne	.+12     	; 0xc56 <__fpcmp_parts_f+0x42>
     c4a:	82 30       	cpi	r24, 0x02	; 2
     c4c:	b9 f1       	breq	.+110    	; 0xcbc <__fpcmp_parts_f+0xa8>
     c4e:	81 81       	ldd	r24, Z+1	; 0x01
     c50:	88 23       	and	r24, r24
     c52:	89 f1       	breq	.+98     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     c54:	2d c0       	rjmp	.+90     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c56:	11 96       	adiw	r26, 0x01	; 1
     c58:	1c 91       	ld	r17, X
     c5a:	11 97       	sbiw	r26, 0x01	; 1
     c5c:	82 30       	cpi	r24, 0x02	; 2
     c5e:	f1 f0       	breq	.+60     	; 0xc9c <__fpcmp_parts_f+0x88>
     c60:	81 81       	ldd	r24, Z+1	; 0x01
     c62:	18 17       	cp	r17, r24
     c64:	d9 f4       	brne	.+54     	; 0xc9c <__fpcmp_parts_f+0x88>
     c66:	12 96       	adiw	r26, 0x02	; 2
     c68:	2d 91       	ld	r18, X+
     c6a:	3c 91       	ld	r19, X
     c6c:	13 97       	sbiw	r26, 0x03	; 3
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	93 81       	ldd	r25, Z+3	; 0x03
     c72:	82 17       	cp	r24, r18
     c74:	93 07       	cpc	r25, r19
     c76:	94 f0       	brlt	.+36     	; 0xc9c <__fpcmp_parts_f+0x88>
     c78:	28 17       	cp	r18, r24
     c7a:	39 07       	cpc	r19, r25
     c7c:	bc f0       	brlt	.+46     	; 0xcac <__fpcmp_parts_f+0x98>
     c7e:	14 96       	adiw	r26, 0x04	; 4
     c80:	8d 91       	ld	r24, X+
     c82:	9d 91       	ld	r25, X+
     c84:	0d 90       	ld	r0, X+
     c86:	bc 91       	ld	r27, X
     c88:	a0 2d       	mov	r26, r0
     c8a:	24 81       	ldd	r18, Z+4	; 0x04
     c8c:	35 81       	ldd	r19, Z+5	; 0x05
     c8e:	46 81       	ldd	r20, Z+6	; 0x06
     c90:	57 81       	ldd	r21, Z+7	; 0x07
     c92:	28 17       	cp	r18, r24
     c94:	39 07       	cpc	r19, r25
     c96:	4a 07       	cpc	r20, r26
     c98:	5b 07       	cpc	r21, r27
     c9a:	18 f4       	brcc	.+6      	; 0xca2 <__fpcmp_parts_f+0x8e>
     c9c:	11 23       	and	r17, r17
     c9e:	41 f0       	breq	.+16     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     ca0:	0a c0       	rjmp	.+20     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     ca2:	82 17       	cp	r24, r18
     ca4:	93 07       	cpc	r25, r19
     ca6:	a4 07       	cpc	r26, r20
     ca8:	b5 07       	cpc	r27, r21
     caa:	40 f4       	brcc	.+16     	; 0xcbc <__fpcmp_parts_f+0xa8>
     cac:	11 23       	and	r17, r17
     cae:	19 f0       	breq	.+6      	; 0xcb6 <__fpcmp_parts_f+0xa2>
     cb0:	61 e0       	ldi	r22, 0x01	; 1
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	05 c0       	rjmp	.+10     	; 0xcc0 <__fpcmp_parts_f+0xac>
     cb6:	6f ef       	ldi	r22, 0xFF	; 255
     cb8:	7f ef       	ldi	r23, 0xFF	; 255
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <__fpcmp_parts_f+0xac>
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	cb 01       	movw	r24, r22
     cc2:	1f 91       	pop	r17
     cc4:	08 95       	ret

00000cc6 <ADC_Void_Init>:
#include "LCD_Config.h"
#include "LCD_Interface.h"
#include "LCD_Private.h"
#include <util/delay.h>

void ADC_Void_Init(void){
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
	//Adc enable
	Set_Bit(ADCSRA,7);
     cce:	a6 e2       	ldi	r26, 0x26	; 38
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e6 e2       	ldi	r30, 0x26	; 38
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	80 68       	ori	r24, 0x80	; 128
     cda:	8c 93       	st	X, r24
	//prescalar128
	Set_Bit(ADCSRA,0);
     cdc:	a6 e2       	ldi	r26, 0x26	; 38
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	e6 e2       	ldi	r30, 0x26	; 38
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	81 60       	ori	r24, 0x01	; 1
     ce8:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,1);
     cea:	a6 e2       	ldi	r26, 0x26	; 38
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e6 e2       	ldi	r30, 0x26	; 38
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	82 60       	ori	r24, 0x02	; 2
     cf6:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,2);
     cf8:	a6 e2       	ldi	r26, 0x26	; 38
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	e6 e2       	ldi	r30, 0x26	; 38
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	84 60       	ori	r24, 0x04	; 4
     d04:	8c 93       	st	X, r24
	//set ref voltage avcc
	Clear_Bit(ADMUX,7);
     d06:	a7 e2       	ldi	r26, 0x27	; 39
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e7 e2       	ldi	r30, 0x27	; 39
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	8f 77       	andi	r24, 0x7F	; 127
     d12:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,6);
     d14:	a6 e2       	ldi	r26, 0x26	; 38
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e6 e2       	ldi	r30, 0x26	; 38
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	80 64       	ori	r24, 0x40	; 64
     d20:	8c 93       	st	X, r24
	//left adjustment
	Set_Bit(ADMUX,6);
     d22:	a7 e2       	ldi	r26, 0x27	; 39
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e7 e2       	ldi	r30, 0x27	; 39
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	80 64       	ori	r24, 0x40	; 64
     d2e:	8c 93       	st	X, r24

}
     d30:	cf 91       	pop	r28
     d32:	df 91       	pop	r29
     d34:	08 95       	ret

00000d36 <ADC_U8_Read_channel>:

u16 ADC_U8_Read_channel(u8 channel){
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	00 d0       	rcall	.+0      	; 0xd3c <ADC_U8_Read_channel+0x6>
     d3c:	0f 92       	push	r0
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
     d42:	8b 83       	std	Y+3, r24	; 0x03
	u16 result;
	ADMUX &= 0b11100000;
     d44:	a7 e2       	ldi	r26, 0x27	; 39
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	e7 e2       	ldi	r30, 0x27	; 39
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	80 7e       	andi	r24, 0xE0	; 224
     d50:	8c 93       	st	X, r24
	ADMUX |= channel;
     d52:	a7 e2       	ldi	r26, 0x27	; 39
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e7 e2       	ldi	r30, 0x27	; 39
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	90 81       	ld	r25, Z
     d5c:	8b 81       	ldd	r24, Y+3	; 0x03
     d5e:	89 2b       	or	r24, r25
     d60:	8c 93       	st	X, r24
	//start converion
	Set_Bit(ADCSRA,6);
     d62:	a6 e2       	ldi	r26, 0x26	; 38
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e6 e2       	ldi	r30, 0x26	; 38
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	80 64       	ori	r24, 0x40	; 64
     d6e:	8c 93       	st	X, r24

	while(Get_Bit(ADCSRA,4)  != 1);
     d70:	e6 e2       	ldi	r30, 0x26	; 38
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	82 95       	swap	r24
     d78:	8f 70       	andi	r24, 0x0F	; 15
     d7a:	88 2f       	mov	r24, r24
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	81 70       	andi	r24, 0x01	; 1
     d80:	90 70       	andi	r25, 0x00	; 0
     d82:	00 97       	sbiw	r24, 0x00	; 0
     d84:	a9 f3       	breq	.-22     	; 0xd70 <ADC_U8_Read_channel+0x3a>
	Set_Bit(ADCSRA,4);
     d86:	a6 e2       	ldi	r26, 0x26	; 38
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e6 e2       	ldi	r30, 0x26	; 38
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	80 61       	ori	r24, 0x10	; 16
     d92:	8c 93       	st	X, r24
	result = ADCL >> 6;
     d94:	e4 e2       	ldi	r30, 0x24	; 36
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	82 95       	swap	r24
     d9c:	86 95       	lsr	r24
     d9e:	86 95       	lsr	r24
     da0:	83 70       	andi	r24, 0x03	; 3
     da2:	88 2f       	mov	r24, r24
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	9a 83       	std	Y+2, r25	; 0x02
     da8:	89 83       	std	Y+1, r24	; 0x01
	result |= ((u16)ADCH << (2));
     daa:	e5 e2       	ldi	r30, 0x25	; 37
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	88 2f       	mov	r24, r24
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	9c 01       	movw	r18, r24
     db6:	22 0f       	add	r18, r18
     db8:	33 1f       	adc	r19, r19
     dba:	22 0f       	add	r18, r18
     dbc:	33 1f       	adc	r19, r19
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	9a 81       	ldd	r25, Y+2	; 0x02
     dc2:	82 2b       	or	r24, r18
     dc4:	93 2b       	or	r25, r19
     dc6:	9a 83       	std	Y+2, r25	; 0x02
     dc8:	89 83       	std	Y+1, r24	; 0x01

	return result;
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	9a 81       	ldd	r25, Y+2	; 0x02
}
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	cf 91       	pop	r28
     dd6:	df 91       	pop	r29
     dd8:	08 95       	ret

00000dda <DIO_U8_Set_Pin_Value>:
#include "DIO_Private.h"
#include <avr/delay.h>



u8 DIO_U8_Set_Pin_Value(u8 Copy_U8_Port_ID, u8 Copy_U8_Pin_ID, u8 Copy_U8_Pin_Val){
     dda:	df 93       	push	r29
     ddc:	cf 93       	push	r28
     dde:	00 d0       	rcall	.+0      	; 0xde0 <DIO_U8_Set_Pin_Value+0x6>
     de0:	00 d0       	rcall	.+0      	; 0xde2 <DIO_U8_Set_Pin_Value+0x8>
     de2:	00 d0       	rcall	.+0      	; 0xde4 <DIO_U8_Set_Pin_Value+0xa>
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	89 83       	std	Y+1, r24	; 0x01
     dea:	6a 83       	std	Y+2, r22	; 0x02
     dec:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_U8_Pin_ID >=PIN0) && (Copy_U8_Pin_ID <=PIN7) && (Copy_U8_Port_ID <= GROUP_D) && (Copy_U8_Port_ID >= GROUP_A)){
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	88 30       	cpi	r24, 0x08	; 8
     df2:	08 f0       	brcs	.+2      	; 0xdf6 <DIO_U8_Set_Pin_Value+0x1c>
     df4:	e1 c0       	rjmp	.+450    	; 0xfb8 <DIO_U8_Set_Pin_Value+0x1de>
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	84 30       	cpi	r24, 0x04	; 4
     dfa:	08 f0       	brcs	.+2      	; 0xdfe <DIO_U8_Set_Pin_Value+0x24>
     dfc:	dd c0       	rjmp	.+442    	; 0xfb8 <DIO_U8_Set_Pin_Value+0x1de>
		if((Copy_U8_Pin_Val == HIGH) || (Copy_U8_Pin_Val == LOW )){
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	81 30       	cpi	r24, 0x01	; 1
     e02:	21 f0       	breq	.+8      	; 0xe0c <DIO_U8_Set_Pin_Value+0x32>
     e04:	8b 81       	ldd	r24, Y+3	; 0x03
     e06:	88 23       	and	r24, r24
     e08:	09 f0       	breq	.+2      	; 0xe0c <DIO_U8_Set_Pin_Value+0x32>
     e0a:	d3 c0       	rjmp	.+422    	; 0xfb2 <DIO_U8_Set_Pin_Value+0x1d8>
			switch (Copy_U8_Port_ID){
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	3e 83       	std	Y+6, r19	; 0x06
     e14:	2d 83       	std	Y+5, r18	; 0x05
     e16:	8d 81       	ldd	r24, Y+5	; 0x05
     e18:	9e 81       	ldd	r25, Y+6	; 0x06
     e1a:	81 30       	cpi	r24, 0x01	; 1
     e1c:	91 05       	cpc	r25, r1
     e1e:	09 f4       	brne	.+2      	; 0xe22 <DIO_U8_Set_Pin_Value+0x48>
     e20:	43 c0       	rjmp	.+134    	; 0xea8 <DIO_U8_Set_Pin_Value+0xce>
     e22:	2d 81       	ldd	r18, Y+5	; 0x05
     e24:	3e 81       	ldd	r19, Y+6	; 0x06
     e26:	22 30       	cpi	r18, 0x02	; 2
     e28:	31 05       	cpc	r19, r1
     e2a:	2c f4       	brge	.+10     	; 0xe36 <DIO_U8_Set_Pin_Value+0x5c>
     e2c:	8d 81       	ldd	r24, Y+5	; 0x05
     e2e:	9e 81       	ldd	r25, Y+6	; 0x06
     e30:	00 97       	sbiw	r24, 0x00	; 0
     e32:	71 f0       	breq	.+28     	; 0xe50 <DIO_U8_Set_Pin_Value+0x76>
     e34:	bc c0       	rjmp	.+376    	; 0xfae <DIO_U8_Set_Pin_Value+0x1d4>
     e36:	2d 81       	ldd	r18, Y+5	; 0x05
     e38:	3e 81       	ldd	r19, Y+6	; 0x06
     e3a:	22 30       	cpi	r18, 0x02	; 2
     e3c:	31 05       	cpc	r19, r1
     e3e:	09 f4       	brne	.+2      	; 0xe42 <DIO_U8_Set_Pin_Value+0x68>
     e40:	5f c0       	rjmp	.+190    	; 0xf00 <DIO_U8_Set_Pin_Value+0x126>
     e42:	8d 81       	ldd	r24, Y+5	; 0x05
     e44:	9e 81       	ldd	r25, Y+6	; 0x06
     e46:	83 30       	cpi	r24, 0x03	; 3
     e48:	91 05       	cpc	r25, r1
     e4a:	09 f4       	brne	.+2      	; 0xe4e <DIO_U8_Set_Pin_Value+0x74>
     e4c:	85 c0       	rjmp	.+266    	; 0xf58 <DIO_U8_Set_Pin_Value+0x17e>
     e4e:	af c0       	rjmp	.+350    	; 0xfae <DIO_U8_Set_Pin_Value+0x1d4>
			case GROUP_A:
				Assign_Bit(DIO_U8_PORTA,Copy_U8_Pin_ID,Copy_U8_Pin_Val);
     e50:	8b 81       	ldd	r24, Y+3	; 0x03
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	a1 f4       	brne	.+40     	; 0xe7e <DIO_U8_Set_Pin_Value+0xa4>
     e56:	ab e3       	ldi	r26, 0x3B	; 59
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	eb e3       	ldi	r30, 0x3B	; 59
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	48 2f       	mov	r20, r24
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	02 2e       	mov	r0, r18
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <DIO_U8_Set_Pin_Value+0x9a>
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	0a 94       	dec	r0
     e76:	e2 f7       	brpl	.-8      	; 0xe70 <DIO_U8_Set_Pin_Value+0x96>
     e78:	84 2b       	or	r24, r20
     e7a:	8c 93       	st	X, r24
     e7c:	98 c0       	rjmp	.+304    	; 0xfae <DIO_U8_Set_Pin_Value+0x1d4>
     e7e:	ab e3       	ldi	r26, 0x3B	; 59
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	eb e3       	ldi	r30, 0x3B	; 59
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	48 2f       	mov	r20, r24
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	02 2e       	mov	r0, r18
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <DIO_U8_Set_Pin_Value+0xc2>
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	0a 94       	dec	r0
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <DIO_U8_Set_Pin_Value+0xbe>
     ea0:	80 95       	com	r24
     ea2:	84 23       	and	r24, r20
     ea4:	8c 93       	st	X, r24
     ea6:	83 c0       	rjmp	.+262    	; 0xfae <DIO_U8_Set_Pin_Value+0x1d4>
				break;
			case GROUP_B:
				Assign_Bit(DIO_U8_PORTB,Copy_U8_Pin_ID,Copy_U8_Pin_Val);
     ea8:	8b 81       	ldd	r24, Y+3	; 0x03
     eaa:	81 30       	cpi	r24, 0x01	; 1
     eac:	a1 f4       	brne	.+40     	; 0xed6 <DIO_U8_Set_Pin_Value+0xfc>
     eae:	a8 e3       	ldi	r26, 0x38	; 56
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e8 e3       	ldi	r30, 0x38	; 56
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	48 2f       	mov	r20, r24
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	02 2e       	mov	r0, r18
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <DIO_U8_Set_Pin_Value+0xf2>
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	0a 94       	dec	r0
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <DIO_U8_Set_Pin_Value+0xee>
     ed0:	84 2b       	or	r24, r20
     ed2:	8c 93       	st	X, r24
     ed4:	6c c0       	rjmp	.+216    	; 0xfae <DIO_U8_Set_Pin_Value+0x1d4>
     ed6:	a8 e3       	ldi	r26, 0x38	; 56
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e8 e3       	ldi	r30, 0x38	; 56
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	48 2f       	mov	r20, r24
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	02 2e       	mov	r0, r18
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <DIO_U8_Set_Pin_Value+0x11a>
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	0a 94       	dec	r0
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <DIO_U8_Set_Pin_Value+0x116>
     ef8:	80 95       	com	r24
     efa:	84 23       	and	r24, r20
     efc:	8c 93       	st	X, r24
     efe:	57 c0       	rjmp	.+174    	; 0xfae <DIO_U8_Set_Pin_Value+0x1d4>
				break;
			case GROUP_C:
				Assign_Bit(DIO_U8_PORTC,Copy_U8_Pin_ID,Copy_U8_Pin_Val);
     f00:	8b 81       	ldd	r24, Y+3	; 0x03
     f02:	81 30       	cpi	r24, 0x01	; 1
     f04:	a1 f4       	brne	.+40     	; 0xf2e <DIO_U8_Set_Pin_Value+0x154>
     f06:	a5 e3       	ldi	r26, 0x35	; 53
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e5 e3       	ldi	r30, 0x35	; 53
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	48 2f       	mov	r20, r24
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	02 2e       	mov	r0, r18
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <DIO_U8_Set_Pin_Value+0x14a>
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	0a 94       	dec	r0
     f26:	e2 f7       	brpl	.-8      	; 0xf20 <DIO_U8_Set_Pin_Value+0x146>
     f28:	84 2b       	or	r24, r20
     f2a:	8c 93       	st	X, r24
     f2c:	40 c0       	rjmp	.+128    	; 0xfae <DIO_U8_Set_Pin_Value+0x1d4>
     f2e:	a5 e3       	ldi	r26, 0x35	; 53
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e5 e3       	ldi	r30, 0x35	; 53
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	48 2f       	mov	r20, r24
     f3a:	8a 81       	ldd	r24, Y+2	; 0x02
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	02 2e       	mov	r0, r18
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <DIO_U8_Set_Pin_Value+0x172>
     f48:	88 0f       	add	r24, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	0a 94       	dec	r0
     f4e:	e2 f7       	brpl	.-8      	; 0xf48 <DIO_U8_Set_Pin_Value+0x16e>
     f50:	80 95       	com	r24
     f52:	84 23       	and	r24, r20
     f54:	8c 93       	st	X, r24
     f56:	2b c0       	rjmp	.+86     	; 0xfae <DIO_U8_Set_Pin_Value+0x1d4>
				break;
			case GROUP_D:
				Assign_Bit(DIO_U8_PORTD,Copy_U8_Pin_ID,Copy_U8_Pin_Val);
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	81 30       	cpi	r24, 0x01	; 1
     f5c:	a1 f4       	brne	.+40     	; 0xf86 <DIO_U8_Set_Pin_Value+0x1ac>
     f5e:	a2 e3       	ldi	r26, 0x32	; 50
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e2 e3       	ldi	r30, 0x32	; 50
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	48 2f       	mov	r20, r24
     f6a:	8a 81       	ldd	r24, Y+2	; 0x02
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	02 2e       	mov	r0, r18
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <DIO_U8_Set_Pin_Value+0x1a2>
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	0a 94       	dec	r0
     f7e:	e2 f7       	brpl	.-8      	; 0xf78 <DIO_U8_Set_Pin_Value+0x19e>
     f80:	84 2b       	or	r24, r20
     f82:	8c 93       	st	X, r24
     f84:	14 c0       	rjmp	.+40     	; 0xfae <DIO_U8_Set_Pin_Value+0x1d4>
     f86:	a2 e3       	ldi	r26, 0x32	; 50
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e2 e3       	ldi	r30, 0x32	; 50
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	48 2f       	mov	r20, r24
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	02 2e       	mov	r0, r18
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <DIO_U8_Set_Pin_Value+0x1ca>
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	0a 94       	dec	r0
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <DIO_U8_Set_Pin_Value+0x1c6>
     fa8:	80 95       	com	r24
     faa:	84 23       	and	r24, r20
     fac:	8c 93       	st	X, r24
		}
	}
	else{
		return INVALID_PIN_ID;
	}
	return Success;
     fae:	1c 82       	std	Y+4, r1	; 0x04
     fb0:	05 c0       	rjmp	.+10     	; 0xfbc <DIO_U8_Set_Pin_Value+0x1e2>
				break;

			}
		}
		else{
			return INVALID_PIN_VALUE;
     fb2:	9a ef       	ldi	r25, 0xFA	; 250
     fb4:	9c 83       	std	Y+4, r25	; 0x04
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <DIO_U8_Set_Pin_Value+0x1e2>
		}
	}
	else{
		return INVALID_PIN_ID;
     fb8:	2f ef       	ldi	r18, 0xFF	; 255
     fba:	2c 83       	std	Y+4, r18	; 0x04
     fbc:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	return Success;
}
     fbe:	26 96       	adiw	r28, 0x06	; 6
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	f8 94       	cli
     fc4:	de bf       	out	0x3e, r29	; 62
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	cd bf       	out	0x3d, r28	; 61
     fca:	cf 91       	pop	r28
     fcc:	df 91       	pop	r29
     fce:	08 95       	ret

00000fd0 <DIO_U8_Get_Pin_Value>:


u8 DIO_U8_Get_Pin_Value(u8 Copy_U8_Port_ID, u8 Copy_U8_Pin_ID){
     fd0:	df 93       	push	r29
     fd2:	cf 93       	push	r28
     fd4:	00 d0       	rcall	.+0      	; 0xfd6 <DIO_U8_Get_Pin_Value+0x6>
     fd6:	00 d0       	rcall	.+0      	; 0xfd8 <DIO_U8_Get_Pin_Value+0x8>
     fd8:	00 d0       	rcall	.+0      	; 0xfda <DIO_U8_Get_Pin_Value+0xa>
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
     fde:	8a 83       	std	Y+2, r24	; 0x02
     fe0:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value;
	if ((Copy_U8_Port_ID <= GROUP_D) && (Copy_U8_Port_ID >= GROUP_A)){
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	84 30       	cpi	r24, 0x04	; 4
     fe6:	08 f0       	brcs	.+2      	; 0xfea <DIO_U8_Get_Pin_Value+0x1a>
     fe8:	71 c0       	rjmp	.+226    	; 0x10cc <DIO_U8_Get_Pin_Value+0xfc>
		if((Copy_U8_Pin_ID >=PIN0) && (Copy_U8_Pin_ID <=PIN7) ){
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	88 30       	cpi	r24, 0x08	; 8
     fee:	08 f0       	brcs	.+2      	; 0xff2 <DIO_U8_Get_Pin_Value+0x22>
     ff0:	6a c0       	rjmp	.+212    	; 0x10c6 <DIO_U8_Get_Pin_Value+0xf6>
			switch(Copy_U8_Port_ID){
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	3e 83       	std	Y+6, r19	; 0x06
     ffa:	2d 83       	std	Y+5, r18	; 0x05
     ffc:	4d 81       	ldd	r20, Y+5	; 0x05
     ffe:	5e 81       	ldd	r21, Y+6	; 0x06
    1000:	41 30       	cpi	r20, 0x01	; 1
    1002:	51 05       	cpc	r21, r1
    1004:	41 f1       	breq	.+80     	; 0x1056 <DIO_U8_Get_Pin_Value+0x86>
    1006:	8d 81       	ldd	r24, Y+5	; 0x05
    1008:	9e 81       	ldd	r25, Y+6	; 0x06
    100a:	82 30       	cpi	r24, 0x02	; 2
    100c:	91 05       	cpc	r25, r1
    100e:	34 f4       	brge	.+12     	; 0x101c <DIO_U8_Get_Pin_Value+0x4c>
    1010:	2d 81       	ldd	r18, Y+5	; 0x05
    1012:	3e 81       	ldd	r19, Y+6	; 0x06
    1014:	21 15       	cp	r18, r1
    1016:	31 05       	cpc	r19, r1
    1018:	61 f0       	breq	.+24     	; 0x1032 <DIO_U8_Get_Pin_Value+0x62>
    101a:	52 c0       	rjmp	.+164    	; 0x10c0 <DIO_U8_Get_Pin_Value+0xf0>
    101c:	4d 81       	ldd	r20, Y+5	; 0x05
    101e:	5e 81       	ldd	r21, Y+6	; 0x06
    1020:	42 30       	cpi	r20, 0x02	; 2
    1022:	51 05       	cpc	r21, r1
    1024:	51 f1       	breq	.+84     	; 0x107a <DIO_U8_Get_Pin_Value+0xaa>
    1026:	8d 81       	ldd	r24, Y+5	; 0x05
    1028:	9e 81       	ldd	r25, Y+6	; 0x06
    102a:	83 30       	cpi	r24, 0x03	; 3
    102c:	91 05       	cpc	r25, r1
    102e:	b9 f1       	breq	.+110    	; 0x109e <DIO_U8_Get_Pin_Value+0xce>
    1030:	47 c0       	rjmp	.+142    	; 0x10c0 <DIO_U8_Get_Pin_Value+0xf0>
			case GROUP_A:
				pin_value = Get_Bit(DIO_U8_PINA,Copy_U8_Pin_ID);
    1032:	e9 e3       	ldi	r30, 0x39	; 57
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	88 2f       	mov	r24, r24
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	a9 01       	movw	r20, r18
    1044:	02 c0       	rjmp	.+4      	; 0x104a <DIO_U8_Get_Pin_Value+0x7a>
    1046:	55 95       	asr	r21
    1048:	47 95       	ror	r20
    104a:	8a 95       	dec	r24
    104c:	e2 f7       	brpl	.-8      	; 0x1046 <DIO_U8_Get_Pin_Value+0x76>
    104e:	ca 01       	movw	r24, r20
    1050:	81 70       	andi	r24, 0x01	; 1
    1052:	89 83       	std	Y+1, r24	; 0x01
    1054:	35 c0       	rjmp	.+106    	; 0x10c0 <DIO_U8_Get_Pin_Value+0xf0>
				break;
			case GROUP_B:
				pin_value = Get_Bit(DIO_U8_PINB,Copy_U8_Pin_ID);
    1056:	e6 e3       	ldi	r30, 0x36	; 54
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	88 2f       	mov	r24, r24
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	a9 01       	movw	r20, r18
    1068:	02 c0       	rjmp	.+4      	; 0x106e <DIO_U8_Get_Pin_Value+0x9e>
    106a:	55 95       	asr	r21
    106c:	47 95       	ror	r20
    106e:	8a 95       	dec	r24
    1070:	e2 f7       	brpl	.-8      	; 0x106a <DIO_U8_Get_Pin_Value+0x9a>
    1072:	ca 01       	movw	r24, r20
    1074:	81 70       	andi	r24, 0x01	; 1
    1076:	89 83       	std	Y+1, r24	; 0x01
    1078:	23 c0       	rjmp	.+70     	; 0x10c0 <DIO_U8_Get_Pin_Value+0xf0>
				break;
			case GROUP_C:
				pin_value = Get_Bit(DIO_U8_PINC,Copy_U8_Pin_ID);
    107a:	e3 e3       	ldi	r30, 0x33	; 51
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	8b 81       	ldd	r24, Y+3	; 0x03
    1086:	88 2f       	mov	r24, r24
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	a9 01       	movw	r20, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <DIO_U8_Get_Pin_Value+0xc2>
    108e:	55 95       	asr	r21
    1090:	47 95       	ror	r20
    1092:	8a 95       	dec	r24
    1094:	e2 f7       	brpl	.-8      	; 0x108e <DIO_U8_Get_Pin_Value+0xbe>
    1096:	ca 01       	movw	r24, r20
    1098:	81 70       	andi	r24, 0x01	; 1
    109a:	89 83       	std	Y+1, r24	; 0x01
    109c:	11 c0       	rjmp	.+34     	; 0x10c0 <DIO_U8_Get_Pin_Value+0xf0>
				break;
			case GROUP_D:
				pin_value = Get_Bit(DIO_U8_PIND,Copy_U8_Pin_ID);
    109e:	e0 e3       	ldi	r30, 0x30	; 48
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	88 2f       	mov	r24, r24
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	a9 01       	movw	r20, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <DIO_U8_Get_Pin_Value+0xe6>
    10b2:	55 95       	asr	r21
    10b4:	47 95       	ror	r20
    10b6:	8a 95       	dec	r24
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <DIO_U8_Get_Pin_Value+0xe2>
    10ba:	ca 01       	movw	r24, r20
    10bc:	81 70       	andi	r24, 0x01	; 1
    10be:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	else{
		return INVALID_PORT_ID;
	}
	return pin_value;
    10c0:	59 81       	ldd	r21, Y+1	; 0x01
    10c2:	5c 83       	std	Y+4, r21	; 0x04
    10c4:	05 c0       	rjmp	.+10     	; 0x10d0 <DIO_U8_Get_Pin_Value+0x100>
				pin_value = Get_Bit(DIO_U8_PIND,Copy_U8_Pin_ID);
				break;
			}
		}
		else{
			return INVALID_PIN_ID;
    10c6:	8f ef       	ldi	r24, 0xFF	; 255
    10c8:	8c 83       	std	Y+4, r24	; 0x04
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <DIO_U8_Get_Pin_Value+0x100>
		}
	}
	else{
		return INVALID_PORT_ID;
    10cc:	95 ef       	ldi	r25, 0xF5	; 245
    10ce:	9c 83       	std	Y+4, r25	; 0x04
    10d0:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	return pin_value;
}
    10d2:	26 96       	adiw	r28, 0x06	; 6
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	de bf       	out	0x3e, r29	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	cd bf       	out	0x3d, r28	; 61
    10de:	cf 91       	pop	r28
    10e0:	df 91       	pop	r29
    10e2:	08 95       	ret

000010e4 <DIO_U8_Set_Pin_Direction>:

u8 DIO_U8_Set_Pin_Direction(u8 Copy_U8_Port_ID, u8 Copy_U8_Pin_ID, u8 Copy_U8_Pin_Dir){
    10e4:	df 93       	push	r29
    10e6:	cf 93       	push	r28
    10e8:	00 d0       	rcall	.+0      	; 0x10ea <DIO_U8_Set_Pin_Direction+0x6>
    10ea:	00 d0       	rcall	.+0      	; 0x10ec <DIO_U8_Set_Pin_Direction+0x8>
    10ec:	00 d0       	rcall	.+0      	; 0x10ee <DIO_U8_Set_Pin_Direction+0xa>
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
    10f2:	89 83       	std	Y+1, r24	; 0x01
    10f4:	6a 83       	std	Y+2, r22	; 0x02
    10f6:	4b 83       	std	Y+3, r20	; 0x03
	if( (Copy_U8_Port_ID <= GROUP_D) && (Copy_U8_Port_ID >= GROUP_A)){
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	84 30       	cpi	r24, 0x04	; 4
    10fc:	08 f0       	brcs	.+2      	; 0x1100 <DIO_U8_Set_Pin_Direction+0x1c>
    10fe:	da c0       	rjmp	.+436    	; 0x12b4 <DIO_U8_Set_Pin_Direction+0x1d0>
		if((Copy_U8_Pin_ID >=PIN0) && (Copy_U8_Pin_ID <=PIN7)){
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	88 30       	cpi	r24, 0x08	; 8
    1104:	08 f0       	brcs	.+2      	; 0x1108 <DIO_U8_Set_Pin_Direction+0x24>
    1106:	d3 c0       	rjmp	.+422    	; 0x12ae <DIO_U8_Set_Pin_Direction+0x1ca>
			switch (Copy_U8_Port_ID){
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	3e 83       	std	Y+6, r19	; 0x06
    1110:	2d 83       	std	Y+5, r18	; 0x05
    1112:	8d 81       	ldd	r24, Y+5	; 0x05
    1114:	9e 81       	ldd	r25, Y+6	; 0x06
    1116:	81 30       	cpi	r24, 0x01	; 1
    1118:	91 05       	cpc	r25, r1
    111a:	09 f4       	brne	.+2      	; 0x111e <DIO_U8_Set_Pin_Direction+0x3a>
    111c:	43 c0       	rjmp	.+134    	; 0x11a4 <DIO_U8_Set_Pin_Direction+0xc0>
    111e:	2d 81       	ldd	r18, Y+5	; 0x05
    1120:	3e 81       	ldd	r19, Y+6	; 0x06
    1122:	22 30       	cpi	r18, 0x02	; 2
    1124:	31 05       	cpc	r19, r1
    1126:	2c f4       	brge	.+10     	; 0x1132 <DIO_U8_Set_Pin_Direction+0x4e>
    1128:	8d 81       	ldd	r24, Y+5	; 0x05
    112a:	9e 81       	ldd	r25, Y+6	; 0x06
    112c:	00 97       	sbiw	r24, 0x00	; 0
    112e:	71 f0       	breq	.+28     	; 0x114c <DIO_U8_Set_Pin_Direction+0x68>
    1130:	bc c0       	rjmp	.+376    	; 0x12aa <DIO_U8_Set_Pin_Direction+0x1c6>
    1132:	2d 81       	ldd	r18, Y+5	; 0x05
    1134:	3e 81       	ldd	r19, Y+6	; 0x06
    1136:	22 30       	cpi	r18, 0x02	; 2
    1138:	31 05       	cpc	r19, r1
    113a:	09 f4       	brne	.+2      	; 0x113e <DIO_U8_Set_Pin_Direction+0x5a>
    113c:	5f c0       	rjmp	.+190    	; 0x11fc <DIO_U8_Set_Pin_Direction+0x118>
    113e:	8d 81       	ldd	r24, Y+5	; 0x05
    1140:	9e 81       	ldd	r25, Y+6	; 0x06
    1142:	83 30       	cpi	r24, 0x03	; 3
    1144:	91 05       	cpc	r25, r1
    1146:	09 f4       	brne	.+2      	; 0x114a <DIO_U8_Set_Pin_Direction+0x66>
    1148:	85 c0       	rjmp	.+266    	; 0x1254 <DIO_U8_Set_Pin_Direction+0x170>
    114a:	af c0       	rjmp	.+350    	; 0x12aa <DIO_U8_Set_Pin_Direction+0x1c6>
			case GROUP_A:
				Assign_Bit(DIO_U8_DDRA,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
    114c:	8b 81       	ldd	r24, Y+3	; 0x03
    114e:	81 30       	cpi	r24, 0x01	; 1
    1150:	a1 f4       	brne	.+40     	; 0x117a <DIO_U8_Set_Pin_Direction+0x96>
    1152:	aa e3       	ldi	r26, 0x3A	; 58
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	ea e3       	ldi	r30, 0x3A	; 58
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	48 2f       	mov	r20, r24
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	02 2e       	mov	r0, r18
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <DIO_U8_Set_Pin_Direction+0x8c>
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	0a 94       	dec	r0
    1172:	e2 f7       	brpl	.-8      	; 0x116c <DIO_U8_Set_Pin_Direction+0x88>
    1174:	84 2b       	or	r24, r20
    1176:	8c 93       	st	X, r24
    1178:	98 c0       	rjmp	.+304    	; 0x12aa <DIO_U8_Set_Pin_Direction+0x1c6>
    117a:	aa e3       	ldi	r26, 0x3A	; 58
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	ea e3       	ldi	r30, 0x3A	; 58
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	48 2f       	mov	r20, r24
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	02 2e       	mov	r0, r18
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <DIO_U8_Set_Pin_Direction+0xb4>
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	0a 94       	dec	r0
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <DIO_U8_Set_Pin_Direction+0xb0>
    119c:	80 95       	com	r24
    119e:	84 23       	and	r24, r20
    11a0:	8c 93       	st	X, r24
    11a2:	83 c0       	rjmp	.+262    	; 0x12aa <DIO_U8_Set_Pin_Direction+0x1c6>
				break;
			case GROUP_B:
				Assign_Bit(DIO_U8_DDRB,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	81 30       	cpi	r24, 0x01	; 1
    11a8:	a1 f4       	brne	.+40     	; 0x11d2 <DIO_U8_Set_Pin_Direction+0xee>
    11aa:	a7 e3       	ldi	r26, 0x37	; 55
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e7 e3       	ldi	r30, 0x37	; 55
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	48 2f       	mov	r20, r24
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	02 2e       	mov	r0, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <DIO_U8_Set_Pin_Direction+0xe4>
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	0a 94       	dec	r0
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <DIO_U8_Set_Pin_Direction+0xe0>
    11cc:	84 2b       	or	r24, r20
    11ce:	8c 93       	st	X, r24
    11d0:	6c c0       	rjmp	.+216    	; 0x12aa <DIO_U8_Set_Pin_Direction+0x1c6>
    11d2:	a7 e3       	ldi	r26, 0x37	; 55
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e7 e3       	ldi	r30, 0x37	; 55
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	48 2f       	mov	r20, r24
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	02 2e       	mov	r0, r18
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <DIO_U8_Set_Pin_Direction+0x10c>
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	0a 94       	dec	r0
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <DIO_U8_Set_Pin_Direction+0x108>
    11f4:	80 95       	com	r24
    11f6:	84 23       	and	r24, r20
    11f8:	8c 93       	st	X, r24
    11fa:	57 c0       	rjmp	.+174    	; 0x12aa <DIO_U8_Set_Pin_Direction+0x1c6>
				break;
			case GROUP_C:
				Assign_Bit(DIO_U8_DDRC,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	81 30       	cpi	r24, 0x01	; 1
    1200:	a1 f4       	brne	.+40     	; 0x122a <DIO_U8_Set_Pin_Direction+0x146>
    1202:	a4 e3       	ldi	r26, 0x34	; 52
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e4 e3       	ldi	r30, 0x34	; 52
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	48 2f       	mov	r20, r24
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	02 2e       	mov	r0, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <DIO_U8_Set_Pin_Direction+0x13c>
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	0a 94       	dec	r0
    1222:	e2 f7       	brpl	.-8      	; 0x121c <DIO_U8_Set_Pin_Direction+0x138>
    1224:	84 2b       	or	r24, r20
    1226:	8c 93       	st	X, r24
    1228:	40 c0       	rjmp	.+128    	; 0x12aa <DIO_U8_Set_Pin_Direction+0x1c6>
    122a:	a4 e3       	ldi	r26, 0x34	; 52
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e4 e3       	ldi	r30, 0x34	; 52
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	48 2f       	mov	r20, r24
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	02 2e       	mov	r0, r18
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <DIO_U8_Set_Pin_Direction+0x164>
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	0a 94       	dec	r0
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <DIO_U8_Set_Pin_Direction+0x160>
    124c:	80 95       	com	r24
    124e:	84 23       	and	r24, r20
    1250:	8c 93       	st	X, r24
    1252:	2b c0       	rjmp	.+86     	; 0x12aa <DIO_U8_Set_Pin_Direction+0x1c6>
				break;
			case GROUP_D:
				Assign_Bit(DIO_U8_DDRD,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	81 30       	cpi	r24, 0x01	; 1
    1258:	a1 f4       	brne	.+40     	; 0x1282 <DIO_U8_Set_Pin_Direction+0x19e>
    125a:	a1 e3       	ldi	r26, 0x31	; 49
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e1 e3       	ldi	r30, 0x31	; 49
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	48 2f       	mov	r20, r24
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	02 2e       	mov	r0, r18
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <DIO_U8_Set_Pin_Direction+0x194>
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	0a 94       	dec	r0
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <DIO_U8_Set_Pin_Direction+0x190>
    127c:	84 2b       	or	r24, r20
    127e:	8c 93       	st	X, r24
    1280:	14 c0       	rjmp	.+40     	; 0x12aa <DIO_U8_Set_Pin_Direction+0x1c6>
    1282:	a1 e3       	ldi	r26, 0x31	; 49
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	e1 e3       	ldi	r30, 0x31	; 49
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	48 2f       	mov	r20, r24
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	02 2e       	mov	r0, r18
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <DIO_U8_Set_Pin_Direction+0x1bc>
    129c:	88 0f       	add	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	0a 94       	dec	r0
    12a2:	e2 f7       	brpl	.-8      	; 0x129c <DIO_U8_Set_Pin_Direction+0x1b8>
    12a4:	80 95       	com	r24
    12a6:	84 23       	and	r24, r20
    12a8:	8c 93       	st	X, r24

	}
	else{
		return INVALID_PORT_ID;
	}
	return Success;
    12aa:	1c 82       	std	Y+4, r1	; 0x04
    12ac:	05 c0       	rjmp	.+10     	; 0x12b8 <DIO_U8_Set_Pin_Direction+0x1d4>
				Assign_Bit(DIO_U8_DDRD,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
				break;
			}
		}
		else{
			return INVALID_PIN_ID;
    12ae:	9f ef       	ldi	r25, 0xFF	; 255
    12b0:	9c 83       	std	Y+4, r25	; 0x04
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <DIO_U8_Set_Pin_Direction+0x1d4>
		}

	}
	else{
		return INVALID_PORT_ID;
    12b4:	25 ef       	ldi	r18, 0xF5	; 245
    12b6:	2c 83       	std	Y+4, r18	; 0x04
    12b8:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	return Success;

}
    12ba:	26 96       	adiw	r28, 0x06	; 6
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	f8 94       	cli
    12c0:	de bf       	out	0x3e, r29	; 62
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	cd bf       	out	0x3d, r28	; 61
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	08 95       	ret

000012cc <DIO_U8_Set_Port_Direction>:

u8 DIO_U8_Set_Port_Direction(u8 Copy_U8_Port_ID,u8 Copy_U8_Port_Dir){
    12cc:	df 93       	push	r29
    12ce:	cf 93       	push	r28
    12d0:	00 d0       	rcall	.+0      	; 0x12d2 <DIO_U8_Set_Port_Direction+0x6>
    12d2:	00 d0       	rcall	.+0      	; 0x12d4 <DIO_U8_Set_Port_Direction+0x8>
    12d4:	0f 92       	push	r0
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	89 83       	std	Y+1, r24	; 0x01
    12dc:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_U8_Port_ID <= GROUP_D) && (Copy_U8_Port_ID >= GROUP_A)){
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	84 30       	cpi	r24, 0x04	; 4
    12e2:	a0 f5       	brcc	.+104    	; 0x134c <DIO_U8_Set_Port_Direction+0x80>
		switch(Copy_U8_Port_ID){
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	3d 83       	std	Y+5, r19	; 0x05
    12ec:	2c 83       	std	Y+4, r18	; 0x04
    12ee:	8c 81       	ldd	r24, Y+4	; 0x04
    12f0:	9d 81       	ldd	r25, Y+5	; 0x05
    12f2:	81 30       	cpi	r24, 0x01	; 1
    12f4:	91 05       	cpc	r25, r1
    12f6:	d1 f0       	breq	.+52     	; 0x132c <DIO_U8_Set_Port_Direction+0x60>
    12f8:	2c 81       	ldd	r18, Y+4	; 0x04
    12fa:	3d 81       	ldd	r19, Y+5	; 0x05
    12fc:	22 30       	cpi	r18, 0x02	; 2
    12fe:	31 05       	cpc	r19, r1
    1300:	2c f4       	brge	.+10     	; 0x130c <DIO_U8_Set_Port_Direction+0x40>
    1302:	8c 81       	ldd	r24, Y+4	; 0x04
    1304:	9d 81       	ldd	r25, Y+5	; 0x05
    1306:	00 97       	sbiw	r24, 0x00	; 0
    1308:	61 f0       	breq	.+24     	; 0x1322 <DIO_U8_Set_Port_Direction+0x56>
    130a:	1e c0       	rjmp	.+60     	; 0x1348 <DIO_U8_Set_Port_Direction+0x7c>
    130c:	2c 81       	ldd	r18, Y+4	; 0x04
    130e:	3d 81       	ldd	r19, Y+5	; 0x05
    1310:	22 30       	cpi	r18, 0x02	; 2
    1312:	31 05       	cpc	r19, r1
    1314:	81 f0       	breq	.+32     	; 0x1336 <DIO_U8_Set_Port_Direction+0x6a>
    1316:	8c 81       	ldd	r24, Y+4	; 0x04
    1318:	9d 81       	ldd	r25, Y+5	; 0x05
    131a:	83 30       	cpi	r24, 0x03	; 3
    131c:	91 05       	cpc	r25, r1
    131e:	81 f0       	breq	.+32     	; 0x1340 <DIO_U8_Set_Port_Direction+0x74>
    1320:	13 c0       	rjmp	.+38     	; 0x1348 <DIO_U8_Set_Port_Direction+0x7c>
		case GROUP_A:
			DIO_U8_DDRA = Copy_U8_Port_Dir;
    1322:	ea e3       	ldi	r30, 0x3A	; 58
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	80 83       	st	Z, r24
    132a:	0e c0       	rjmp	.+28     	; 0x1348 <DIO_U8_Set_Port_Direction+0x7c>
			break;
		case GROUP_B:
			DIO_U8_DDRB = Copy_U8_Port_Dir;
    132c:	e7 e3       	ldi	r30, 0x37	; 55
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	80 83       	st	Z, r24
    1334:	09 c0       	rjmp	.+18     	; 0x1348 <DIO_U8_Set_Port_Direction+0x7c>
			break;
		case GROUP_C:
			DIO_U8_DDRC = Copy_U8_Port_Dir;
    1336:	e4 e3       	ldi	r30, 0x34	; 52
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	80 83       	st	Z, r24
    133e:	04 c0       	rjmp	.+8      	; 0x1348 <DIO_U8_Set_Port_Direction+0x7c>
			break;
		case GROUP_D:
			DIO_U8_DDRD = Copy_U8_Port_Dir;
    1340:	e1 e3       	ldi	r30, 0x31	; 49
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	80 83       	st	Z, r24
		}
	}
	else{
		return INVALID_PORT_ID;
	}
	return Success;
    1348:	1b 82       	std	Y+3, r1	; 0x03
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <DIO_U8_Set_Port_Direction+0x84>
			DIO_U8_DDRD = Copy_U8_Port_Dir;
			break;
		}
	}
	else{
		return INVALID_PORT_ID;
    134c:	95 ef       	ldi	r25, 0xF5	; 245
    134e:	9b 83       	std	Y+3, r25	; 0x03
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	return Success;
}
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <DIO_U8_Set_Port_Value>:

u8 DIO_U8_Set_Port_Value(u8 Copy_U8_Port_ID,u8 Copy_U8_Port_Value){   //lw 3aiz a4t8al 3la al value bta3t al port kolo;
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	00 d0       	rcall	.+0      	; 0x1368 <DIO_U8_Set_Port_Value+0x6>
    1368:	00 d0       	rcall	.+0      	; 0x136a <DIO_U8_Set_Port_Value+0x8>
    136a:	0f 92       	push	r0
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
    1370:	89 83       	std	Y+1, r24	; 0x01
    1372:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_U8_Port_ID <= GROUP_D) && (Copy_U8_Port_ID >= GROUP_A)){
    1374:	89 81       	ldd	r24, Y+1	; 0x01
    1376:	84 30       	cpi	r24, 0x04	; 4
    1378:	a0 f5       	brcc	.+104    	; 0x13e2 <DIO_U8_Set_Port_Value+0x80>
		switch(Copy_U8_Port_ID){
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	3d 83       	std	Y+5, r19	; 0x05
    1382:	2c 83       	std	Y+4, r18	; 0x04
    1384:	8c 81       	ldd	r24, Y+4	; 0x04
    1386:	9d 81       	ldd	r25, Y+5	; 0x05
    1388:	81 30       	cpi	r24, 0x01	; 1
    138a:	91 05       	cpc	r25, r1
    138c:	d1 f0       	breq	.+52     	; 0x13c2 <DIO_U8_Set_Port_Value+0x60>
    138e:	2c 81       	ldd	r18, Y+4	; 0x04
    1390:	3d 81       	ldd	r19, Y+5	; 0x05
    1392:	22 30       	cpi	r18, 0x02	; 2
    1394:	31 05       	cpc	r19, r1
    1396:	2c f4       	brge	.+10     	; 0x13a2 <DIO_U8_Set_Port_Value+0x40>
    1398:	8c 81       	ldd	r24, Y+4	; 0x04
    139a:	9d 81       	ldd	r25, Y+5	; 0x05
    139c:	00 97       	sbiw	r24, 0x00	; 0
    139e:	61 f0       	breq	.+24     	; 0x13b8 <DIO_U8_Set_Port_Value+0x56>
    13a0:	1e c0       	rjmp	.+60     	; 0x13de <DIO_U8_Set_Port_Value+0x7c>
    13a2:	2c 81       	ldd	r18, Y+4	; 0x04
    13a4:	3d 81       	ldd	r19, Y+5	; 0x05
    13a6:	22 30       	cpi	r18, 0x02	; 2
    13a8:	31 05       	cpc	r19, r1
    13aa:	81 f0       	breq	.+32     	; 0x13cc <DIO_U8_Set_Port_Value+0x6a>
    13ac:	8c 81       	ldd	r24, Y+4	; 0x04
    13ae:	9d 81       	ldd	r25, Y+5	; 0x05
    13b0:	83 30       	cpi	r24, 0x03	; 3
    13b2:	91 05       	cpc	r25, r1
    13b4:	81 f0       	breq	.+32     	; 0x13d6 <DIO_U8_Set_Port_Value+0x74>
    13b6:	13 c0       	rjmp	.+38     	; 0x13de <DIO_U8_Set_Port_Value+0x7c>
		case GROUP_A:
			DIO_U8_PORTA = Copy_U8_Port_Value;
    13b8:	eb e3       	ldi	r30, 0x3B	; 59
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	80 83       	st	Z, r24
    13c0:	0e c0       	rjmp	.+28     	; 0x13de <DIO_U8_Set_Port_Value+0x7c>
			break;
		case GROUP_B:
			DIO_U8_PORTB = Copy_U8_Port_Value;
    13c2:	e8 e3       	ldi	r30, 0x38	; 56
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	80 83       	st	Z, r24
    13ca:	09 c0       	rjmp	.+18     	; 0x13de <DIO_U8_Set_Port_Value+0x7c>
			break;
		case GROUP_C:
			DIO_U8_PORTC = Copy_U8_Port_Value;
    13cc:	e5 e3       	ldi	r30, 0x35	; 53
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	80 83       	st	Z, r24
    13d4:	04 c0       	rjmp	.+8      	; 0x13de <DIO_U8_Set_Port_Value+0x7c>
			break;
		case GROUP_D:
			DIO_U8_PORTD = Copy_U8_Port_Value;
    13d6:	e2 e3       	ldi	r30, 0x32	; 50
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	80 83       	st	Z, r24
	}
	else{
		return INVALID_PORT_ID;
	}

	return Success;
    13de:	1b 82       	std	Y+3, r1	; 0x03
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <DIO_U8_Set_Port_Value+0x84>
			DIO_U8_PORTD = Copy_U8_Port_Value;
			break;
		}
	}
	else{
		return INVALID_PORT_ID;
    13e2:	95 ef       	ldi	r25, 0xF5	; 245
    13e4:	9b 83       	std	Y+3, r25	; 0x03
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
	}

	return Success;
}
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	cf 91       	pop	r28
    13f4:	df 91       	pop	r29
    13f6:	08 95       	ret

000013f8 <DIO_U8_Get_Pin_Direction>:

u8 DIO_U8_Get_Pin_Direction(u8 Copy_U8_Port_ID, u8 Copy_U8_Pin_ID ){
    13f8:	df 93       	push	r29
    13fa:	cf 93       	push	r28
    13fc:	00 d0       	rcall	.+0      	; 0x13fe <DIO_U8_Get_Pin_Direction+0x6>
    13fe:	00 d0       	rcall	.+0      	; 0x1400 <DIO_U8_Get_Pin_Direction+0x8>
    1400:	00 d0       	rcall	.+0      	; 0x1402 <DIO_U8_Get_Pin_Direction+0xa>
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
    1406:	8a 83       	std	Y+2, r24	; 0x02
    1408:	6b 83       	std	Y+3, r22	; 0x03
	u8 Pin_direction;

	if ((Copy_U8_Port_ID <= GROUP_D) && (Copy_U8_Port_ID >= GROUP_A)){
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	84 30       	cpi	r24, 0x04	; 4
    140e:	08 f0       	brcs	.+2      	; 0x1412 <DIO_U8_Get_Pin_Direction+0x1a>
    1410:	6a c0       	rjmp	.+212    	; 0x14e6 <DIO_U8_Get_Pin_Direction+0xee>
		switch(Copy_U8_Port_ID){
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	3e 83       	std	Y+6, r19	; 0x06
    141a:	2d 83       	std	Y+5, r18	; 0x05
    141c:	4d 81       	ldd	r20, Y+5	; 0x05
    141e:	5e 81       	ldd	r21, Y+6	; 0x06
    1420:	41 30       	cpi	r20, 0x01	; 1
    1422:	51 05       	cpc	r21, r1
    1424:	41 f1       	breq	.+80     	; 0x1476 <DIO_U8_Get_Pin_Direction+0x7e>
    1426:	8d 81       	ldd	r24, Y+5	; 0x05
    1428:	9e 81       	ldd	r25, Y+6	; 0x06
    142a:	82 30       	cpi	r24, 0x02	; 2
    142c:	91 05       	cpc	r25, r1
    142e:	34 f4       	brge	.+12     	; 0x143c <DIO_U8_Get_Pin_Direction+0x44>
    1430:	2d 81       	ldd	r18, Y+5	; 0x05
    1432:	3e 81       	ldd	r19, Y+6	; 0x06
    1434:	21 15       	cp	r18, r1
    1436:	31 05       	cpc	r19, r1
    1438:	61 f0       	breq	.+24     	; 0x1452 <DIO_U8_Get_Pin_Direction+0x5a>
    143a:	52 c0       	rjmp	.+164    	; 0x14e0 <DIO_U8_Get_Pin_Direction+0xe8>
    143c:	4d 81       	ldd	r20, Y+5	; 0x05
    143e:	5e 81       	ldd	r21, Y+6	; 0x06
    1440:	42 30       	cpi	r20, 0x02	; 2
    1442:	51 05       	cpc	r21, r1
    1444:	51 f1       	breq	.+84     	; 0x149a <DIO_U8_Get_Pin_Direction+0xa2>
    1446:	8d 81       	ldd	r24, Y+5	; 0x05
    1448:	9e 81       	ldd	r25, Y+6	; 0x06
    144a:	83 30       	cpi	r24, 0x03	; 3
    144c:	91 05       	cpc	r25, r1
    144e:	b9 f1       	breq	.+110    	; 0x14be <DIO_U8_Get_Pin_Direction+0xc6>
    1450:	47 c0       	rjmp	.+142    	; 0x14e0 <DIO_U8_Get_Pin_Direction+0xe8>
		case GROUP_A:
			Pin_direction = Get_Bit(DIO_U8_DDRA,Copy_U8_Pin_ID);
    1452:	ea e3       	ldi	r30, 0x3A	; 58
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	88 2f       	mov	r24, r24
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	a9 01       	movw	r20, r18
    1464:	02 c0       	rjmp	.+4      	; 0x146a <DIO_U8_Get_Pin_Direction+0x72>
    1466:	55 95       	asr	r21
    1468:	47 95       	ror	r20
    146a:	8a 95       	dec	r24
    146c:	e2 f7       	brpl	.-8      	; 0x1466 <DIO_U8_Get_Pin_Direction+0x6e>
    146e:	ca 01       	movw	r24, r20
    1470:	81 70       	andi	r24, 0x01	; 1
    1472:	89 83       	std	Y+1, r24	; 0x01
    1474:	35 c0       	rjmp	.+106    	; 0x14e0 <DIO_U8_Get_Pin_Direction+0xe8>
			break;
		case GROUP_B:
			Pin_direction = Get_Bit(DIO_U8_DDRB,Copy_U8_Pin_ID);
    1476:	e7 e3       	ldi	r30, 0x37	; 55
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	88 2f       	mov	r24, r24
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	a9 01       	movw	r20, r18
    1488:	02 c0       	rjmp	.+4      	; 0x148e <DIO_U8_Get_Pin_Direction+0x96>
    148a:	55 95       	asr	r21
    148c:	47 95       	ror	r20
    148e:	8a 95       	dec	r24
    1490:	e2 f7       	brpl	.-8      	; 0x148a <DIO_U8_Get_Pin_Direction+0x92>
    1492:	ca 01       	movw	r24, r20
    1494:	81 70       	andi	r24, 0x01	; 1
    1496:	89 83       	std	Y+1, r24	; 0x01
    1498:	23 c0       	rjmp	.+70     	; 0x14e0 <DIO_U8_Get_Pin_Direction+0xe8>
			break;
		case GROUP_C:
			Pin_direction = Get_Bit(DIO_U8_DDRC,Copy_U8_Pin_ID);
    149a:	e4 e3       	ldi	r30, 0x34	; 52
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	88 2f       	mov	r24, r24
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	a9 01       	movw	r20, r18
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <DIO_U8_Get_Pin_Direction+0xba>
    14ae:	55 95       	asr	r21
    14b0:	47 95       	ror	r20
    14b2:	8a 95       	dec	r24
    14b4:	e2 f7       	brpl	.-8      	; 0x14ae <DIO_U8_Get_Pin_Direction+0xb6>
    14b6:	ca 01       	movw	r24, r20
    14b8:	81 70       	andi	r24, 0x01	; 1
    14ba:	89 83       	std	Y+1, r24	; 0x01
    14bc:	11 c0       	rjmp	.+34     	; 0x14e0 <DIO_U8_Get_Pin_Direction+0xe8>
			break;
		case GROUP_D:
			Pin_direction = Get_Bit(DIO_U8_DDRD,Copy_U8_Pin_ID);
    14be:	e1 e3       	ldi	r30, 0x31	; 49
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	88 2f       	mov	r24, r24
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	a9 01       	movw	r20, r18
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <DIO_U8_Get_Pin_Direction+0xde>
    14d2:	55 95       	asr	r21
    14d4:	47 95       	ror	r20
    14d6:	8a 95       	dec	r24
    14d8:	e2 f7       	brpl	.-8      	; 0x14d2 <DIO_U8_Get_Pin_Direction+0xda>
    14da:	ca 01       	movw	r24, r20
    14dc:	81 70       	andi	r24, 0x01	; 1
    14de:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	else{
		return INVALID_PORT_ID;
	}
	return Pin_direction;
    14e0:	59 81       	ldd	r21, Y+1	; 0x01
    14e2:	5c 83       	std	Y+4, r21	; 0x04
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <DIO_U8_Get_Pin_Direction+0xf2>
			Pin_direction = Get_Bit(DIO_U8_DDRD,Copy_U8_Pin_ID);
			break;
		}
	}
	else{
		return INVALID_PORT_ID;
    14e6:	85 ef       	ldi	r24, 0xF5	; 245
    14e8:	8c 83       	std	Y+4, r24	; 0x04
    14ea:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	return Pin_direction;
}
    14ec:	26 96       	adiw	r28, 0x06	; 6
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	de bf       	out	0x3e, r29	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	cd bf       	out	0x3d, r28	; 61
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <DIO_U8_Get_Port_Direction>:

u8 DIO_U8_Get_Port_Direction(u8 Copy_U8_Port_ID){
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	00 d0       	rcall	.+0      	; 0x1504 <DIO_U8_Get_Port_Direction+0x6>
    1504:	00 d0       	rcall	.+0      	; 0x1506 <DIO_U8_Get_Port_Direction+0x8>
    1506:	0f 92       	push	r0
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	8a 83       	std	Y+2, r24	; 0x02
	u8 port_direction;
	if((Copy_U8_Port_ID <= GROUP_D) && (Copy_U8_Port_ID >= GROUP_A)){
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	84 30       	cpi	r24, 0x04	; 4
    1512:	a8 f5       	brcc	.+106    	; 0x157e <DIO_U8_Get_Port_Direction+0x80>
		switch(Copy_U8_Port_ID){
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	3d 83       	std	Y+5, r19	; 0x05
    151c:	2c 83       	std	Y+4, r18	; 0x04
    151e:	8c 81       	ldd	r24, Y+4	; 0x04
    1520:	9d 81       	ldd	r25, Y+5	; 0x05
    1522:	81 30       	cpi	r24, 0x01	; 1
    1524:	91 05       	cpc	r25, r1
    1526:	d1 f0       	breq	.+52     	; 0x155c <DIO_U8_Get_Port_Direction+0x5e>
    1528:	2c 81       	ldd	r18, Y+4	; 0x04
    152a:	3d 81       	ldd	r19, Y+5	; 0x05
    152c:	22 30       	cpi	r18, 0x02	; 2
    152e:	31 05       	cpc	r19, r1
    1530:	2c f4       	brge	.+10     	; 0x153c <DIO_U8_Get_Port_Direction+0x3e>
    1532:	8c 81       	ldd	r24, Y+4	; 0x04
    1534:	9d 81       	ldd	r25, Y+5	; 0x05
    1536:	00 97       	sbiw	r24, 0x00	; 0
    1538:	61 f0       	breq	.+24     	; 0x1552 <DIO_U8_Get_Port_Direction+0x54>
    153a:	1e c0       	rjmp	.+60     	; 0x1578 <DIO_U8_Get_Port_Direction+0x7a>
    153c:	2c 81       	ldd	r18, Y+4	; 0x04
    153e:	3d 81       	ldd	r19, Y+5	; 0x05
    1540:	22 30       	cpi	r18, 0x02	; 2
    1542:	31 05       	cpc	r19, r1
    1544:	81 f0       	breq	.+32     	; 0x1566 <DIO_U8_Get_Port_Direction+0x68>
    1546:	8c 81       	ldd	r24, Y+4	; 0x04
    1548:	9d 81       	ldd	r25, Y+5	; 0x05
    154a:	83 30       	cpi	r24, 0x03	; 3
    154c:	91 05       	cpc	r25, r1
    154e:	81 f0       	breq	.+32     	; 0x1570 <DIO_U8_Get_Port_Direction+0x72>
    1550:	13 c0       	rjmp	.+38     	; 0x1578 <DIO_U8_Get_Port_Direction+0x7a>
		case GROUP_A:
			port_direction = DIO_U8_DDRA;
    1552:	ea e3       	ldi	r30, 0x3A	; 58
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	89 83       	std	Y+1, r24	; 0x01
    155a:	0e c0       	rjmp	.+28     	; 0x1578 <DIO_U8_Get_Port_Direction+0x7a>
			break;
		case GROUP_B:
			port_direction = DIO_U8_DDRB;
    155c:	e7 e3       	ldi	r30, 0x37	; 55
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	89 83       	std	Y+1, r24	; 0x01
    1564:	09 c0       	rjmp	.+18     	; 0x1578 <DIO_U8_Get_Port_Direction+0x7a>
			break;
		case GROUP_C:
			port_direction = DIO_U8_DDRC;
    1566:	e4 e3       	ldi	r30, 0x34	; 52
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	89 83       	std	Y+1, r24	; 0x01
    156e:	04 c0       	rjmp	.+8      	; 0x1578 <DIO_U8_Get_Port_Direction+0x7a>
			break;
		case GROUP_D:
			port_direction = DIO_U8_DDRD;
    1570:	e1 e3       	ldi	r30, 0x31	; 49
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	89 83       	std	Y+1, r24	; 0x01
	}
	else{
		return INVALID_PORT_ID;
	}

	return port_direction;
    1578:	99 81       	ldd	r25, Y+1	; 0x01
    157a:	9b 83       	std	Y+3, r25	; 0x03
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <DIO_U8_Get_Port_Direction+0x84>
			break;

		}
	}
	else{
		return INVALID_PORT_ID;
    157e:	25 ef       	ldi	r18, 0xF5	; 245
    1580:	2b 83       	std	Y+3, r18	; 0x03
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
	}

	return port_direction;
}
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	cf 91       	pop	r28
    1590:	df 91       	pop	r29
    1592:	08 95       	ret

00001594 <DIO_U8_Get_Port_Value>:


// get port value_U8_PINB = port_direction

u8 DIO_U8_Get_Port_Value(u8 Copy_U8_Port_ID,u8* Copy_U8_Port_Value){
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	00 d0       	rcall	.+0      	; 0x159a <DIO_U8_Get_Port_Value+0x6>
    159a:	00 d0       	rcall	.+0      	; 0x159c <DIO_U8_Get_Port_Value+0x8>
    159c:	00 d0       	rcall	.+0      	; 0x159e <DIO_U8_Get_Port_Value+0xa>
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
    15a2:	89 83       	std	Y+1, r24	; 0x01
    15a4:	7b 83       	std	Y+3, r23	; 0x03
    15a6:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_U8_Port_ID <= GROUP_D) && (Copy_U8_Port_ID >= GROUP_A)){
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	84 30       	cpi	r24, 0x04	; 4
    15ac:	e0 f5       	brcc	.+120    	; 0x1626 <DIO_U8_Get_Port_Value+0x92>
		switch(Copy_U8_Port_ID){
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	3e 83       	std	Y+6, r19	; 0x06
    15b6:	2d 83       	std	Y+5, r18	; 0x05
    15b8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ba:	9e 81       	ldd	r25, Y+6	; 0x06
    15bc:	81 30       	cpi	r24, 0x01	; 1
    15be:	91 05       	cpc	r25, r1
    15c0:	e1 f0       	breq	.+56     	; 0x15fa <DIO_U8_Get_Port_Value+0x66>
    15c2:	2d 81       	ldd	r18, Y+5	; 0x05
    15c4:	3e 81       	ldd	r19, Y+6	; 0x06
    15c6:	22 30       	cpi	r18, 0x02	; 2
    15c8:	31 05       	cpc	r19, r1
    15ca:	2c f4       	brge	.+10     	; 0x15d6 <DIO_U8_Get_Port_Value+0x42>
    15cc:	8d 81       	ldd	r24, Y+5	; 0x05
    15ce:	9e 81       	ldd	r25, Y+6	; 0x06
    15d0:	00 97       	sbiw	r24, 0x00	; 0
    15d2:	61 f0       	breq	.+24     	; 0x15ec <DIO_U8_Get_Port_Value+0x58>
    15d4:	26 c0       	rjmp	.+76     	; 0x1622 <DIO_U8_Get_Port_Value+0x8e>
    15d6:	2d 81       	ldd	r18, Y+5	; 0x05
    15d8:	3e 81       	ldd	r19, Y+6	; 0x06
    15da:	22 30       	cpi	r18, 0x02	; 2
    15dc:	31 05       	cpc	r19, r1
    15de:	a1 f0       	breq	.+40     	; 0x1608 <DIO_U8_Get_Port_Value+0x74>
    15e0:	8d 81       	ldd	r24, Y+5	; 0x05
    15e2:	9e 81       	ldd	r25, Y+6	; 0x06
    15e4:	83 30       	cpi	r24, 0x03	; 3
    15e6:	91 05       	cpc	r25, r1
    15e8:	b1 f0       	breq	.+44     	; 0x1616 <DIO_U8_Get_Port_Value+0x82>
    15ea:	1b c0       	rjmp	.+54     	; 0x1622 <DIO_U8_Get_Port_Value+0x8e>
			case GROUP_A:
				*Copy_U8_Port_Value = DIO_U8_PINA;
    15ec:	e9 e3       	ldi	r30, 0x39	; 57
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	ea 81       	ldd	r30, Y+2	; 0x02
    15f4:	fb 81       	ldd	r31, Y+3	; 0x03
    15f6:	80 83       	st	Z, r24
    15f8:	14 c0       	rjmp	.+40     	; 0x1622 <DIO_U8_Get_Port_Value+0x8e>
				break;
			case GROUP_B:
				*Copy_U8_Port_Value = DIO_U8_PINB;
    15fa:	e6 e3       	ldi	r30, 0x36	; 54
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	ea 81       	ldd	r30, Y+2	; 0x02
    1602:	fb 81       	ldd	r31, Y+3	; 0x03
    1604:	80 83       	st	Z, r24
    1606:	0d c0       	rjmp	.+26     	; 0x1622 <DIO_U8_Get_Port_Value+0x8e>
				break;
			case GROUP_C:
				*Copy_U8_Port_Value = DIO_U8_PINC;
    1608:	e3 e3       	ldi	r30, 0x33	; 51
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	ea 81       	ldd	r30, Y+2	; 0x02
    1610:	fb 81       	ldd	r31, Y+3	; 0x03
    1612:	80 83       	st	Z, r24
    1614:	06 c0       	rjmp	.+12     	; 0x1622 <DIO_U8_Get_Port_Value+0x8e>
				break;
			case GROUP_D:
				*Copy_U8_Port_Value = DIO_U8_PIND;
    1616:	e0 e3       	ldi	r30, 0x30	; 48
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	ea 81       	ldd	r30, Y+2	; 0x02
    161e:	fb 81       	ldd	r31, Y+3	; 0x03
    1620:	80 83       	st	Z, r24

	}
	else{
		return INVALID_PORT_ID;
	}
	return 0;
    1622:	1c 82       	std	Y+4, r1	; 0x04
    1624:	02 c0       	rjmp	.+4      	; 0x162a <DIO_U8_Get_Port_Value+0x96>
				break;
		}

	}
	else{
		return INVALID_PORT_ID;
    1626:	95 ef       	ldi	r25, 0xF5	; 245
    1628:	9c 83       	std	Y+4, r25	; 0x04
    162a:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	return 0;
}
    162c:	26 96       	adiw	r28, 0x06	; 6
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	f8 94       	cli
    1632:	de bf       	out	0x3e, r29	; 62
    1634:	0f be       	out	0x3f, r0	; 63
    1636:	cd bf       	out	0x3d, r28	; 61
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <LCD_Void_Init_8Bits>:

#include "LCD_Interface.h"
#include "LCD_Private.h"
#include <avr/delay.h>

void LCD_Void_Init_8Bits (void){
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	e8 97       	sbiw	r28, 0x38	; 56
    1648:	0f b6       	in	r0, 0x3f	; 63
    164a:	f8 94       	cli
    164c:	de bf       	out	0x3e, r29	; 62
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	cd bf       	out	0x3d, r28	; 61
	DIO_U8_Set_Port_Direction(LCD_U8_DATA_Port, maximum_port_direction);
    1652:	82 e0       	ldi	r24, 0x02	; 2
    1654:	6f ef       	ldi	r22, 0xFF	; 255
    1656:	0e 94 66 09 	call	0x12cc	; 0x12cc <DIO_U8_Set_Port_Direction>
	DIO_U8_Set_Pin_Direction(LCD_U8_CTRL_Port, LCD_U8_RS_PIN, OUTPUT);
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	65 e0       	ldi	r22, 0x05	; 5
    165e:	41 e0       	ldi	r20, 0x01	; 1
    1660:	0e 94 72 08 	call	0x10e4	; 0x10e4 <DIO_U8_Set_Pin_Direction>
	DIO_U8_Set_Pin_Direction(LCD_U8_CTRL_Port, LCD_U8_RW_PIN, OUTPUT);
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	66 e0       	ldi	r22, 0x06	; 6
    1668:	41 e0       	ldi	r20, 0x01	; 1
    166a:	0e 94 72 08 	call	0x10e4	; 0x10e4 <DIO_U8_Set_Pin_Direction>
	DIO_U8_Set_Pin_Direction(LCD_U8_CTRL_Port, LCD_U8_ENABLE_PIN, OUTPUT);
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	67 e0       	ldi	r22, 0x07	; 7
    1672:	41 e0       	ldi	r20, 0x01	; 1
    1674:	0e 94 72 08 	call	0x10e4	; 0x10e4 <DIO_U8_Set_Pin_Direction>
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	a8 e4       	ldi	r26, 0x48	; 72
    167e:	b2 e4       	ldi	r27, 0x42	; 66
    1680:	8d ab       	std	Y+53, r24	; 0x35
    1682:	9e ab       	std	Y+54, r25	; 0x36
    1684:	af ab       	std	Y+55, r26	; 0x37
    1686:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1688:	6d a9       	ldd	r22, Y+53	; 0x35
    168a:	7e a9       	ldd	r23, Y+54	; 0x36
    168c:	8f a9       	ldd	r24, Y+55	; 0x37
    168e:	98 ad       	ldd	r25, Y+56	; 0x38
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	4a ef       	ldi	r20, 0xFA	; 250
    1696:	54 e4       	ldi	r21, 0x44	; 68
    1698:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	89 ab       	std	Y+49, r24	; 0x31
    16a2:	9a ab       	std	Y+50, r25	; 0x32
    16a4:	ab ab       	std	Y+51, r26	; 0x33
    16a6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16a8:	69 a9       	ldd	r22, Y+49	; 0x31
    16aa:	7a a9       	ldd	r23, Y+50	; 0x32
    16ac:	8b a9       	ldd	r24, Y+51	; 0x33
    16ae:	9c a9       	ldd	r25, Y+52	; 0x34
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e8       	ldi	r20, 0x80	; 128
    16b6:	5f e3       	ldi	r21, 0x3F	; 63
    16b8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16bc:	88 23       	and	r24, r24
    16be:	2c f4       	brge	.+10     	; 0x16ca <LCD_Void_Init_8Bits+0x8c>
		__ticks = 1;
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	98 ab       	std	Y+48, r25	; 0x30
    16c6:	8f a7       	std	Y+47, r24	; 0x2f
    16c8:	3f c0       	rjmp	.+126    	; 0x1748 <LCD_Void_Init_8Bits+0x10a>
	else if (__tmp > 65535)
    16ca:	69 a9       	ldd	r22, Y+49	; 0x31
    16cc:	7a a9       	ldd	r23, Y+50	; 0x32
    16ce:	8b a9       	ldd	r24, Y+51	; 0x33
    16d0:	9c a9       	ldd	r25, Y+52	; 0x34
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	3f ef       	ldi	r19, 0xFF	; 255
    16d6:	4f e7       	ldi	r20, 0x7F	; 127
    16d8:	57 e4       	ldi	r21, 0x47	; 71
    16da:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16de:	18 16       	cp	r1, r24
    16e0:	4c f5       	brge	.+82     	; 0x1734 <LCD_Void_Init_8Bits+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e2:	6d a9       	ldd	r22, Y+53	; 0x35
    16e4:	7e a9       	ldd	r23, Y+54	; 0x36
    16e6:	8f a9       	ldd	r24, Y+55	; 0x37
    16e8:	98 ad       	ldd	r25, Y+56	; 0x38
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	40 e2       	ldi	r20, 0x20	; 32
    16f0:	51 e4       	ldi	r21, 0x41	; 65
    16f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	bc 01       	movw	r22, r24
    16fc:	cd 01       	movw	r24, r26
    16fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	98 ab       	std	Y+48, r25	; 0x30
    1708:	8f a7       	std	Y+47, r24	; 0x2f
    170a:	0f c0       	rjmp	.+30     	; 0x172a <LCD_Void_Init_8Bits+0xec>
    170c:	88 ec       	ldi	r24, 0xC8	; 200
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	9e a7       	std	Y+46, r25	; 0x2e
    1712:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1714:	8d a5       	ldd	r24, Y+45	; 0x2d
    1716:	9e a5       	ldd	r25, Y+46	; 0x2e
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	f1 f7       	brne	.-4      	; 0x1718 <LCD_Void_Init_8Bits+0xda>
    171c:	9e a7       	std	Y+46, r25	; 0x2e
    171e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1720:	8f a5       	ldd	r24, Y+47	; 0x2f
    1722:	98 a9       	ldd	r25, Y+48	; 0x30
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	98 ab       	std	Y+48, r25	; 0x30
    1728:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172a:	8f a5       	ldd	r24, Y+47	; 0x2f
    172c:	98 a9       	ldd	r25, Y+48	; 0x30
    172e:	00 97       	sbiw	r24, 0x00	; 0
    1730:	69 f7       	brne	.-38     	; 0x170c <LCD_Void_Init_8Bits+0xce>
    1732:	14 c0       	rjmp	.+40     	; 0x175c <LCD_Void_Init_8Bits+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1734:	69 a9       	ldd	r22, Y+49	; 0x31
    1736:	7a a9       	ldd	r23, Y+50	; 0x32
    1738:	8b a9       	ldd	r24, Y+51	; 0x33
    173a:	9c a9       	ldd	r25, Y+52	; 0x34
    173c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	98 ab       	std	Y+48, r25	; 0x30
    1746:	8f a7       	std	Y+47, r24	; 0x2f
    1748:	8f a5       	ldd	r24, Y+47	; 0x2f
    174a:	98 a9       	ldd	r25, Y+48	; 0x30
    174c:	9c a7       	std	Y+44, r25	; 0x2c
    174e:	8b a7       	std	Y+43, r24	; 0x2b
    1750:	8b a5       	ldd	r24, Y+43	; 0x2b
    1752:	9c a5       	ldd	r25, Y+44	; 0x2c
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	f1 f7       	brne	.-4      	; 0x1754 <LCD_Void_Init_8Bits+0x116>
    1758:	9c a7       	std	Y+44, r25	; 0x2c
    175a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	LCD_Void_Write_Cmd(Init_Function_set);  //FUNCTION set  see starting from page 12 in lcd datasheet
    175c:	88 e3       	ldi	r24, 0x38	; 56
    175e:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <LCD_Void_Write_Cmd>
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	a8 e4       	ldi	r26, 0x48	; 72
    1768:	b2 e4       	ldi	r27, 0x42	; 66
    176a:	8f a3       	std	Y+39, r24	; 0x27
    176c:	98 a7       	std	Y+40, r25	; 0x28
    176e:	a9 a7       	std	Y+41, r26	; 0x29
    1770:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1772:	6f a1       	ldd	r22, Y+39	; 0x27
    1774:	78 a5       	ldd	r23, Y+40	; 0x28
    1776:	89 a5       	ldd	r24, Y+41	; 0x29
    1778:	9a a5       	ldd	r25, Y+42	; 0x2a
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	4a ef       	ldi	r20, 0xFA	; 250
    1780:	54 e4       	ldi	r21, 0x44	; 68
    1782:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	8b a3       	std	Y+35, r24	; 0x23
    178c:	9c a3       	std	Y+36, r25	; 0x24
    178e:	ad a3       	std	Y+37, r26	; 0x25
    1790:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1792:	6b a1       	ldd	r22, Y+35	; 0x23
    1794:	7c a1       	ldd	r23, Y+36	; 0x24
    1796:	8d a1       	ldd	r24, Y+37	; 0x25
    1798:	9e a1       	ldd	r25, Y+38	; 0x26
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	40 e8       	ldi	r20, 0x80	; 128
    17a0:	5f e3       	ldi	r21, 0x3F	; 63
    17a2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17a6:	88 23       	and	r24, r24
    17a8:	2c f4       	brge	.+10     	; 0x17b4 <LCD_Void_Init_8Bits+0x176>
		__ticks = 1;
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	9a a3       	std	Y+34, r25	; 0x22
    17b0:	89 a3       	std	Y+33, r24	; 0x21
    17b2:	3f c0       	rjmp	.+126    	; 0x1832 <LCD_Void_Init_8Bits+0x1f4>
	else if (__tmp > 65535)
    17b4:	6b a1       	ldd	r22, Y+35	; 0x23
    17b6:	7c a1       	ldd	r23, Y+36	; 0x24
    17b8:	8d a1       	ldd	r24, Y+37	; 0x25
    17ba:	9e a1       	ldd	r25, Y+38	; 0x26
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	3f ef       	ldi	r19, 0xFF	; 255
    17c0:	4f e7       	ldi	r20, 0x7F	; 127
    17c2:	57 e4       	ldi	r21, 0x47	; 71
    17c4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17c8:	18 16       	cp	r1, r24
    17ca:	4c f5       	brge	.+82     	; 0x181e <LCD_Void_Init_8Bits+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17cc:	6f a1       	ldd	r22, Y+39	; 0x27
    17ce:	78 a5       	ldd	r23, Y+40	; 0x28
    17d0:	89 a5       	ldd	r24, Y+41	; 0x29
    17d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	40 e2       	ldi	r20, 0x20	; 32
    17da:	51 e4       	ldi	r21, 0x41	; 65
    17dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17e0:	dc 01       	movw	r26, r24
    17e2:	cb 01       	movw	r24, r22
    17e4:	bc 01       	movw	r22, r24
    17e6:	cd 01       	movw	r24, r26
    17e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17ec:	dc 01       	movw	r26, r24
    17ee:	cb 01       	movw	r24, r22
    17f0:	9a a3       	std	Y+34, r25	; 0x22
    17f2:	89 a3       	std	Y+33, r24	; 0x21
    17f4:	0f c0       	rjmp	.+30     	; 0x1814 <LCD_Void_Init_8Bits+0x1d6>
    17f6:	88 ec       	ldi	r24, 0xC8	; 200
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	98 a3       	std	Y+32, r25	; 0x20
    17fc:	8f 8f       	std	Y+31, r24	; 0x1f
    17fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1800:	98 a1       	ldd	r25, Y+32	; 0x20
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	f1 f7       	brne	.-4      	; 0x1802 <LCD_Void_Init_8Bits+0x1c4>
    1806:	98 a3       	std	Y+32, r25	; 0x20
    1808:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180a:	89 a1       	ldd	r24, Y+33	; 0x21
    180c:	9a a1       	ldd	r25, Y+34	; 0x22
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	9a a3       	std	Y+34, r25	; 0x22
    1812:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1814:	89 a1       	ldd	r24, Y+33	; 0x21
    1816:	9a a1       	ldd	r25, Y+34	; 0x22
    1818:	00 97       	sbiw	r24, 0x00	; 0
    181a:	69 f7       	brne	.-38     	; 0x17f6 <LCD_Void_Init_8Bits+0x1b8>
    181c:	14 c0       	rjmp	.+40     	; 0x1846 <LCD_Void_Init_8Bits+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    181e:	6b a1       	ldd	r22, Y+35	; 0x23
    1820:	7c a1       	ldd	r23, Y+36	; 0x24
    1822:	8d a1       	ldd	r24, Y+37	; 0x25
    1824:	9e a1       	ldd	r25, Y+38	; 0x26
    1826:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	9a a3       	std	Y+34, r25	; 0x22
    1830:	89 a3       	std	Y+33, r24	; 0x21
    1832:	89 a1       	ldd	r24, Y+33	; 0x21
    1834:	9a a1       	ldd	r25, Y+34	; 0x22
    1836:	9e 8f       	std	Y+30, r25	; 0x1e
    1838:	8d 8f       	std	Y+29, r24	; 0x1d
    183a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    183c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    183e:	01 97       	sbiw	r24, 0x01	; 1
    1840:	f1 f7       	brne	.-4      	; 0x183e <LCD_Void_Init_8Bits+0x200>
    1842:	9e 8f       	std	Y+30, r25	; 0x1e
    1844:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);
	LCD_Void_Write_Cmd(Init_Display_OnOff);  //display on/off
    1846:	8c e0       	ldi	r24, 0x0C	; 12
    1848:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <LCD_Void_Write_Cmd>
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	a8 e4       	ldi	r26, 0x48	; 72
    1852:	b2 e4       	ldi	r27, 0x42	; 66
    1854:	89 8f       	std	Y+25, r24	; 0x19
    1856:	9a 8f       	std	Y+26, r25	; 0x1a
    1858:	ab 8f       	std	Y+27, r26	; 0x1b
    185a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    185c:	69 8d       	ldd	r22, Y+25	; 0x19
    185e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1860:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1862:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	4a ef       	ldi	r20, 0xFA	; 250
    186a:	54 e4       	ldi	r21, 0x44	; 68
    186c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	8d 8b       	std	Y+21, r24	; 0x15
    1876:	9e 8b       	std	Y+22, r25	; 0x16
    1878:	af 8b       	std	Y+23, r26	; 0x17
    187a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    187c:	6d 89       	ldd	r22, Y+21	; 0x15
    187e:	7e 89       	ldd	r23, Y+22	; 0x16
    1880:	8f 89       	ldd	r24, Y+23	; 0x17
    1882:	98 8d       	ldd	r25, Y+24	; 0x18
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	40 e8       	ldi	r20, 0x80	; 128
    188a:	5f e3       	ldi	r21, 0x3F	; 63
    188c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1890:	88 23       	and	r24, r24
    1892:	2c f4       	brge	.+10     	; 0x189e <LCD_Void_Init_8Bits+0x260>
		__ticks = 1;
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	9c 8b       	std	Y+20, r25	; 0x14
    189a:	8b 8b       	std	Y+19, r24	; 0x13
    189c:	3f c0       	rjmp	.+126    	; 0x191c <LCD_Void_Init_8Bits+0x2de>
	else if (__tmp > 65535)
    189e:	6d 89       	ldd	r22, Y+21	; 0x15
    18a0:	7e 89       	ldd	r23, Y+22	; 0x16
    18a2:	8f 89       	ldd	r24, Y+23	; 0x17
    18a4:	98 8d       	ldd	r25, Y+24	; 0x18
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	3f ef       	ldi	r19, 0xFF	; 255
    18aa:	4f e7       	ldi	r20, 0x7F	; 127
    18ac:	57 e4       	ldi	r21, 0x47	; 71
    18ae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18b2:	18 16       	cp	r1, r24
    18b4:	4c f5       	brge	.+82     	; 0x1908 <LCD_Void_Init_8Bits+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b6:	69 8d       	ldd	r22, Y+25	; 0x19
    18b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	40 e2       	ldi	r20, 0x20	; 32
    18c4:	51 e4       	ldi	r21, 0x41	; 65
    18c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	bc 01       	movw	r22, r24
    18d0:	cd 01       	movw	r24, r26
    18d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	9c 8b       	std	Y+20, r25	; 0x14
    18dc:	8b 8b       	std	Y+19, r24	; 0x13
    18de:	0f c0       	rjmp	.+30     	; 0x18fe <LCD_Void_Init_8Bits+0x2c0>
    18e0:	88 ec       	ldi	r24, 0xC8	; 200
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	9a 8b       	std	Y+18, r25	; 0x12
    18e6:	89 8b       	std	Y+17, r24	; 0x11
    18e8:	89 89       	ldd	r24, Y+17	; 0x11
    18ea:	9a 89       	ldd	r25, Y+18	; 0x12
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	f1 f7       	brne	.-4      	; 0x18ec <LCD_Void_Init_8Bits+0x2ae>
    18f0:	9a 8b       	std	Y+18, r25	; 0x12
    18f2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f4:	8b 89       	ldd	r24, Y+19	; 0x13
    18f6:	9c 89       	ldd	r25, Y+20	; 0x14
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	9c 8b       	std	Y+20, r25	; 0x14
    18fc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1900:	9c 89       	ldd	r25, Y+20	; 0x14
    1902:	00 97       	sbiw	r24, 0x00	; 0
    1904:	69 f7       	brne	.-38     	; 0x18e0 <LCD_Void_Init_8Bits+0x2a2>
    1906:	14 c0       	rjmp	.+40     	; 0x1930 <LCD_Void_Init_8Bits+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1908:	6d 89       	ldd	r22, Y+21	; 0x15
    190a:	7e 89       	ldd	r23, Y+22	; 0x16
    190c:	8f 89       	ldd	r24, Y+23	; 0x17
    190e:	98 8d       	ldd	r25, Y+24	; 0x18
    1910:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	9c 8b       	std	Y+20, r25	; 0x14
    191a:	8b 8b       	std	Y+19, r24	; 0x13
    191c:	8b 89       	ldd	r24, Y+19	; 0x13
    191e:	9c 89       	ldd	r25, Y+20	; 0x14
    1920:	98 8b       	std	Y+16, r25	; 0x10
    1922:	8f 87       	std	Y+15, r24	; 0x0f
    1924:	8f 85       	ldd	r24, Y+15	; 0x0f
    1926:	98 89       	ldd	r25, Y+16	; 0x10
    1928:	01 97       	sbiw	r24, 0x01	; 1
    192a:	f1 f7       	brne	.-4      	; 0x1928 <LCD_Void_Init_8Bits+0x2ea>
    192c:	98 8b       	std	Y+16, r25	; 0x10
    192e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	LCD_Void_Write_Cmd(Init_Display_Clear);  //display clear
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <LCD_Void_Write_Cmd>
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	a0 e0       	ldi	r26, 0x00	; 0
    193c:	b0 e4       	ldi	r27, 0x40	; 64
    193e:	8b 87       	std	Y+11, r24	; 0x0b
    1940:	9c 87       	std	Y+12, r25	; 0x0c
    1942:	ad 87       	std	Y+13, r26	; 0x0d
    1944:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1946:	6b 85       	ldd	r22, Y+11	; 0x0b
    1948:	7c 85       	ldd	r23, Y+12	; 0x0c
    194a:	8d 85       	ldd	r24, Y+13	; 0x0d
    194c:	9e 85       	ldd	r25, Y+14	; 0x0e
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	4a ef       	ldi	r20, 0xFA	; 250
    1954:	54 e4       	ldi	r21, 0x44	; 68
    1956:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	8f 83       	std	Y+7, r24	; 0x07
    1960:	98 87       	std	Y+8, r25	; 0x08
    1962:	a9 87       	std	Y+9, r26	; 0x09
    1964:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1966:	6f 81       	ldd	r22, Y+7	; 0x07
    1968:	78 85       	ldd	r23, Y+8	; 0x08
    196a:	89 85       	ldd	r24, Y+9	; 0x09
    196c:	9a 85       	ldd	r25, Y+10	; 0x0a
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	40 e8       	ldi	r20, 0x80	; 128
    1974:	5f e3       	ldi	r21, 0x3F	; 63
    1976:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    197a:	88 23       	and	r24, r24
    197c:	2c f4       	brge	.+10     	; 0x1988 <LCD_Void_Init_8Bits+0x34a>
		__ticks = 1;
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	9e 83       	std	Y+6, r25	; 0x06
    1984:	8d 83       	std	Y+5, r24	; 0x05
    1986:	3f c0       	rjmp	.+126    	; 0x1a06 <LCD_Void_Init_8Bits+0x3c8>
	else if (__tmp > 65535)
    1988:	6f 81       	ldd	r22, Y+7	; 0x07
    198a:	78 85       	ldd	r23, Y+8	; 0x08
    198c:	89 85       	ldd	r24, Y+9	; 0x09
    198e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	3f ef       	ldi	r19, 0xFF	; 255
    1994:	4f e7       	ldi	r20, 0x7F	; 127
    1996:	57 e4       	ldi	r21, 0x47	; 71
    1998:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    199c:	18 16       	cp	r1, r24
    199e:	4c f5       	brge	.+82     	; 0x19f2 <LCD_Void_Init_8Bits+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	40 e2       	ldi	r20, 0x20	; 32
    19ae:	51 e4       	ldi	r21, 0x41	; 65
    19b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	bc 01       	movw	r22, r24
    19ba:	cd 01       	movw	r24, r26
    19bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	9e 83       	std	Y+6, r25	; 0x06
    19c6:	8d 83       	std	Y+5, r24	; 0x05
    19c8:	0f c0       	rjmp	.+30     	; 0x19e8 <LCD_Void_Init_8Bits+0x3aa>
    19ca:	88 ec       	ldi	r24, 0xC8	; 200
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	9c 83       	std	Y+4, r25	; 0x04
    19d0:	8b 83       	std	Y+3, r24	; 0x03
    19d2:	8b 81       	ldd	r24, Y+3	; 0x03
    19d4:	9c 81       	ldd	r25, Y+4	; 0x04
    19d6:	01 97       	sbiw	r24, 0x01	; 1
    19d8:	f1 f7       	brne	.-4      	; 0x19d6 <LCD_Void_Init_8Bits+0x398>
    19da:	9c 83       	std	Y+4, r25	; 0x04
    19dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19de:	8d 81       	ldd	r24, Y+5	; 0x05
    19e0:	9e 81       	ldd	r25, Y+6	; 0x06
    19e2:	01 97       	sbiw	r24, 0x01	; 1
    19e4:	9e 83       	std	Y+6, r25	; 0x06
    19e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ea:	9e 81       	ldd	r25, Y+6	; 0x06
    19ec:	00 97       	sbiw	r24, 0x00	; 0
    19ee:	69 f7       	brne	.-38     	; 0x19ca <LCD_Void_Init_8Bits+0x38c>
    19f0:	14 c0       	rjmp	.+40     	; 0x1a1a <LCD_Void_Init_8Bits+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f2:	6f 81       	ldd	r22, Y+7	; 0x07
    19f4:	78 85       	ldd	r23, Y+8	; 0x08
    19f6:	89 85       	ldd	r24, Y+9	; 0x09
    19f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	9e 83       	std	Y+6, r25	; 0x06
    1a04:	8d 83       	std	Y+5, r24	; 0x05
    1a06:	8d 81       	ldd	r24, Y+5	; 0x05
    1a08:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0a:	9a 83       	std	Y+2, r25	; 0x02
    1a0c:	89 83       	std	Y+1, r24	; 0x01
    1a0e:	89 81       	ldd	r24, Y+1	; 0x01
    1a10:	9a 81       	ldd	r25, Y+2	; 0x02
    1a12:	01 97       	sbiw	r24, 0x01	; 1
    1a14:	f1 f7       	brne	.-4      	; 0x1a12 <LCD_Void_Init_8Bits+0x3d4>
    1a16:	9a 83       	std	Y+2, r25	; 0x02
    1a18:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_Void_Write_Cmd(Init_Entry_Data_Set);  //Entry Mode set
    1a1a:	86 e0       	ldi	r24, 0x06	; 6
    1a1c:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <LCD_Void_Write_Cmd>
}
    1a20:	e8 96       	adiw	r28, 0x38	; 56
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	f8 94       	cli
    1a26:	de bf       	out	0x3e, r29	; 62
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	cd bf       	out	0x3d, r28	; 61
    1a2c:	cf 91       	pop	r28
    1a2e:	df 91       	pop	r29
    1a30:	08 95       	ret

00001a32 <LCD_Void_Write_Cmd>:


void LCD_Void_Write_Cmd(u8 Copy_u8_Cmd){
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	0f 92       	push	r0
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
    1a3c:	89 83       	std	Y+1, r24	; 0x01
	DIO_U8_Set_Pin_Value(LCD_U8_CTRL_Port, LCD_U8_RS_PIN, LOW);
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	65 e0       	ldi	r22, 0x05	; 5
    1a42:	40 e0       	ldi	r20, 0x00	; 0
    1a44:	0e 94 ed 06 	call	0xdda	; 0xdda <DIO_U8_Set_Pin_Value>
	LCD_Void_Write(Copy_u8_Cmd);
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <LCD_Void_Write>
}
    1a4e:	0f 90       	pop	r0
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <LCD_Void_Write_Data>:

void LCD_Void_Write_Data(u8 Copy_u8_Data){
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	0f 92       	push	r0
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
    1a60:	89 83       	std	Y+1, r24	; 0x01
	DIO_U8_Set_Pin_Value(LCD_U8_CTRL_Port, LCD_U8_RS_PIN, HIGH);
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	65 e0       	ldi	r22, 0x05	; 5
    1a66:	41 e0       	ldi	r20, 0x01	; 1
    1a68:	0e 94 ed 06 	call	0xdda	; 0xdda <DIO_U8_Set_Pin_Value>
	LCD_Void_Write(Copy_u8_Data);
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
    1a6e:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <LCD_Void_Write>
}
    1a72:	0f 90       	pop	r0
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	08 95       	ret

00001a7a <LCD_Void_Write>:

void LCD_Void_Write(u8 Copy_U8_Value){
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    1a82:	2f 97       	sbiw	r28, 0x0f	; 15
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	f8 94       	cli
    1a88:	de bf       	out	0x3e, r29	; 62
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	cd bf       	out	0x3d, r28	; 61
    1a8e:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_U8_Set_Pin_Value(LCD_U8_CTRL_Port, LCD_U8_RW_PIN, LOW);
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	66 e0       	ldi	r22, 0x06	; 6
    1a94:	40 e0       	ldi	r20, 0x00	; 0
    1a96:	0e 94 ed 06 	call	0xdda	; 0xdda <DIO_U8_Set_Pin_Value>
	DIO_U8_Set_Pin_Value(LCD_U8_DATA_Port, LCD_U8_DATA_PIN_0 ,Get_Bit(Copy_U8_Value,BIT0));
    1a9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a9c:	98 2f       	mov	r25, r24
    1a9e:	91 70       	andi	r25, 0x01	; 1
    1aa0:	82 e0       	ldi	r24, 0x02	; 2
    1aa2:	60 e0       	ldi	r22, 0x00	; 0
    1aa4:	49 2f       	mov	r20, r25
    1aa6:	0e 94 ed 06 	call	0xdda	; 0xdda <DIO_U8_Set_Pin_Value>
	DIO_U8_Set_Pin_Value(LCD_U8_DATA_Port, LCD_U8_DATA_PIN_1 ,Get_Bit(Copy_U8_Value,BIT1));
    1aaa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aac:	86 95       	lsr	r24
    1aae:	98 2f       	mov	r25, r24
    1ab0:	91 70       	andi	r25, 0x01	; 1
    1ab2:	82 e0       	ldi	r24, 0x02	; 2
    1ab4:	61 e0       	ldi	r22, 0x01	; 1
    1ab6:	49 2f       	mov	r20, r25
    1ab8:	0e 94 ed 06 	call	0xdda	; 0xdda <DIO_U8_Set_Pin_Value>
	DIO_U8_Set_Pin_Value(LCD_U8_DATA_Port, LCD_U8_DATA_PIN_2 ,Get_Bit(Copy_U8_Value,BIT2));
    1abc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1abe:	86 95       	lsr	r24
    1ac0:	86 95       	lsr	r24
    1ac2:	98 2f       	mov	r25, r24
    1ac4:	91 70       	andi	r25, 0x01	; 1
    1ac6:	82 e0       	ldi	r24, 0x02	; 2
    1ac8:	62 e0       	ldi	r22, 0x02	; 2
    1aca:	49 2f       	mov	r20, r25
    1acc:	0e 94 ed 06 	call	0xdda	; 0xdda <DIO_U8_Set_Pin_Value>
	DIO_U8_Set_Pin_Value(LCD_U8_DATA_Port, LCD_U8_DATA_PIN_3 ,Get_Bit(Copy_U8_Value,BIT3));
    1ad0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ad2:	86 95       	lsr	r24
    1ad4:	86 95       	lsr	r24
    1ad6:	86 95       	lsr	r24
    1ad8:	98 2f       	mov	r25, r24
    1ada:	91 70       	andi	r25, 0x01	; 1
    1adc:	82 e0       	ldi	r24, 0x02	; 2
    1ade:	63 e0       	ldi	r22, 0x03	; 3
    1ae0:	49 2f       	mov	r20, r25
    1ae2:	0e 94 ed 06 	call	0xdda	; 0xdda <DIO_U8_Set_Pin_Value>
	DIO_U8_Set_Pin_Value(LCD_U8_DATA_Port, LCD_U8_DATA_PIN_4 ,Get_Bit(Copy_U8_Value,BIT4));
    1ae6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ae8:	82 95       	swap	r24
    1aea:	8f 70       	andi	r24, 0x0F	; 15
    1aec:	98 2f       	mov	r25, r24
    1aee:	91 70       	andi	r25, 0x01	; 1
    1af0:	82 e0       	ldi	r24, 0x02	; 2
    1af2:	64 e0       	ldi	r22, 0x04	; 4
    1af4:	49 2f       	mov	r20, r25
    1af6:	0e 94 ed 06 	call	0xdda	; 0xdda <DIO_U8_Set_Pin_Value>
	DIO_U8_Set_Pin_Value(LCD_U8_DATA_Port, LCD_U8_DATA_PIN_5 ,Get_Bit(Copy_U8_Value,BIT5));
    1afa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1afc:	82 95       	swap	r24
    1afe:	86 95       	lsr	r24
    1b00:	87 70       	andi	r24, 0x07	; 7
    1b02:	98 2f       	mov	r25, r24
    1b04:	91 70       	andi	r25, 0x01	; 1
    1b06:	82 e0       	ldi	r24, 0x02	; 2
    1b08:	65 e0       	ldi	r22, 0x05	; 5
    1b0a:	49 2f       	mov	r20, r25
    1b0c:	0e 94 ed 06 	call	0xdda	; 0xdda <DIO_U8_Set_Pin_Value>
	DIO_U8_Set_Pin_Value(LCD_U8_DATA_Port, LCD_U8_DATA_PIN_6 ,Get_Bit(Copy_U8_Value,BIT6));
    1b10:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b12:	82 95       	swap	r24
    1b14:	86 95       	lsr	r24
    1b16:	86 95       	lsr	r24
    1b18:	83 70       	andi	r24, 0x03	; 3
    1b1a:	98 2f       	mov	r25, r24
    1b1c:	91 70       	andi	r25, 0x01	; 1
    1b1e:	82 e0       	ldi	r24, 0x02	; 2
    1b20:	66 e0       	ldi	r22, 0x06	; 6
    1b22:	49 2f       	mov	r20, r25
    1b24:	0e 94 ed 06 	call	0xdda	; 0xdda <DIO_U8_Set_Pin_Value>
	DIO_U8_Set_Pin_Value(LCD_U8_DATA_Port, LCD_U8_DATA_PIN_7 ,Get_Bit(Copy_U8_Value,BIT7));
    1b28:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b2a:	98 2f       	mov	r25, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	99 27       	eor	r25, r25
    1b30:	99 1f       	adc	r25, r25
    1b32:	82 e0       	ldi	r24, 0x02	; 2
    1b34:	67 e0       	ldi	r22, 0x07	; 7
    1b36:	49 2f       	mov	r20, r25
    1b38:	0e 94 ed 06 	call	0xdda	; 0xdda <DIO_U8_Set_Pin_Value>

	DIO_U8_Set_Pin_Value(LCD_U8_CTRL_Port, LCD_U8_ENABLE_PIN, HIGH);
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	67 e0       	ldi	r22, 0x07	; 7
    1b40:	41 e0       	ldi	r20, 0x01	; 1
    1b42:	0e 94 ed 06 	call	0xdda	; 0xdda <DIO_U8_Set_Pin_Value>
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	a0 e8       	ldi	r26, 0x80	; 128
    1b4c:	bf e3       	ldi	r27, 0x3F	; 63
    1b4e:	8b 87       	std	Y+11, r24	; 0x0b
    1b50:	9c 87       	std	Y+12, r25	; 0x0c
    1b52:	ad 87       	std	Y+13, r26	; 0x0d
    1b54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	4a ef       	ldi	r20, 0xFA	; 250
    1b64:	54 e4       	ldi	r21, 0x44	; 68
    1b66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	8f 83       	std	Y+7, r24	; 0x07
    1b70:	98 87       	std	Y+8, r25	; 0x08
    1b72:	a9 87       	std	Y+9, r26	; 0x09
    1b74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b76:	6f 81       	ldd	r22, Y+7	; 0x07
    1b78:	78 85       	ldd	r23, Y+8	; 0x08
    1b7a:	89 85       	ldd	r24, Y+9	; 0x09
    1b7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	40 e8       	ldi	r20, 0x80	; 128
    1b84:	5f e3       	ldi	r21, 0x3F	; 63
    1b86:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b8a:	88 23       	and	r24, r24
    1b8c:	2c f4       	brge	.+10     	; 0x1b98 <LCD_Void_Write+0x11e>
		__ticks = 1;
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	9e 83       	std	Y+6, r25	; 0x06
    1b94:	8d 83       	std	Y+5, r24	; 0x05
    1b96:	3f c0       	rjmp	.+126    	; 0x1c16 <LCD_Void_Write+0x19c>
	else if (__tmp > 65535)
    1b98:	6f 81       	ldd	r22, Y+7	; 0x07
    1b9a:	78 85       	ldd	r23, Y+8	; 0x08
    1b9c:	89 85       	ldd	r24, Y+9	; 0x09
    1b9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	3f ef       	ldi	r19, 0xFF	; 255
    1ba4:	4f e7       	ldi	r20, 0x7F	; 127
    1ba6:	57 e4       	ldi	r21, 0x47	; 71
    1ba8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bac:	18 16       	cp	r1, r24
    1bae:	4c f5       	brge	.+82     	; 0x1c02 <LCD_Void_Write+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	40 e2       	ldi	r20, 0x20	; 32
    1bbe:	51 e4       	ldi	r21, 0x41	; 65
    1bc0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	bc 01       	movw	r22, r24
    1bca:	cd 01       	movw	r24, r26
    1bcc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	9e 83       	std	Y+6, r25	; 0x06
    1bd6:	8d 83       	std	Y+5, r24	; 0x05
    1bd8:	0f c0       	rjmp	.+30     	; 0x1bf8 <LCD_Void_Write+0x17e>
    1bda:	88 ec       	ldi	r24, 0xC8	; 200
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	9c 83       	std	Y+4, r25	; 0x04
    1be0:	8b 83       	std	Y+3, r24	; 0x03
    1be2:	8b 81       	ldd	r24, Y+3	; 0x03
    1be4:	9c 81       	ldd	r25, Y+4	; 0x04
    1be6:	01 97       	sbiw	r24, 0x01	; 1
    1be8:	f1 f7       	brne	.-4      	; 0x1be6 <LCD_Void_Write+0x16c>
    1bea:	9c 83       	std	Y+4, r25	; 0x04
    1bec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bee:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf2:	01 97       	sbiw	r24, 0x01	; 1
    1bf4:	9e 83       	std	Y+6, r25	; 0x06
    1bf6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfc:	00 97       	sbiw	r24, 0x00	; 0
    1bfe:	69 f7       	brne	.-38     	; 0x1bda <LCD_Void_Write+0x160>
    1c00:	14 c0       	rjmp	.+40     	; 0x1c2a <LCD_Void_Write+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c02:	6f 81       	ldd	r22, Y+7	; 0x07
    1c04:	78 85       	ldd	r23, Y+8	; 0x08
    1c06:	89 85       	ldd	r24, Y+9	; 0x09
    1c08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	9e 83       	std	Y+6, r25	; 0x06
    1c14:	8d 83       	std	Y+5, r24	; 0x05
    1c16:	8d 81       	ldd	r24, Y+5	; 0x05
    1c18:	9e 81       	ldd	r25, Y+6	; 0x06
    1c1a:	9a 83       	std	Y+2, r25	; 0x02
    1c1c:	89 83       	std	Y+1, r24	; 0x01
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
    1c20:	9a 81       	ldd	r25, Y+2	; 0x02
    1c22:	01 97       	sbiw	r24, 0x01	; 1
    1c24:	f1 f7       	brne	.-4      	; 0x1c22 <LCD_Void_Write+0x1a8>
    1c26:	9a 83       	std	Y+2, r25	; 0x02
    1c28:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_U8_Set_Pin_Value(LCD_U8_CTRL_Port, LCD_U8_ENABLE_PIN, LOW);
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	67 e0       	ldi	r22, 0x07	; 7
    1c2e:	40 e0       	ldi	r20, 0x00	; 0
    1c30:	0e 94 ed 06 	call	0xdda	; 0xdda <DIO_U8_Set_Pin_Value>

}
    1c34:	2f 96       	adiw	r28, 0x0f	; 15
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	de bf       	out	0x3e, r29	; 62
    1c3c:	0f be       	out	0x3f, r0	; 63
    1c3e:	cd bf       	out	0x3d, r28	; 61
    1c40:	cf 91       	pop	r28
    1c42:	df 91       	pop	r29
    1c44:	08 95       	ret

00001c46 <LCD_Void_Write_String>:


void LCD_Void_Write_String(u8* Copy_PU8_DATA, u8 Copy_U8_X_Postion, u8 Copy_U8_Y_Postion) {
    1c46:	df 93       	push	r29
    1c48:	cf 93       	push	r28
    1c4a:	00 d0       	rcall	.+0      	; 0x1c4c <LCD_Void_Write_String+0x6>
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <LCD_Void_Write_String+0x8>
    1c4e:	00 d0       	rcall	.+0      	; 0x1c50 <LCD_Void_Write_String+0xa>
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
    1c54:	9c 83       	std	Y+4, r25	; 0x04
    1c56:	8b 83       	std	Y+3, r24	; 0x03
    1c58:	6d 83       	std	Y+5, r22	; 0x05
    1c5a:	4e 83       	std	Y+6, r20	; 0x06
    u8 Local_U8_DDRAM_Address;
    u8 counter = 0;
    1c5c:	19 82       	std	Y+1, r1	; 0x01
    if (Copy_U8_X_Postion > 15 || Copy_U8_Y_Postion > 1) {
    1c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c60:	80 31       	cpi	r24, 0x10	; 16
    1c62:	18 f4       	brcc	.+6      	; 0x1c6a <LCD_Void_Write_String+0x24>
    1c64:	8e 81       	ldd	r24, Y+6	; 0x06
    1c66:	82 30       	cpi	r24, 0x02	; 2
    1c68:	38 f0       	brcs	.+14     	; 0x1c78 <LCD_Void_Write_String+0x32>
        LCD_Void_Write_String((u8*)"Invalid entry", 0, 0);
    1c6a:	80 e6       	ldi	r24, 0x60	; 96
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	60 e0       	ldi	r22, 0x00	; 0
    1c70:	40 e0       	ldi	r20, 0x00	; 0
    1c72:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <LCD_Void_Write_String>
    1c76:	3a c0       	rjmp	.+116    	; 0x1cec <LCD_Void_Write_String+0xa6>
        return;
    }
    Local_U8_DDRAM_Address = Copy_U8_X_Postion + (Copy_U8_Y_Postion * 64);
    1c78:	8e 81       	ldd	r24, Y+6	; 0x06
    1c7a:	88 2f       	mov	r24, r24
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	00 24       	eor	r0, r0
    1c80:	96 95       	lsr	r25
    1c82:	87 95       	ror	r24
    1c84:	07 94       	ror	r0
    1c86:	96 95       	lsr	r25
    1c88:	87 95       	ror	r24
    1c8a:	07 94       	ror	r0
    1c8c:	98 2f       	mov	r25, r24
    1c8e:	80 2d       	mov	r24, r0
    1c90:	98 2f       	mov	r25, r24
    1c92:	8d 81       	ldd	r24, Y+5	; 0x05
    1c94:	89 0f       	add	r24, r25
    1c96:	8a 83       	std	Y+2, r24	; 0x02
    Local_U8_DDRAM_Address |= DDRAM_ADDRESS;
    1c98:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9a:	80 68       	ori	r24, 0x80	; 128
    1c9c:	8a 83       	std	Y+2, r24	; 0x02
    LCD_Void_Write_Cmd(Local_U8_DDRAM_Address);
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <LCD_Void_Write_Cmd>
    1ca4:	1e c0       	rjmp	.+60     	; 0x1ce2 <LCD_Void_Write_String+0x9c>

    while (*Copy_PU8_DATA != '\0') {
        LCD_Void_Write_Data(*Copy_PU8_DATA);
    1ca6:	eb 81       	ldd	r30, Y+3	; 0x03
    1ca8:	fc 81       	ldd	r31, Y+4	; 0x04
    1caa:	80 81       	ld	r24, Z
    1cac:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <LCD_Void_Write_Data>
        Copy_PU8_DATA++;
    1cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb4:	01 96       	adiw	r24, 0x01	; 1
    1cb6:	9c 83       	std	Y+4, r25	; 0x04
    1cb8:	8b 83       	std	Y+3, r24	; 0x03
        counter++;
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	8f 5f       	subi	r24, 0xFF	; 255
    1cbe:	89 83       	std	Y+1, r24	; 0x01
        if (counter == 16) {
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	80 31       	cpi	r24, 0x10	; 16
    1cc4:	71 f4       	brne	.+28     	; 0x1ce2 <LCD_Void_Write_String+0x9c>
            if (Copy_U8_Y_Postion == 0) {
    1cc6:	8e 81       	ldd	r24, Y+6	; 0x06
    1cc8:	88 23       	and	r24, r24
    1cca:	19 f4       	brne	.+6      	; 0x1cd2 <LCD_Void_Write_String+0x8c>
                Local_U8_DDRAM_Address = Second_Line_Start;
    1ccc:	80 e4       	ldi	r24, 0x40	; 64
    1cce:	8a 83       	std	Y+2, r24	; 0x02
    1cd0:	02 c0       	rjmp	.+4      	; 0x1cd6 <LCD_Void_Write_String+0x90>
            } else {
            	Local_U8_DDRAM_Address = Copy_U8_X_Postion;
    1cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd4:	8a 83       	std	Y+2, r24	; 0x02
            }
            Local_U8_DDRAM_Address |= DDRAM_ADDRESS;
    1cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd8:	80 68       	ori	r24, 0x80	; 128
    1cda:	8a 83       	std	Y+2, r24	; 0x02
            LCD_Void_Write_Cmd(Local_U8_DDRAM_Address);
    1cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cde:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <LCD_Void_Write_Cmd>
    }
    Local_U8_DDRAM_Address = Copy_U8_X_Postion + (Copy_U8_Y_Postion * 64);
    Local_U8_DDRAM_Address |= DDRAM_ADDRESS;
    LCD_Void_Write_Cmd(Local_U8_DDRAM_Address);

    while (*Copy_PU8_DATA != '\0') {
    1ce2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ce4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ce6:	80 81       	ld	r24, Z
    1ce8:	88 23       	and	r24, r24
    1cea:	e9 f6       	brne	.-70     	; 0x1ca6 <LCD_Void_Write_String+0x60>
            }
            Local_U8_DDRAM_Address |= DDRAM_ADDRESS;
            LCD_Void_Write_Cmd(Local_U8_DDRAM_Address);
        }
    }
}
    1cec:	26 96       	adiw	r28, 0x06	; 6
    1cee:	0f b6       	in	r0, 0x3f	; 63
    1cf0:	f8 94       	cli
    1cf2:	de bf       	out	0x3e, r29	; 62
    1cf4:	0f be       	out	0x3f, r0	; 63
    1cf6:	cd bf       	out	0x3d, r28	; 61
    1cf8:	cf 91       	pop	r28
    1cfa:	df 91       	pop	r29
    1cfc:	08 95       	ret

00001cfe <LCD_Void_Write_Number>:



void LCD_Void_Write_Number(u32 Copy_U32_Number, u8 Copy_U8_X_Postion, u8 Copy_U8_Y_Postion){
    1cfe:	df 93       	push	r29
    1d00:	cf 93       	push	r28
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	a1 97       	sbiw	r28, 0x21	; 33
    1d08:	0f b6       	in	r0, 0x3f	; 63
    1d0a:	f8 94       	cli
    1d0c:	de bf       	out	0x3e, r29	; 62
    1d0e:	0f be       	out	0x3f, r0	; 63
    1d10:	cd bf       	out	0x3d, r28	; 61
    1d12:	6c 8f       	std	Y+28, r22	; 0x1c
    1d14:	7d 8f       	std	Y+29, r23	; 0x1d
    1d16:	8e 8f       	std	Y+30, r24	; 0x1e
    1d18:	9f 8f       	std	Y+31, r25	; 0x1f
    1d1a:	48 a3       	std	Y+32, r20	; 0x20
    1d1c:	29 a3       	std	Y+33, r18	; 0x21
    u8 Copy_U8_Reminder;
    u8 Copy_U8_arr[20];
    u8 i=0;
    1d1e:	1e 82       	std	Y+6, r1	; 0x06
    u8 Local_U8_DDRAM_Address;
    u8 counter = 0; // Initialize counter variable to 0
    1d20:	1c 82       	std	Y+4, r1	; 0x04

    if (Copy_U8_X_Postion > 15 || Copy_U8_Y_Postion > 1) {
    1d22:	88 a1       	ldd	r24, Y+32	; 0x20
    1d24:	80 31       	cpi	r24, 0x10	; 16
    1d26:	18 f4       	brcc	.+6      	; 0x1d2e <LCD_Void_Write_Number+0x30>
    1d28:	89 a1       	ldd	r24, Y+33	; 0x21
    1d2a:	82 30       	cpi	r24, 0x02	; 2
    1d2c:	38 f0       	brcs	.+14     	; 0x1d3c <LCD_Void_Write_Number+0x3e>
        LCD_Void_Write_String((u8*)"Invalid entry", 0, 0);
    1d2e:	80 e6       	ldi	r24, 0x60	; 96
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	60 e0       	ldi	r22, 0x00	; 0
    1d34:	40 e0       	ldi	r20, 0x00	; 0
    1d36:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <LCD_Void_Write_String>
    1d3a:	f2 c0       	rjmp	.+484    	; 0x1f20 <LCD_Void_Write_Number+0x222>
        return;
    }

    Local_U8_DDRAM_Address = Copy_U8_X_Postion + (Copy_U8_Y_Postion * 64);
    1d3c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d3e:	88 2f       	mov	r24, r24
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	00 24       	eor	r0, r0
    1d44:	96 95       	lsr	r25
    1d46:	87 95       	ror	r24
    1d48:	07 94       	ror	r0
    1d4a:	96 95       	lsr	r25
    1d4c:	87 95       	ror	r24
    1d4e:	07 94       	ror	r0
    1d50:	98 2f       	mov	r25, r24
    1d52:	80 2d       	mov	r24, r0
    1d54:	98 2f       	mov	r25, r24
    1d56:	88 a1       	ldd	r24, Y+32	; 0x20
    1d58:	89 0f       	add	r24, r25
    1d5a:	8d 83       	std	Y+5, r24	; 0x05
    Local_U8_DDRAM_Address |= DDRAM_ADDRESS;
    1d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5e:	80 68       	ori	r24, 0x80	; 128
    1d60:	8d 83       	std	Y+5, r24	; 0x05
    LCD_Void_Write_Cmd(Local_U8_DDRAM_Address);
    1d62:	8d 81       	ldd	r24, Y+5	; 0x05
    1d64:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <LCD_Void_Write_Cmd>

    if (Copy_U32_Number == 0) {
    1d68:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d6a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d6c:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1d6e:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1d70:	00 97       	sbiw	r24, 0x00	; 0
    1d72:	a1 05       	cpc	r26, r1
    1d74:	b1 05       	cpc	r27, r1
    1d76:	09 f0       	breq	.+2      	; 0x1d7a <LCD_Void_Write_Number+0x7c>
    1d78:	44 c0       	rjmp	.+136    	; 0x1e02 <LCD_Void_Write_Number+0x104>
        Copy_U8_arr[i] = '0';
    1d7a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d7c:	28 2f       	mov	r18, r24
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	ce 01       	movw	r24, r28
    1d82:	08 96       	adiw	r24, 0x08	; 8
    1d84:	fc 01       	movw	r30, r24
    1d86:	e2 0f       	add	r30, r18
    1d88:	f3 1f       	adc	r31, r19
    1d8a:	80 e3       	ldi	r24, 0x30	; 48
    1d8c:	80 83       	st	Z, r24
        i++;
    1d8e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d90:	8f 5f       	subi	r24, 0xFF	; 255
    1d92:	8e 83       	std	Y+6, r24	; 0x06
        counter++;
    1d94:	8c 81       	ldd	r24, Y+4	; 0x04
    1d96:	8f 5f       	subi	r24, 0xFF	; 255
    1d98:	8c 83       	std	Y+4, r24	; 0x04
    1d9a:	3b c0       	rjmp	.+118    	; 0x1e12 <LCD_Void_Write_Number+0x114>
    } else {
        while(Copy_U32_Number != 0){
            Copy_U8_Reminder = Copy_U32_Number % 10;
    1d9c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d9e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1da0:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1da2:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1da4:	2a e0       	ldi	r18, 0x0A	; 10
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	40 e0       	ldi	r20, 0x00	; 0
    1daa:	50 e0       	ldi	r21, 0x00	; 0
    1dac:	bc 01       	movw	r22, r24
    1dae:	cd 01       	movw	r24, r26
    1db0:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <__udivmodsi4>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	8f 83       	std	Y+7, r24	; 0x07
            Copy_U8_arr[i] = Copy_U8_Reminder +'0';
    1dba:	8e 81       	ldd	r24, Y+6	; 0x06
    1dbc:	28 2f       	mov	r18, r24
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	8f 81       	ldd	r24, Y+7	; 0x07
    1dc2:	48 2f       	mov	r20, r24
    1dc4:	40 5d       	subi	r20, 0xD0	; 208
    1dc6:	ce 01       	movw	r24, r28
    1dc8:	08 96       	adiw	r24, 0x08	; 8
    1dca:	fc 01       	movw	r30, r24
    1dcc:	e2 0f       	add	r30, r18
    1dce:	f3 1f       	adc	r31, r19
    1dd0:	40 83       	st	Z, r20
            i++;
    1dd2:	8e 81       	ldd	r24, Y+6	; 0x06
    1dd4:	8f 5f       	subi	r24, 0xFF	; 255
    1dd6:	8e 83       	std	Y+6, r24	; 0x06
            Copy_U32_Number = Copy_U32_Number / 10;
    1dd8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1dda:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ddc:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1dde:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1de0:	2a e0       	ldi	r18, 0x0A	; 10
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	40 e0       	ldi	r20, 0x00	; 0
    1de6:	50 e0       	ldi	r21, 0x00	; 0
    1de8:	bc 01       	movw	r22, r24
    1dea:	cd 01       	movw	r24, r26
    1dec:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <__udivmodsi4>
    1df0:	da 01       	movw	r26, r20
    1df2:	c9 01       	movw	r24, r18
    1df4:	8c 8f       	std	Y+28, r24	; 0x1c
    1df6:	9d 8f       	std	Y+29, r25	; 0x1d
    1df8:	ae 8f       	std	Y+30, r26	; 0x1e
    1dfa:	bf 8f       	std	Y+31, r27	; 0x1f
            counter++;
    1dfc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dfe:	8f 5f       	subi	r24, 0xFF	; 255
    1e00:	8c 83       	std	Y+4, r24	; 0x04
    if (Copy_U32_Number == 0) {
        Copy_U8_arr[i] = '0';
        i++;
        counter++;
    } else {
        while(Copy_U32_Number != 0){
    1e02:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e04:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e06:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1e08:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1e0a:	00 97       	sbiw	r24, 0x00	; 0
    1e0c:	a1 05       	cpc	r26, r1
    1e0e:	b1 05       	cpc	r27, r1
    1e10:	29 f6       	brne	.-118    	; 0x1d9c <LCD_Void_Write_Number+0x9e>
            i++;
            Copy_U32_Number = Copy_U32_Number / 10;
            counter++;
        }
    }
    Copy_U8_arr[i] = '\0';
    1e12:	8e 81       	ldd	r24, Y+6	; 0x06
    1e14:	28 2f       	mov	r18, r24
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	ce 01       	movw	r24, r28
    1e1a:	08 96       	adiw	r24, 0x08	; 8
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	e2 0f       	add	r30, r18
    1e20:	f3 1f       	adc	r31, r19
    1e22:	10 82       	st	Z, r1

    // Reverse the order of the digits in the array

    for (u8 j = 0; j < i/2; j++) {
    1e24:	1b 82       	std	Y+3, r1	; 0x03
    1e26:	39 c0       	rjmp	.+114    	; 0x1e9a <LCD_Void_Write_Number+0x19c>
        u8 temp = Copy_U8_arr[j];
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	28 2f       	mov	r18, r24
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	ce 01       	movw	r24, r28
    1e30:	08 96       	adiw	r24, 0x08	; 8
    1e32:	fc 01       	movw	r30, r24
    1e34:	e2 0f       	add	r30, r18
    1e36:	f3 1f       	adc	r31, r19
    1e38:	80 81       	ld	r24, Z
    1e3a:	8a 83       	std	Y+2, r24	; 0x02
        Copy_U8_arr[j] = Copy_U8_arr[i-1-j];
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	48 2f       	mov	r20, r24
    1e40:	50 e0       	ldi	r21, 0x00	; 0
    1e42:	8e 81       	ldd	r24, Y+6	; 0x06
    1e44:	88 2f       	mov	r24, r24
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	9c 01       	movw	r18, r24
    1e4a:	21 50       	subi	r18, 0x01	; 1
    1e4c:	30 40       	sbci	r19, 0x00	; 0
    1e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e50:	88 2f       	mov	r24, r24
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	28 1b       	sub	r18, r24
    1e56:	39 0b       	sbc	r19, r25
    1e58:	ce 01       	movw	r24, r28
    1e5a:	08 96       	adiw	r24, 0x08	; 8
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	e2 0f       	add	r30, r18
    1e60:	f3 1f       	adc	r31, r19
    1e62:	20 81       	ld	r18, Z
    1e64:	ce 01       	movw	r24, r28
    1e66:	08 96       	adiw	r24, 0x08	; 8
    1e68:	fc 01       	movw	r30, r24
    1e6a:	e4 0f       	add	r30, r20
    1e6c:	f5 1f       	adc	r31, r21
    1e6e:	20 83       	st	Z, r18
        Copy_U8_arr[i-1-j] = temp;
    1e70:	8e 81       	ldd	r24, Y+6	; 0x06
    1e72:	88 2f       	mov	r24, r24
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	9c 01       	movw	r18, r24
    1e78:	21 50       	subi	r18, 0x01	; 1
    1e7a:	30 40       	sbci	r19, 0x00	; 0
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	88 2f       	mov	r24, r24
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	28 1b       	sub	r18, r24
    1e84:	39 0b       	sbc	r19, r25
    1e86:	ce 01       	movw	r24, r28
    1e88:	08 96       	adiw	r24, 0x08	; 8
    1e8a:	fc 01       	movw	r30, r24
    1e8c:	e2 0f       	add	r30, r18
    1e8e:	f3 1f       	adc	r31, r19
    1e90:	8a 81       	ldd	r24, Y+2	; 0x02
    1e92:	80 83       	st	Z, r24
    }
    Copy_U8_arr[i] = '\0';

    // Reverse the order of the digits in the array

    for (u8 j = 0; j < i/2; j++) {
    1e94:	8b 81       	ldd	r24, Y+3	; 0x03
    1e96:	8f 5f       	subi	r24, 0xFF	; 255
    1e98:	8b 83       	std	Y+3, r24	; 0x03
    1e9a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e9c:	98 2f       	mov	r25, r24
    1e9e:	96 95       	lsr	r25
    1ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea2:	89 17       	cp	r24, r25
    1ea4:	08 f2       	brcs	.-126    	; 0x1e28 <LCD_Void_Write_Number+0x12a>
        Copy_U8_arr[i-1-j] = temp;
    }


    // Print the array elements and check for line break
    for(u8 j = 0; Copy_U8_arr[j] != '\0'; j++){
    1ea6:	19 82       	std	Y+1, r1	; 0x01
    1ea8:	30 c0       	rjmp	.+96     	; 0x1f0a <LCD_Void_Write_Number+0x20c>
        LCD_Void_Write_Data(Copy_U8_arr[j]);
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	28 2f       	mov	r18, r24
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	ce 01       	movw	r24, r28
    1eb2:	08 96       	adiw	r24, 0x08	; 8
    1eb4:	fc 01       	movw	r30, r24
    1eb6:	e2 0f       	add	r30, r18
    1eb8:	f3 1f       	adc	r31, r19
    1eba:	80 81       	ld	r24, Z
    1ebc:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <LCD_Void_Write_Data>
        counter++;
    1ec0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec2:	8f 5f       	subi	r24, 0xFF	; 255
    1ec4:	8c 83       	std	Y+4, r24	; 0x04
        if (counter == 16) {
    1ec6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec8:	80 31       	cpi	r24, 0x10	; 16
    1eca:	e1 f4       	brne	.+56     	; 0x1f04 <LCD_Void_Write_Number+0x206>
            if (Copy_U8_Y_Postion == 0) {
    1ecc:	89 a1       	ldd	r24, Y+33	; 0x21
    1ece:	88 23       	and	r24, r24
    1ed0:	19 f4       	brne	.+6      	; 0x1ed8 <LCD_Void_Write_Number+0x1da>
                Local_U8_DDRAM_Address = Second_Line_Start;
    1ed2:	80 e4       	ldi	r24, 0x40	; 64
    1ed4:	8d 83       	std	Y+5, r24	; 0x05
    1ed6:	10 c0       	rjmp	.+32     	; 0x1ef8 <LCD_Void_Write_Number+0x1fa>
            } else {
            	Local_U8_DDRAM_Address = Copy_U8_X_Postion + (Copy_U8_Y_Postion * 64);
    1ed8:	89 a1       	ldd	r24, Y+33	; 0x21
    1eda:	88 2f       	mov	r24, r24
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	00 24       	eor	r0, r0
    1ee0:	96 95       	lsr	r25
    1ee2:	87 95       	ror	r24
    1ee4:	07 94       	ror	r0
    1ee6:	96 95       	lsr	r25
    1ee8:	87 95       	ror	r24
    1eea:	07 94       	ror	r0
    1eec:	98 2f       	mov	r25, r24
    1eee:	80 2d       	mov	r24, r0
    1ef0:	98 2f       	mov	r25, r24
    1ef2:	88 a1       	ldd	r24, Y+32	; 0x20
    1ef4:	89 0f       	add	r24, r25
    1ef6:	8d 83       	std	Y+5, r24	; 0x05
            }
            Local_U8_DDRAM_Address |= DDRAM_ADDRESS;
    1ef8:	8d 81       	ldd	r24, Y+5	; 0x05
    1efa:	80 68       	ori	r24, 0x80	; 128
    1efc:	8d 83       	std	Y+5, r24	; 0x05
            LCD_Void_Write_Cmd(Local_U8_DDRAM_Address);
    1efe:	8d 81       	ldd	r24, Y+5	; 0x05
    1f00:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <LCD_Void_Write_Cmd>
        Copy_U8_arr[i-1-j] = temp;
    }


    // Print the array elements and check for line break
    for(u8 j = 0; Copy_U8_arr[j] != '\0'; j++){
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	8f 5f       	subi	r24, 0xFF	; 255
    1f08:	89 83       	std	Y+1, r24	; 0x01
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
    1f0c:	28 2f       	mov	r18, r24
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	ce 01       	movw	r24, r28
    1f12:	08 96       	adiw	r24, 0x08	; 8
    1f14:	fc 01       	movw	r30, r24
    1f16:	e2 0f       	add	r30, r18
    1f18:	f3 1f       	adc	r31, r19
    1f1a:	80 81       	ld	r24, Z
    1f1c:	88 23       	and	r24, r24
    1f1e:	29 f6       	brne	.-118    	; 0x1eaa <LCD_Void_Write_Number+0x1ac>
            }
            Local_U8_DDRAM_Address |= DDRAM_ADDRESS;
            LCD_Void_Write_Cmd(Local_U8_DDRAM_Address);
        }
    }
}
    1f20:	a1 96       	adiw	r28, 0x21	; 33
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	f8 94       	cli
    1f26:	de bf       	out	0x3e, r29	; 62
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	cd bf       	out	0x3d, r28	; 61
    1f2c:	cf 91       	pop	r28
    1f2e:	df 91       	pop	r29
    1f30:	08 95       	ret

00001f32 <LCD_ClearDisplay>:

void LCD_ClearDisplay(){
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
    1f3a:	2e 97       	sbiw	r28, 0x0e	; 14
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	de bf       	out	0x3e, r29	; 62
    1f42:	0f be       	out	0x3f, r0	; 63
    1f44:	cd bf       	out	0x3d, r28	; 61
	LCD_Void_Write_Cmd(Init_Display_Clear);  //display clear
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <LCD_Void_Write_Cmd>
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	a0 e0       	ldi	r26, 0x00	; 0
    1f52:	b0 e4       	ldi	r27, 0x40	; 64
    1f54:	8b 87       	std	Y+11, r24	; 0x0b
    1f56:	9c 87       	std	Y+12, r25	; 0x0c
    1f58:	ad 87       	std	Y+13, r26	; 0x0d
    1f5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	4a ef       	ldi	r20, 0xFA	; 250
    1f6a:	54 e4       	ldi	r21, 0x44	; 68
    1f6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	8f 83       	std	Y+7, r24	; 0x07
    1f76:	98 87       	std	Y+8, r25	; 0x08
    1f78:	a9 87       	std	Y+9, r26	; 0x09
    1f7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f7e:	78 85       	ldd	r23, Y+8	; 0x08
    1f80:	89 85       	ldd	r24, Y+9	; 0x09
    1f82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 e8       	ldi	r20, 0x80	; 128
    1f8a:	5f e3       	ldi	r21, 0x3F	; 63
    1f8c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f90:	88 23       	and	r24, r24
    1f92:	2c f4       	brge	.+10     	; 0x1f9e <LCD_ClearDisplay+0x6c>
		__ticks = 1;
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	9e 83       	std	Y+6, r25	; 0x06
    1f9a:	8d 83       	std	Y+5, r24	; 0x05
    1f9c:	3f c0       	rjmp	.+126    	; 0x201c <LCD_ClearDisplay+0xea>
	else if (__tmp > 65535)
    1f9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa0:	78 85       	ldd	r23, Y+8	; 0x08
    1fa2:	89 85       	ldd	r24, Y+9	; 0x09
    1fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	3f ef       	ldi	r19, 0xFF	; 255
    1faa:	4f e7       	ldi	r20, 0x7F	; 127
    1fac:	57 e4       	ldi	r21, 0x47	; 71
    1fae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fb2:	18 16       	cp	r1, r24
    1fb4:	4c f5       	brge	.+82     	; 0x2008 <LCD_ClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	40 e2       	ldi	r20, 0x20	; 32
    1fc4:	51 e4       	ldi	r21, 0x41	; 65
    1fc6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	bc 01       	movw	r22, r24
    1fd0:	cd 01       	movw	r24, r26
    1fd2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	9e 83       	std	Y+6, r25	; 0x06
    1fdc:	8d 83       	std	Y+5, r24	; 0x05
    1fde:	0f c0       	rjmp	.+30     	; 0x1ffe <LCD_ClearDisplay+0xcc>
    1fe0:	88 ec       	ldi	r24, 0xC8	; 200
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	9c 83       	std	Y+4, r25	; 0x04
    1fe6:	8b 83       	std	Y+3, r24	; 0x03
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	9c 81       	ldd	r25, Y+4	; 0x04
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	f1 f7       	brne	.-4      	; 0x1fec <LCD_ClearDisplay+0xba>
    1ff0:	9c 83       	std	Y+4, r25	; 0x04
    1ff2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	9e 83       	std	Y+6, r25	; 0x06
    1ffc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    2000:	9e 81       	ldd	r25, Y+6	; 0x06
    2002:	00 97       	sbiw	r24, 0x00	; 0
    2004:	69 f7       	brne	.-38     	; 0x1fe0 <LCD_ClearDisplay+0xae>
    2006:	14 c0       	rjmp	.+40     	; 0x2030 <LCD_ClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2008:	6f 81       	ldd	r22, Y+7	; 0x07
    200a:	78 85       	ldd	r23, Y+8	; 0x08
    200c:	89 85       	ldd	r24, Y+9	; 0x09
    200e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2010:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	9e 83       	std	Y+6, r25	; 0x06
    201a:	8d 83       	std	Y+5, r24	; 0x05
    201c:	8d 81       	ldd	r24, Y+5	; 0x05
    201e:	9e 81       	ldd	r25, Y+6	; 0x06
    2020:	9a 83       	std	Y+2, r25	; 0x02
    2022:	89 83       	std	Y+1, r24	; 0x01
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	9a 81       	ldd	r25, Y+2	; 0x02
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	f1 f7       	brne	.-4      	; 0x2028 <LCD_ClearDisplay+0xf6>
    202c:	9a 83       	std	Y+2, r25	; 0x02
    202e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2030:	2e 96       	adiw	r28, 0x0e	; 14
    2032:	0f b6       	in	r0, 0x3f	; 63
    2034:	f8 94       	cli
    2036:	de bf       	out	0x3e, r29	; 62
    2038:	0f be       	out	0x3f, r0	; 63
    203a:	cd bf       	out	0x3d, r28	; 61
    203c:	cf 91       	pop	r28
    203e:	df 91       	pop	r29
    2040:	08 95       	ret

00002042 <Calculate_String_Length>:

u8 Calculate_String_Length(u8* Copy_PU8_DATA){
    2042:	df 93       	push	r29
    2044:	cf 93       	push	r28
    2046:	00 d0       	rcall	.+0      	; 0x2048 <Calculate_String_Length+0x6>
    2048:	0f 92       	push	r0
    204a:	cd b7       	in	r28, 0x3d	; 61
    204c:	de b7       	in	r29, 0x3e	; 62
    204e:	9b 83       	std	Y+3, r25	; 0x03
    2050:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    2052:	19 82       	std	Y+1, r1	; 0x01
    2054:	08 c0       	rjmp	.+16     	; 0x2066 <Calculate_String_Length+0x24>
	while(*Copy_PU8_DATA != '\0'){
		i++;
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	8f 5f       	subi	r24, 0xFF	; 255
    205a:	89 83       	std	Y+1, r24	; 0x01
		Copy_PU8_DATA++;
    205c:	8a 81       	ldd	r24, Y+2	; 0x02
    205e:	9b 81       	ldd	r25, Y+3	; 0x03
    2060:	01 96       	adiw	r24, 0x01	; 1
    2062:	9b 83       	std	Y+3, r25	; 0x03
    2064:	8a 83       	std	Y+2, r24	; 0x02
	_delay_ms(2);
}

u8 Calculate_String_Length(u8* Copy_PU8_DATA){
	u8 i=0;
	while(*Copy_PU8_DATA != '\0'){
    2066:	ea 81       	ldd	r30, Y+2	; 0x02
    2068:	fb 81       	ldd	r31, Y+3	; 0x03
    206a:	80 81       	ld	r24, Z
    206c:	88 23       	and	r24, r24
    206e:	99 f7       	brne	.-26     	; 0x2056 <Calculate_String_Length+0x14>
		i++;
		Copy_PU8_DATA++;

	}
	return i;
    2070:	89 81       	ldd	r24, Y+1	; 0x01
}
    2072:	0f 90       	pop	r0
    2074:	0f 90       	pop	r0
    2076:	0f 90       	pop	r0
    2078:	cf 91       	pop	r28
    207a:	df 91       	pop	r29
    207c:	08 95       	ret

0000207e <reverse>:


void reverse(u8 arr[], u8 lenght){
    207e:	df 93       	push	r29
    2080:	cf 93       	push	r28
    2082:	00 d0       	rcall	.+0      	; 0x2084 <reverse+0x6>
    2084:	00 d0       	rcall	.+0      	; 0x2086 <reverse+0x8>
    2086:	00 d0       	rcall	.+0      	; 0x2088 <reverse+0xa>
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    208c:	9d 83       	std	Y+5, r25	; 0x05
    208e:	8c 83       	std	Y+4, r24	; 0x04
    2090:	6e 83       	std	Y+6, r22	; 0x06
	u8 start=0;
    2092:	1b 82       	std	Y+3, r1	; 0x03
	u8 end = lenght -1;
    2094:	8e 81       	ldd	r24, Y+6	; 0x06
    2096:	81 50       	subi	r24, 0x01	; 1
    2098:	8a 83       	std	Y+2, r24	; 0x02
    209a:	2c c0       	rjmp	.+88     	; 0x20f4 <reverse+0x76>

	while(start< end){

		u8 temp = arr[start];
    209c:	8b 81       	ldd	r24, Y+3	; 0x03
    209e:	28 2f       	mov	r18, r24
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	8c 81       	ldd	r24, Y+4	; 0x04
    20a4:	9d 81       	ldd	r25, Y+5	; 0x05
    20a6:	fc 01       	movw	r30, r24
    20a8:	e2 0f       	add	r30, r18
    20aa:	f3 1f       	adc	r31, r19
    20ac:	80 81       	ld	r24, Z
    20ae:	89 83       	std	Y+1, r24	; 0x01
		arr[start] = arr[end];
    20b0:	8b 81       	ldd	r24, Y+3	; 0x03
    20b2:	28 2f       	mov	r18, r24
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	8c 81       	ldd	r24, Y+4	; 0x04
    20b8:	9d 81       	ldd	r25, Y+5	; 0x05
    20ba:	dc 01       	movw	r26, r24
    20bc:	a2 0f       	add	r26, r18
    20be:	b3 1f       	adc	r27, r19
    20c0:	8a 81       	ldd	r24, Y+2	; 0x02
    20c2:	28 2f       	mov	r18, r24
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	8c 81       	ldd	r24, Y+4	; 0x04
    20c8:	9d 81       	ldd	r25, Y+5	; 0x05
    20ca:	fc 01       	movw	r30, r24
    20cc:	e2 0f       	add	r30, r18
    20ce:	f3 1f       	adc	r31, r19
    20d0:	80 81       	ld	r24, Z
    20d2:	8c 93       	st	X, r24
		arr[end] = temp;
    20d4:	8a 81       	ldd	r24, Y+2	; 0x02
    20d6:	28 2f       	mov	r18, r24
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	8c 81       	ldd	r24, Y+4	; 0x04
    20dc:	9d 81       	ldd	r25, Y+5	; 0x05
    20de:	fc 01       	movw	r30, r24
    20e0:	e2 0f       	add	r30, r18
    20e2:	f3 1f       	adc	r31, r19
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	80 83       	st	Z, r24
		start++;
    20e8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ea:	8f 5f       	subi	r24, 0xFF	; 255
    20ec:	8b 83       	std	Y+3, r24	; 0x03
		end++;
    20ee:	8a 81       	ldd	r24, Y+2	; 0x02
    20f0:	8f 5f       	subi	r24, 0xFF	; 255
    20f2:	8a 83       	std	Y+2, r24	; 0x02

void reverse(u8 arr[], u8 lenght){
	u8 start=0;
	u8 end = lenght -1;

	while(start< end){
    20f4:	9b 81       	ldd	r25, Y+3	; 0x03
    20f6:	8a 81       	ldd	r24, Y+2	; 0x02
    20f8:	98 17       	cp	r25, r24
    20fa:	80 f2       	brcs	.-96     	; 0x209c <reverse+0x1e>
		arr[end] = temp;
		start++;
		end++;

	}
}
    20fc:	26 96       	adiw	r28, 0x06	; 6
    20fe:	0f b6       	in	r0, 0x3f	; 63
    2100:	f8 94       	cli
    2102:	de bf       	out	0x3e, r29	; 62
    2104:	0f be       	out	0x3f, r0	; 63
    2106:	cd bf       	out	0x3d, r28	; 61
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	08 95       	ret

0000210e <main>:
#include "LCD_Config.h"
#include "LCD_Interface.h"
#include "LCD_Private.h"
#include <util/delay.h>

int main(){
    210e:	df 93       	push	r29
    2110:	cf 93       	push	r28
    2112:	00 d0       	rcall	.+0      	; 0x2114 <main+0x6>
    2114:	00 d0       	rcall	.+0      	; 0x2116 <main+0x8>
    2116:	00 d0       	rcall	.+0      	; 0x2118 <main+0xa>
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
	//a0 input
	DIO_U8_Set_Pin_Direction(GROUP_A,PIN0,INPUT);
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	60 e0       	ldi	r22, 0x00	; 0
    2120:	40 e0       	ldi	r20, 0x00	; 0
    2122:	0e 94 72 08 	call	0x10e4	; 0x10e4 <DIO_U8_Set_Pin_Direction>
	ADC_Void_Init();
    2126:	0e 94 63 06 	call	0xcc6	; 0xcc6 <ADC_Void_Init>
	LCD_Void_Init_8Bits();
    212a:	0e 94 1f 0b 	call	0x163e	; 0x163e <LCD_Void_Init_8Bits>
	u16 digital;
	f32 analog;
	while(1){
		LCD_ClearDisplay();
    212e:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <LCD_ClearDisplay>
		digital = ADC_U8_Read_channel(channel_0);
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	0e 94 9b 06 	call	0xd36	; 0xd36 <ADC_U8_Read_channel>
    2138:	9e 83       	std	Y+6, r25	; 0x06
    213a:	8d 83       	std	Y+5, r24	; 0x05
		LCD_Void_Write_Number(digital,0,0);
    213c:	8d 81       	ldd	r24, Y+5	; 0x05
    213e:	9e 81       	ldd	r25, Y+6	; 0x06
    2140:	cc 01       	movw	r24, r24
    2142:	a0 e0       	ldi	r26, 0x00	; 0
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	bc 01       	movw	r22, r24
    2148:	cd 01       	movw	r24, r26
    214a:	40 e0       	ldi	r20, 0x00	; 0
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <LCD_Void_Write_Number>
		analog = (digital * 5) / 1024;
    2152:	2d 81       	ldd	r18, Y+5	; 0x05
    2154:	3e 81       	ldd	r19, Y+6	; 0x06
    2156:	c9 01       	movw	r24, r18
    2158:	88 0f       	add	r24, r24
    215a:	99 1f       	adc	r25, r25
    215c:	88 0f       	add	r24, r24
    215e:	99 1f       	adc	r25, r25
    2160:	82 0f       	add	r24, r18
    2162:	93 1f       	adc	r25, r19
    2164:	89 2f       	mov	r24, r25
    2166:	99 27       	eor	r25, r25
    2168:	86 95       	lsr	r24
    216a:	86 95       	lsr	r24
    216c:	cc 01       	movw	r24, r24
    216e:	a0 e0       	ldi	r26, 0x00	; 0
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	bc 01       	movw	r22, r24
    2174:	cd 01       	movw	r24, r26
    2176:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	89 83       	std	Y+1, r24	; 0x01
    2180:	9a 83       	std	Y+2, r25	; 0x02
    2182:	ab 83       	std	Y+3, r26	; 0x03
    2184:	bc 83       	std	Y+4, r27	; 0x04
		LCD_Void_Write_Number(analog,0,0);
    2186:	69 81       	ldd	r22, Y+1	; 0x01
    2188:	7a 81       	ldd	r23, Y+2	; 0x02
    218a:	8b 81       	ldd	r24, Y+3	; 0x03
    218c:	9c 81       	ldd	r25, Y+4	; 0x04
    218e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	bc 01       	movw	r22, r24
    2198:	cd 01       	movw	r24, r26
    219a:	40 e0       	ldi	r20, 0x00	; 0
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <LCD_Void_Write_Number>
    21a2:	c5 cf       	rjmp	.-118    	; 0x212e <main+0x20>

000021a4 <__udivmodsi4>:
    21a4:	a1 e2       	ldi	r26, 0x21	; 33
    21a6:	1a 2e       	mov	r1, r26
    21a8:	aa 1b       	sub	r26, r26
    21aa:	bb 1b       	sub	r27, r27
    21ac:	fd 01       	movw	r30, r26
    21ae:	0d c0       	rjmp	.+26     	; 0x21ca <__udivmodsi4_ep>

000021b0 <__udivmodsi4_loop>:
    21b0:	aa 1f       	adc	r26, r26
    21b2:	bb 1f       	adc	r27, r27
    21b4:	ee 1f       	adc	r30, r30
    21b6:	ff 1f       	adc	r31, r31
    21b8:	a2 17       	cp	r26, r18
    21ba:	b3 07       	cpc	r27, r19
    21bc:	e4 07       	cpc	r30, r20
    21be:	f5 07       	cpc	r31, r21
    21c0:	20 f0       	brcs	.+8      	; 0x21ca <__udivmodsi4_ep>
    21c2:	a2 1b       	sub	r26, r18
    21c4:	b3 0b       	sbc	r27, r19
    21c6:	e4 0b       	sbc	r30, r20
    21c8:	f5 0b       	sbc	r31, r21

000021ca <__udivmodsi4_ep>:
    21ca:	66 1f       	adc	r22, r22
    21cc:	77 1f       	adc	r23, r23
    21ce:	88 1f       	adc	r24, r24
    21d0:	99 1f       	adc	r25, r25
    21d2:	1a 94       	dec	r1
    21d4:	69 f7       	brne	.-38     	; 0x21b0 <__udivmodsi4_loop>
    21d6:	60 95       	com	r22
    21d8:	70 95       	com	r23
    21da:	80 95       	com	r24
    21dc:	90 95       	com	r25
    21de:	9b 01       	movw	r18, r22
    21e0:	ac 01       	movw	r20, r24
    21e2:	bd 01       	movw	r22, r26
    21e4:	cf 01       	movw	r24, r30
    21e6:	08 95       	ret

000021e8 <__prologue_saves__>:
    21e8:	2f 92       	push	r2
    21ea:	3f 92       	push	r3
    21ec:	4f 92       	push	r4
    21ee:	5f 92       	push	r5
    21f0:	6f 92       	push	r6
    21f2:	7f 92       	push	r7
    21f4:	8f 92       	push	r8
    21f6:	9f 92       	push	r9
    21f8:	af 92       	push	r10
    21fa:	bf 92       	push	r11
    21fc:	cf 92       	push	r12
    21fe:	df 92       	push	r13
    2200:	ef 92       	push	r14
    2202:	ff 92       	push	r15
    2204:	0f 93       	push	r16
    2206:	1f 93       	push	r17
    2208:	cf 93       	push	r28
    220a:	df 93       	push	r29
    220c:	cd b7       	in	r28, 0x3d	; 61
    220e:	de b7       	in	r29, 0x3e	; 62
    2210:	ca 1b       	sub	r28, r26
    2212:	db 0b       	sbc	r29, r27
    2214:	0f b6       	in	r0, 0x3f	; 63
    2216:	f8 94       	cli
    2218:	de bf       	out	0x3e, r29	; 62
    221a:	0f be       	out	0x3f, r0	; 63
    221c:	cd bf       	out	0x3d, r28	; 61
    221e:	09 94       	ijmp

00002220 <__epilogue_restores__>:
    2220:	2a 88       	ldd	r2, Y+18	; 0x12
    2222:	39 88       	ldd	r3, Y+17	; 0x11
    2224:	48 88       	ldd	r4, Y+16	; 0x10
    2226:	5f 84       	ldd	r5, Y+15	; 0x0f
    2228:	6e 84       	ldd	r6, Y+14	; 0x0e
    222a:	7d 84       	ldd	r7, Y+13	; 0x0d
    222c:	8c 84       	ldd	r8, Y+12	; 0x0c
    222e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2230:	aa 84       	ldd	r10, Y+10	; 0x0a
    2232:	b9 84       	ldd	r11, Y+9	; 0x09
    2234:	c8 84       	ldd	r12, Y+8	; 0x08
    2236:	df 80       	ldd	r13, Y+7	; 0x07
    2238:	ee 80       	ldd	r14, Y+6	; 0x06
    223a:	fd 80       	ldd	r15, Y+5	; 0x05
    223c:	0c 81       	ldd	r16, Y+4	; 0x04
    223e:	1b 81       	ldd	r17, Y+3	; 0x03
    2240:	aa 81       	ldd	r26, Y+2	; 0x02
    2242:	b9 81       	ldd	r27, Y+1	; 0x01
    2244:	ce 0f       	add	r28, r30
    2246:	d1 1d       	adc	r29, r1
    2248:	0f b6       	in	r0, 0x3f	; 63
    224a:	f8 94       	cli
    224c:	de bf       	out	0x3e, r29	; 62
    224e:	0f be       	out	0x3f, r0	; 63
    2250:	cd bf       	out	0x3d, r28	; 61
    2252:	ed 01       	movw	r28, r26
    2254:	08 95       	ret

00002256 <_exit>:
    2256:	f8 94       	cli

00002258 <__stop_program>:
    2258:	ff cf       	rjmp	.-2      	; 0x2258 <__stop_program>
