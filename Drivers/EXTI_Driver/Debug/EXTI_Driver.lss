
EXTI_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002418  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00002418  000024ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800094  00800094  000024e0  2**0
                  ALLOC
  3 .stab         00001ba8  00000000  00000000  000024e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f2b  00000000  00000000  00004088  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004fb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000050f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005263  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007d97  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008b44  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008f31  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000096ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <__vector_1>
       8:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__vector_2>
       c:	0c 94 3b 0a 	jmp	0x1476	; 0x1476 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e1       	ldi	r30, 0x18	; 24
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 39       	cpi	r26, 0x9C	; 156
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 56 11 	call	0x22ac	; 0x22ac <main>
      8a:	0c 94 0a 12 	jmp	0x2414	; 0x2414 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d3 11 	jmp	0x23a6	; 0x23a6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e8       	ldi	r26, 0x82	; 130
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ef 11 	jmp	0x23de	; 0x23de <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 df 11 	jmp	0x23be	; 0x23be <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fb 11 	jmp	0x23f6	; 0x23f6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 df 11 	jmp	0x23be	; 0x23be <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fb 11 	jmp	0x23f6	; 0x23f6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d3 11 	jmp	0x23a6	; 0x23a6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e8       	ldi	r24, 0x82	; 130
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ef 11 	jmp	0x23de	; 0x23de <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 df 11 	jmp	0x23be	; 0x23be <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 fb 11 	jmp	0x23f6	; 0x23f6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 df 11 	jmp	0x23be	; 0x23be <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 fb 11 	jmp	0x23f6	; 0x23f6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 df 11 	jmp	0x23be	; 0x23be <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 fb 11 	jmp	0x23f6	; 0x23f6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_U8_Set_Pin_Value>:
#include "DIO_Private.h"
#include <avr/delay.h>



u8 DIO_U8_Set_Pin_Value(u8 Copy_U8_Port_ID, u8 Copy_U8_Pin_ID, u8 Copy_U8_Pin_Val){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <DIO_U8_Set_Pin_Value+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <DIO_U8_Set_Pin_Value+0x8>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <DIO_U8_Set_Pin_Value+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_U8_Pin_ID >=PIN0) && (Copy_U8_Pin_ID <=PIN7) && (Copy_U8_Port_ID <= GROUP_D) && (Copy_U8_Port_ID >= GROUP_A)){
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <DIO_U8_Set_Pin_Value+0x1c>
     b60:	e1 c0       	rjmp	.+450    	; 0xd24 <DIO_U8_Set_Pin_Value+0x1de>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <DIO_U8_Set_Pin_Value+0x24>
     b68:	dd c0       	rjmp	.+442    	; 0xd24 <DIO_U8_Set_Pin_Value+0x1de>
		if((Copy_U8_Pin_Val == HIGH) || (Copy_U8_Pin_Val == LOW )){
     b6a:	8b 81       	ldd	r24, Y+3	; 0x03
     b6c:	81 30       	cpi	r24, 0x01	; 1
     b6e:	21 f0       	breq	.+8      	; 0xb78 <DIO_U8_Set_Pin_Value+0x32>
     b70:	8b 81       	ldd	r24, Y+3	; 0x03
     b72:	88 23       	and	r24, r24
     b74:	09 f0       	breq	.+2      	; 0xb78 <DIO_U8_Set_Pin_Value+0x32>
     b76:	d3 c0       	rjmp	.+422    	; 0xd1e <DIO_U8_Set_Pin_Value+0x1d8>
			switch (Copy_U8_Port_ID){
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	28 2f       	mov	r18, r24
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	3e 83       	std	Y+6, r19	; 0x06
     b80:	2d 83       	std	Y+5, r18	; 0x05
     b82:	8d 81       	ldd	r24, Y+5	; 0x05
     b84:	9e 81       	ldd	r25, Y+6	; 0x06
     b86:	81 30       	cpi	r24, 0x01	; 1
     b88:	91 05       	cpc	r25, r1
     b8a:	09 f4       	brne	.+2      	; 0xb8e <DIO_U8_Set_Pin_Value+0x48>
     b8c:	43 c0       	rjmp	.+134    	; 0xc14 <DIO_U8_Set_Pin_Value+0xce>
     b8e:	2d 81       	ldd	r18, Y+5	; 0x05
     b90:	3e 81       	ldd	r19, Y+6	; 0x06
     b92:	22 30       	cpi	r18, 0x02	; 2
     b94:	31 05       	cpc	r19, r1
     b96:	2c f4       	brge	.+10     	; 0xba2 <DIO_U8_Set_Pin_Value+0x5c>
     b98:	8d 81       	ldd	r24, Y+5	; 0x05
     b9a:	9e 81       	ldd	r25, Y+6	; 0x06
     b9c:	00 97       	sbiw	r24, 0x00	; 0
     b9e:	71 f0       	breq	.+28     	; 0xbbc <DIO_U8_Set_Pin_Value+0x76>
     ba0:	bc c0       	rjmp	.+376    	; 0xd1a <DIO_U8_Set_Pin_Value+0x1d4>
     ba2:	2d 81       	ldd	r18, Y+5	; 0x05
     ba4:	3e 81       	ldd	r19, Y+6	; 0x06
     ba6:	22 30       	cpi	r18, 0x02	; 2
     ba8:	31 05       	cpc	r19, r1
     baa:	09 f4       	brne	.+2      	; 0xbae <DIO_U8_Set_Pin_Value+0x68>
     bac:	5f c0       	rjmp	.+190    	; 0xc6c <DIO_U8_Set_Pin_Value+0x126>
     bae:	8d 81       	ldd	r24, Y+5	; 0x05
     bb0:	9e 81       	ldd	r25, Y+6	; 0x06
     bb2:	83 30       	cpi	r24, 0x03	; 3
     bb4:	91 05       	cpc	r25, r1
     bb6:	09 f4       	brne	.+2      	; 0xbba <DIO_U8_Set_Pin_Value+0x74>
     bb8:	85 c0       	rjmp	.+266    	; 0xcc4 <DIO_U8_Set_Pin_Value+0x17e>
     bba:	af c0       	rjmp	.+350    	; 0xd1a <DIO_U8_Set_Pin_Value+0x1d4>
			case GROUP_A:
				Assign_Bit(DIO_U8_PORTA,Copy_U8_Pin_ID,Copy_U8_Pin_Val);
     bbc:	8b 81       	ldd	r24, Y+3	; 0x03
     bbe:	81 30       	cpi	r24, 0x01	; 1
     bc0:	a1 f4       	brne	.+40     	; 0xbea <DIO_U8_Set_Pin_Value+0xa4>
     bc2:	ab e3       	ldi	r26, 0x3B	; 59
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	eb e3       	ldi	r30, 0x3B	; 59
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	48 2f       	mov	r20, r24
     bce:	8a 81       	ldd	r24, Y+2	; 0x02
     bd0:	28 2f       	mov	r18, r24
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	02 2e       	mov	r0, r18
     bda:	02 c0       	rjmp	.+4      	; 0xbe0 <DIO_U8_Set_Pin_Value+0x9a>
     bdc:	88 0f       	add	r24, r24
     bde:	99 1f       	adc	r25, r25
     be0:	0a 94       	dec	r0
     be2:	e2 f7       	brpl	.-8      	; 0xbdc <DIO_U8_Set_Pin_Value+0x96>
     be4:	84 2b       	or	r24, r20
     be6:	8c 93       	st	X, r24
     be8:	98 c0       	rjmp	.+304    	; 0xd1a <DIO_U8_Set_Pin_Value+0x1d4>
     bea:	ab e3       	ldi	r26, 0x3B	; 59
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	eb e3       	ldi	r30, 0x3B	; 59
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	48 2f       	mov	r20, r24
     bf6:	8a 81       	ldd	r24, Y+2	; 0x02
     bf8:	28 2f       	mov	r18, r24
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	02 2e       	mov	r0, r18
     c02:	02 c0       	rjmp	.+4      	; 0xc08 <DIO_U8_Set_Pin_Value+0xc2>
     c04:	88 0f       	add	r24, r24
     c06:	99 1f       	adc	r25, r25
     c08:	0a 94       	dec	r0
     c0a:	e2 f7       	brpl	.-8      	; 0xc04 <DIO_U8_Set_Pin_Value+0xbe>
     c0c:	80 95       	com	r24
     c0e:	84 23       	and	r24, r20
     c10:	8c 93       	st	X, r24
     c12:	83 c0       	rjmp	.+262    	; 0xd1a <DIO_U8_Set_Pin_Value+0x1d4>
				break;
			case GROUP_B:
				Assign_Bit(DIO_U8_PORTB,Copy_U8_Pin_ID,Copy_U8_Pin_Val);
     c14:	8b 81       	ldd	r24, Y+3	; 0x03
     c16:	81 30       	cpi	r24, 0x01	; 1
     c18:	a1 f4       	brne	.+40     	; 0xc42 <DIO_U8_Set_Pin_Value+0xfc>
     c1a:	a8 e3       	ldi	r26, 0x38	; 56
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 e3       	ldi	r30, 0x38	; 56
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	48 2f       	mov	r20, r24
     c26:	8a 81       	ldd	r24, Y+2	; 0x02
     c28:	28 2f       	mov	r18, r24
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	02 2e       	mov	r0, r18
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <DIO_U8_Set_Pin_Value+0xf2>
     c34:	88 0f       	add	r24, r24
     c36:	99 1f       	adc	r25, r25
     c38:	0a 94       	dec	r0
     c3a:	e2 f7       	brpl	.-8      	; 0xc34 <DIO_U8_Set_Pin_Value+0xee>
     c3c:	84 2b       	or	r24, r20
     c3e:	8c 93       	st	X, r24
     c40:	6c c0       	rjmp	.+216    	; 0xd1a <DIO_U8_Set_Pin_Value+0x1d4>
     c42:	a8 e3       	ldi	r26, 0x38	; 56
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	e8 e3       	ldi	r30, 0x38	; 56
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	48 2f       	mov	r20, r24
     c4e:	8a 81       	ldd	r24, Y+2	; 0x02
     c50:	28 2f       	mov	r18, r24
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	02 2e       	mov	r0, r18
     c5a:	02 c0       	rjmp	.+4      	; 0xc60 <DIO_U8_Set_Pin_Value+0x11a>
     c5c:	88 0f       	add	r24, r24
     c5e:	99 1f       	adc	r25, r25
     c60:	0a 94       	dec	r0
     c62:	e2 f7       	brpl	.-8      	; 0xc5c <DIO_U8_Set_Pin_Value+0x116>
     c64:	80 95       	com	r24
     c66:	84 23       	and	r24, r20
     c68:	8c 93       	st	X, r24
     c6a:	57 c0       	rjmp	.+174    	; 0xd1a <DIO_U8_Set_Pin_Value+0x1d4>
				break;
			case GROUP_C:
				Assign_Bit(DIO_U8_PORTC,Copy_U8_Pin_ID,Copy_U8_Pin_Val);
     c6c:	8b 81       	ldd	r24, Y+3	; 0x03
     c6e:	81 30       	cpi	r24, 0x01	; 1
     c70:	a1 f4       	brne	.+40     	; 0xc9a <DIO_U8_Set_Pin_Value+0x154>
     c72:	a5 e3       	ldi	r26, 0x35	; 53
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	e5 e3       	ldi	r30, 0x35	; 53
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	48 2f       	mov	r20, r24
     c7e:	8a 81       	ldd	r24, Y+2	; 0x02
     c80:	28 2f       	mov	r18, r24
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	02 2e       	mov	r0, r18
     c8a:	02 c0       	rjmp	.+4      	; 0xc90 <DIO_U8_Set_Pin_Value+0x14a>
     c8c:	88 0f       	add	r24, r24
     c8e:	99 1f       	adc	r25, r25
     c90:	0a 94       	dec	r0
     c92:	e2 f7       	brpl	.-8      	; 0xc8c <DIO_U8_Set_Pin_Value+0x146>
     c94:	84 2b       	or	r24, r20
     c96:	8c 93       	st	X, r24
     c98:	40 c0       	rjmp	.+128    	; 0xd1a <DIO_U8_Set_Pin_Value+0x1d4>
     c9a:	a5 e3       	ldi	r26, 0x35	; 53
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e5 e3       	ldi	r30, 0x35	; 53
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	48 2f       	mov	r20, r24
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	28 2f       	mov	r18, r24
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	02 2e       	mov	r0, r18
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <DIO_U8_Set_Pin_Value+0x172>
     cb4:	88 0f       	add	r24, r24
     cb6:	99 1f       	adc	r25, r25
     cb8:	0a 94       	dec	r0
     cba:	e2 f7       	brpl	.-8      	; 0xcb4 <DIO_U8_Set_Pin_Value+0x16e>
     cbc:	80 95       	com	r24
     cbe:	84 23       	and	r24, r20
     cc0:	8c 93       	st	X, r24
     cc2:	2b c0       	rjmp	.+86     	; 0xd1a <DIO_U8_Set_Pin_Value+0x1d4>
				break;
			case GROUP_D:
				Assign_Bit(DIO_U8_PORTD,Copy_U8_Pin_ID,Copy_U8_Pin_Val);
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	a1 f4       	brne	.+40     	; 0xcf2 <DIO_U8_Set_Pin_Value+0x1ac>
     cca:	a2 e3       	ldi	r26, 0x32	; 50
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e2 e3       	ldi	r30, 0x32	; 50
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	48 2f       	mov	r20, r24
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	28 2f       	mov	r18, r24
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	02 2e       	mov	r0, r18
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <DIO_U8_Set_Pin_Value+0x1a2>
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	0a 94       	dec	r0
     cea:	e2 f7       	brpl	.-8      	; 0xce4 <DIO_U8_Set_Pin_Value+0x19e>
     cec:	84 2b       	or	r24, r20
     cee:	8c 93       	st	X, r24
     cf0:	14 c0       	rjmp	.+40     	; 0xd1a <DIO_U8_Set_Pin_Value+0x1d4>
     cf2:	a2 e3       	ldi	r26, 0x32	; 50
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e2 e3       	ldi	r30, 0x32	; 50
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	48 2f       	mov	r20, r24
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	28 2f       	mov	r18, r24
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	02 2e       	mov	r0, r18
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <DIO_U8_Set_Pin_Value+0x1ca>
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	0a 94       	dec	r0
     d12:	e2 f7       	brpl	.-8      	; 0xd0c <DIO_U8_Set_Pin_Value+0x1c6>
     d14:	80 95       	com	r24
     d16:	84 23       	and	r24, r20
     d18:	8c 93       	st	X, r24
		}
	}
	else{
		return INVALID_PIN_ID;
	}
	return Success;
     d1a:	1c 82       	std	Y+4, r1	; 0x04
     d1c:	05 c0       	rjmp	.+10     	; 0xd28 <DIO_U8_Set_Pin_Value+0x1e2>
				break;

			}
		}
		else{
			return INVALID_PIN_VALUE;
     d1e:	9a ef       	ldi	r25, 0xFA	; 250
     d20:	9c 83       	std	Y+4, r25	; 0x04
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <DIO_U8_Set_Pin_Value+0x1e2>
		}
	}
	else{
		return INVALID_PIN_ID;
     d24:	2f ef       	ldi	r18, 0xFF	; 255
     d26:	2c 83       	std	Y+4, r18	; 0x04
     d28:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	return Success;
}
     d2a:	26 96       	adiw	r28, 0x06	; 6
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	f8 94       	cli
     d30:	de bf       	out	0x3e, r29	; 62
     d32:	0f be       	out	0x3f, r0	; 63
     d34:	cd bf       	out	0x3d, r28	; 61
     d36:	cf 91       	pop	r28
     d38:	df 91       	pop	r29
     d3a:	08 95       	ret

00000d3c <DIO_U8_Get_Pin_Value>:


u8 DIO_U8_Get_Pin_Value(u8 Copy_U8_Port_ID, u8 Copy_U8_Pin_ID){
     d3c:	df 93       	push	r29
     d3e:	cf 93       	push	r28
     d40:	00 d0       	rcall	.+0      	; 0xd42 <DIO_U8_Get_Pin_Value+0x6>
     d42:	00 d0       	rcall	.+0      	; 0xd44 <DIO_U8_Get_Pin_Value+0x8>
     d44:	00 d0       	rcall	.+0      	; 0xd46 <DIO_U8_Get_Pin_Value+0xa>
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
     d4a:	8a 83       	std	Y+2, r24	; 0x02
     d4c:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value;
	if ((Copy_U8_Port_ID <= GROUP_D) && (Copy_U8_Port_ID >= GROUP_A)){
     d4e:	8a 81       	ldd	r24, Y+2	; 0x02
     d50:	84 30       	cpi	r24, 0x04	; 4
     d52:	08 f0       	brcs	.+2      	; 0xd56 <DIO_U8_Get_Pin_Value+0x1a>
     d54:	71 c0       	rjmp	.+226    	; 0xe38 <DIO_U8_Get_Pin_Value+0xfc>
		if((Copy_U8_Pin_ID >=PIN0) && (Copy_U8_Pin_ID <=PIN7) ){
     d56:	8b 81       	ldd	r24, Y+3	; 0x03
     d58:	88 30       	cpi	r24, 0x08	; 8
     d5a:	08 f0       	brcs	.+2      	; 0xd5e <DIO_U8_Get_Pin_Value+0x22>
     d5c:	6a c0       	rjmp	.+212    	; 0xe32 <DIO_U8_Get_Pin_Value+0xf6>
			switch(Copy_U8_Port_ID){
     d5e:	8a 81       	ldd	r24, Y+2	; 0x02
     d60:	28 2f       	mov	r18, r24
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	3e 83       	std	Y+6, r19	; 0x06
     d66:	2d 83       	std	Y+5, r18	; 0x05
     d68:	4d 81       	ldd	r20, Y+5	; 0x05
     d6a:	5e 81       	ldd	r21, Y+6	; 0x06
     d6c:	41 30       	cpi	r20, 0x01	; 1
     d6e:	51 05       	cpc	r21, r1
     d70:	41 f1       	breq	.+80     	; 0xdc2 <DIO_U8_Get_Pin_Value+0x86>
     d72:	8d 81       	ldd	r24, Y+5	; 0x05
     d74:	9e 81       	ldd	r25, Y+6	; 0x06
     d76:	82 30       	cpi	r24, 0x02	; 2
     d78:	91 05       	cpc	r25, r1
     d7a:	34 f4       	brge	.+12     	; 0xd88 <DIO_U8_Get_Pin_Value+0x4c>
     d7c:	2d 81       	ldd	r18, Y+5	; 0x05
     d7e:	3e 81       	ldd	r19, Y+6	; 0x06
     d80:	21 15       	cp	r18, r1
     d82:	31 05       	cpc	r19, r1
     d84:	61 f0       	breq	.+24     	; 0xd9e <DIO_U8_Get_Pin_Value+0x62>
     d86:	52 c0       	rjmp	.+164    	; 0xe2c <DIO_U8_Get_Pin_Value+0xf0>
     d88:	4d 81       	ldd	r20, Y+5	; 0x05
     d8a:	5e 81       	ldd	r21, Y+6	; 0x06
     d8c:	42 30       	cpi	r20, 0x02	; 2
     d8e:	51 05       	cpc	r21, r1
     d90:	51 f1       	breq	.+84     	; 0xde6 <DIO_U8_Get_Pin_Value+0xaa>
     d92:	8d 81       	ldd	r24, Y+5	; 0x05
     d94:	9e 81       	ldd	r25, Y+6	; 0x06
     d96:	83 30       	cpi	r24, 0x03	; 3
     d98:	91 05       	cpc	r25, r1
     d9a:	b9 f1       	breq	.+110    	; 0xe0a <DIO_U8_Get_Pin_Value+0xce>
     d9c:	47 c0       	rjmp	.+142    	; 0xe2c <DIO_U8_Get_Pin_Value+0xf0>
			case GROUP_A:
				pin_value = Get_Bit(DIO_U8_PINA,Copy_U8_Pin_ID);
     d9e:	e9 e3       	ldi	r30, 0x39	; 57
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	88 2f       	mov	r24, r24
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	a9 01       	movw	r20, r18
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <DIO_U8_Get_Pin_Value+0x7a>
     db2:	55 95       	asr	r21
     db4:	47 95       	ror	r20
     db6:	8a 95       	dec	r24
     db8:	e2 f7       	brpl	.-8      	; 0xdb2 <DIO_U8_Get_Pin_Value+0x76>
     dba:	ca 01       	movw	r24, r20
     dbc:	81 70       	andi	r24, 0x01	; 1
     dbe:	89 83       	std	Y+1, r24	; 0x01
     dc0:	35 c0       	rjmp	.+106    	; 0xe2c <DIO_U8_Get_Pin_Value+0xf0>
				break;
			case GROUP_B:
				pin_value = Get_Bit(DIO_U8_PINB,Copy_U8_Pin_ID);
     dc2:	e6 e3       	ldi	r30, 0x36	; 54
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
     dce:	88 2f       	mov	r24, r24
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	a9 01       	movw	r20, r18
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <DIO_U8_Get_Pin_Value+0x9e>
     dd6:	55 95       	asr	r21
     dd8:	47 95       	ror	r20
     dda:	8a 95       	dec	r24
     ddc:	e2 f7       	brpl	.-8      	; 0xdd6 <DIO_U8_Get_Pin_Value+0x9a>
     dde:	ca 01       	movw	r24, r20
     de0:	81 70       	andi	r24, 0x01	; 1
     de2:	89 83       	std	Y+1, r24	; 0x01
     de4:	23 c0       	rjmp	.+70     	; 0xe2c <DIO_U8_Get_Pin_Value+0xf0>
				break;
			case GROUP_C:
				pin_value = Get_Bit(DIO_U8_PINC,Copy_U8_Pin_ID);
     de6:	e3 e3       	ldi	r30, 0x33	; 51
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	8b 81       	ldd	r24, Y+3	; 0x03
     df2:	88 2f       	mov	r24, r24
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	a9 01       	movw	r20, r18
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <DIO_U8_Get_Pin_Value+0xc2>
     dfa:	55 95       	asr	r21
     dfc:	47 95       	ror	r20
     dfe:	8a 95       	dec	r24
     e00:	e2 f7       	brpl	.-8      	; 0xdfa <DIO_U8_Get_Pin_Value+0xbe>
     e02:	ca 01       	movw	r24, r20
     e04:	81 70       	andi	r24, 0x01	; 1
     e06:	89 83       	std	Y+1, r24	; 0x01
     e08:	11 c0       	rjmp	.+34     	; 0xe2c <DIO_U8_Get_Pin_Value+0xf0>
				break;
			case GROUP_D:
				pin_value = Get_Bit(DIO_U8_PIND,Copy_U8_Pin_ID);
     e0a:	e0 e3       	ldi	r30, 0x30	; 48
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	28 2f       	mov	r18, r24
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	88 2f       	mov	r24, r24
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	a9 01       	movw	r20, r18
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <DIO_U8_Get_Pin_Value+0xe6>
     e1e:	55 95       	asr	r21
     e20:	47 95       	ror	r20
     e22:	8a 95       	dec	r24
     e24:	e2 f7       	brpl	.-8      	; 0xe1e <DIO_U8_Get_Pin_Value+0xe2>
     e26:	ca 01       	movw	r24, r20
     e28:	81 70       	andi	r24, 0x01	; 1
     e2a:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	else{
		return INVALID_PORT_ID;
	}
	return pin_value;
     e2c:	59 81       	ldd	r21, Y+1	; 0x01
     e2e:	5c 83       	std	Y+4, r21	; 0x04
     e30:	05 c0       	rjmp	.+10     	; 0xe3c <DIO_U8_Get_Pin_Value+0x100>
				pin_value = Get_Bit(DIO_U8_PIND,Copy_U8_Pin_ID);
				break;
			}
		}
		else{
			return INVALID_PIN_ID;
     e32:	8f ef       	ldi	r24, 0xFF	; 255
     e34:	8c 83       	std	Y+4, r24	; 0x04
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_U8_Get_Pin_Value+0x100>
		}
	}
	else{
		return INVALID_PORT_ID;
     e38:	95 ef       	ldi	r25, 0xF5	; 245
     e3a:	9c 83       	std	Y+4, r25	; 0x04
     e3c:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	return pin_value;
}
     e3e:	26 96       	adiw	r28, 0x06	; 6
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	f8 94       	cli
     e44:	de bf       	out	0x3e, r29	; 62
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	cd bf       	out	0x3d, r28	; 61
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <DIO_U8_Set_Pin_Direction>:

u8 DIO_U8_Set_Pin_Direction(u8 Copy_U8_Port_ID, u8 Copy_U8_Pin_ID, u8 Copy_U8_Pin_Dir){
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	00 d0       	rcall	.+0      	; 0xe56 <DIO_U8_Set_Pin_Direction+0x6>
     e56:	00 d0       	rcall	.+0      	; 0xe58 <DIO_U8_Set_Pin_Direction+0x8>
     e58:	00 d0       	rcall	.+0      	; 0xe5a <DIO_U8_Set_Pin_Direction+0xa>
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	89 83       	std	Y+1, r24	; 0x01
     e60:	6a 83       	std	Y+2, r22	; 0x02
     e62:	4b 83       	std	Y+3, r20	; 0x03
	if( (Copy_U8_Port_ID <= GROUP_D) && (Copy_U8_Port_ID >= GROUP_A)){
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	08 f0       	brcs	.+2      	; 0xe6c <DIO_U8_Set_Pin_Direction+0x1c>
     e6a:	da c0       	rjmp	.+436    	; 0x1020 <DIO_U8_Set_Pin_Direction+0x1d0>
		if((Copy_U8_Pin_ID >=PIN0) && (Copy_U8_Pin_ID <=PIN7)){
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	88 30       	cpi	r24, 0x08	; 8
     e70:	08 f0       	brcs	.+2      	; 0xe74 <DIO_U8_Set_Pin_Direction+0x24>
     e72:	d3 c0       	rjmp	.+422    	; 0x101a <DIO_U8_Set_Pin_Direction+0x1ca>
			switch (Copy_U8_Port_ID){
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	3e 83       	std	Y+6, r19	; 0x06
     e7c:	2d 83       	std	Y+5, r18	; 0x05
     e7e:	8d 81       	ldd	r24, Y+5	; 0x05
     e80:	9e 81       	ldd	r25, Y+6	; 0x06
     e82:	81 30       	cpi	r24, 0x01	; 1
     e84:	91 05       	cpc	r25, r1
     e86:	09 f4       	brne	.+2      	; 0xe8a <DIO_U8_Set_Pin_Direction+0x3a>
     e88:	43 c0       	rjmp	.+134    	; 0xf10 <DIO_U8_Set_Pin_Direction+0xc0>
     e8a:	2d 81       	ldd	r18, Y+5	; 0x05
     e8c:	3e 81       	ldd	r19, Y+6	; 0x06
     e8e:	22 30       	cpi	r18, 0x02	; 2
     e90:	31 05       	cpc	r19, r1
     e92:	2c f4       	brge	.+10     	; 0xe9e <DIO_U8_Set_Pin_Direction+0x4e>
     e94:	8d 81       	ldd	r24, Y+5	; 0x05
     e96:	9e 81       	ldd	r25, Y+6	; 0x06
     e98:	00 97       	sbiw	r24, 0x00	; 0
     e9a:	71 f0       	breq	.+28     	; 0xeb8 <DIO_U8_Set_Pin_Direction+0x68>
     e9c:	bc c0       	rjmp	.+376    	; 0x1016 <DIO_U8_Set_Pin_Direction+0x1c6>
     e9e:	2d 81       	ldd	r18, Y+5	; 0x05
     ea0:	3e 81       	ldd	r19, Y+6	; 0x06
     ea2:	22 30       	cpi	r18, 0x02	; 2
     ea4:	31 05       	cpc	r19, r1
     ea6:	09 f4       	brne	.+2      	; 0xeaa <DIO_U8_Set_Pin_Direction+0x5a>
     ea8:	5f c0       	rjmp	.+190    	; 0xf68 <DIO_U8_Set_Pin_Direction+0x118>
     eaa:	8d 81       	ldd	r24, Y+5	; 0x05
     eac:	9e 81       	ldd	r25, Y+6	; 0x06
     eae:	83 30       	cpi	r24, 0x03	; 3
     eb0:	91 05       	cpc	r25, r1
     eb2:	09 f4       	brne	.+2      	; 0xeb6 <DIO_U8_Set_Pin_Direction+0x66>
     eb4:	85 c0       	rjmp	.+266    	; 0xfc0 <DIO_U8_Set_Pin_Direction+0x170>
     eb6:	af c0       	rjmp	.+350    	; 0x1016 <DIO_U8_Set_Pin_Direction+0x1c6>
			case GROUP_A:
				Assign_Bit(DIO_U8_DDRA,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	81 30       	cpi	r24, 0x01	; 1
     ebc:	a1 f4       	brne	.+40     	; 0xee6 <DIO_U8_Set_Pin_Direction+0x96>
     ebe:	aa e3       	ldi	r26, 0x3A	; 58
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	ea e3       	ldi	r30, 0x3A	; 58
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	48 2f       	mov	r20, r24
     eca:	8a 81       	ldd	r24, Y+2	; 0x02
     ecc:	28 2f       	mov	r18, r24
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	02 2e       	mov	r0, r18
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <DIO_U8_Set_Pin_Direction+0x8c>
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	0a 94       	dec	r0
     ede:	e2 f7       	brpl	.-8      	; 0xed8 <DIO_U8_Set_Pin_Direction+0x88>
     ee0:	84 2b       	or	r24, r20
     ee2:	8c 93       	st	X, r24
     ee4:	98 c0       	rjmp	.+304    	; 0x1016 <DIO_U8_Set_Pin_Direction+0x1c6>
     ee6:	aa e3       	ldi	r26, 0x3A	; 58
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	ea e3       	ldi	r30, 0x3A	; 58
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	48 2f       	mov	r20, r24
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	02 2e       	mov	r0, r18
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <DIO_U8_Set_Pin_Direction+0xb4>
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	0a 94       	dec	r0
     f06:	e2 f7       	brpl	.-8      	; 0xf00 <DIO_U8_Set_Pin_Direction+0xb0>
     f08:	80 95       	com	r24
     f0a:	84 23       	and	r24, r20
     f0c:	8c 93       	st	X, r24
     f0e:	83 c0       	rjmp	.+262    	; 0x1016 <DIO_U8_Set_Pin_Direction+0x1c6>
				break;
			case GROUP_B:
				Assign_Bit(DIO_U8_DDRB,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	81 30       	cpi	r24, 0x01	; 1
     f14:	a1 f4       	brne	.+40     	; 0xf3e <DIO_U8_Set_Pin_Direction+0xee>
     f16:	a7 e3       	ldi	r26, 0x37	; 55
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e7 e3       	ldi	r30, 0x37	; 55
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO_U8_Set_Pin_Direction+0xe4>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO_U8_Set_Pin_Direction+0xe0>
     f38:	84 2b       	or	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	6c c0       	rjmp	.+216    	; 0x1016 <DIO_U8_Set_Pin_Direction+0x1c6>
     f3e:	a7 e3       	ldi	r26, 0x37	; 55
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e7 e3       	ldi	r30, 0x37	; 55
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 2e       	mov	r0, r18
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <DIO_U8_Set_Pin_Direction+0x10c>
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	0a 94       	dec	r0
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <DIO_U8_Set_Pin_Direction+0x108>
     f60:	80 95       	com	r24
     f62:	84 23       	and	r24, r20
     f64:	8c 93       	st	X, r24
     f66:	57 c0       	rjmp	.+174    	; 0x1016 <DIO_U8_Set_Pin_Direction+0x1c6>
				break;
			case GROUP_C:
				Assign_Bit(DIO_U8_DDRC,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	81 30       	cpi	r24, 0x01	; 1
     f6c:	a1 f4       	brne	.+40     	; 0xf96 <DIO_U8_Set_Pin_Direction+0x146>
     f6e:	a4 e3       	ldi	r26, 0x34	; 52
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e4 e3       	ldi	r30, 0x34	; 52
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 2e       	mov	r0, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <DIO_U8_Set_Pin_Direction+0x13c>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <DIO_U8_Set_Pin_Direction+0x138>
     f90:	84 2b       	or	r24, r20
     f92:	8c 93       	st	X, r24
     f94:	40 c0       	rjmp	.+128    	; 0x1016 <DIO_U8_Set_Pin_Direction+0x1c6>
     f96:	a4 e3       	ldi	r26, 0x34	; 52
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e4 e3       	ldi	r30, 0x34	; 52
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	48 2f       	mov	r20, r24
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 2e       	mov	r0, r18
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <DIO_U8_Set_Pin_Direction+0x164>
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	0a 94       	dec	r0
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <DIO_U8_Set_Pin_Direction+0x160>
     fb8:	80 95       	com	r24
     fba:	84 23       	and	r24, r20
     fbc:	8c 93       	st	X, r24
     fbe:	2b c0       	rjmp	.+86     	; 0x1016 <DIO_U8_Set_Pin_Direction+0x1c6>
				break;
			case GROUP_D:
				Assign_Bit(DIO_U8_DDRD,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	81 30       	cpi	r24, 0x01	; 1
     fc4:	a1 f4       	brne	.+40     	; 0xfee <DIO_U8_Set_Pin_Direction+0x19e>
     fc6:	a1 e3       	ldi	r26, 0x31	; 49
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e1 e3       	ldi	r30, 0x31	; 49
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	48 2f       	mov	r20, r24
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	02 2e       	mov	r0, r18
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <DIO_U8_Set_Pin_Direction+0x194>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	0a 94       	dec	r0
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <DIO_U8_Set_Pin_Direction+0x190>
     fe8:	84 2b       	or	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	14 c0       	rjmp	.+40     	; 0x1016 <DIO_U8_Set_Pin_Direction+0x1c6>
     fee:	a1 e3       	ldi	r26, 0x31	; 49
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e1 e3       	ldi	r30, 0x31	; 49
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	48 2f       	mov	r20, r24
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	02 2e       	mov	r0, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <DIO_U8_Set_Pin_Direction+0x1bc>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	0a 94       	dec	r0
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <DIO_U8_Set_Pin_Direction+0x1b8>
    1010:	80 95       	com	r24
    1012:	84 23       	and	r24, r20
    1014:	8c 93       	st	X, r24

	}
	else{
		return INVALID_PORT_ID;
	}
	return Success;
    1016:	1c 82       	std	Y+4, r1	; 0x04
    1018:	05 c0       	rjmp	.+10     	; 0x1024 <DIO_U8_Set_Pin_Direction+0x1d4>
				Assign_Bit(DIO_U8_DDRD,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
				break;
			}
		}
		else{
			return INVALID_PIN_ID;
    101a:	9f ef       	ldi	r25, 0xFF	; 255
    101c:	9c 83       	std	Y+4, r25	; 0x04
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <DIO_U8_Set_Pin_Direction+0x1d4>
		}

	}
	else{
		return INVALID_PORT_ID;
    1020:	25 ef       	ldi	r18, 0xF5	; 245
    1022:	2c 83       	std	Y+4, r18	; 0x04
    1024:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	return Success;

}
    1026:	26 96       	adiw	r28, 0x06	; 6
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	f8 94       	cli
    102c:	de bf       	out	0x3e, r29	; 62
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	cd bf       	out	0x3d, r28	; 61
    1032:	cf 91       	pop	r28
    1034:	df 91       	pop	r29
    1036:	08 95       	ret

00001038 <DIO_U8_Set_Port_Direction>:

u8 DIO_U8_Set_Port_Direction(u8 Copy_U8_Port_ID,u8 Copy_U8_Port_Dir){
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	00 d0       	rcall	.+0      	; 0x103e <DIO_U8_Set_Port_Direction+0x6>
    103e:	00 d0       	rcall	.+0      	; 0x1040 <DIO_U8_Set_Port_Direction+0x8>
    1040:	0f 92       	push	r0
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	89 83       	std	Y+1, r24	; 0x01
    1048:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_U8_Port_ID <= GROUP_D) && (Copy_U8_Port_ID >= GROUP_A)){
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	84 30       	cpi	r24, 0x04	; 4
    104e:	a0 f5       	brcc	.+104    	; 0x10b8 <DIO_U8_Set_Port_Direction+0x80>
		switch(Copy_U8_Port_ID){
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	3d 83       	std	Y+5, r19	; 0x05
    1058:	2c 83       	std	Y+4, r18	; 0x04
    105a:	8c 81       	ldd	r24, Y+4	; 0x04
    105c:	9d 81       	ldd	r25, Y+5	; 0x05
    105e:	81 30       	cpi	r24, 0x01	; 1
    1060:	91 05       	cpc	r25, r1
    1062:	d1 f0       	breq	.+52     	; 0x1098 <DIO_U8_Set_Port_Direction+0x60>
    1064:	2c 81       	ldd	r18, Y+4	; 0x04
    1066:	3d 81       	ldd	r19, Y+5	; 0x05
    1068:	22 30       	cpi	r18, 0x02	; 2
    106a:	31 05       	cpc	r19, r1
    106c:	2c f4       	brge	.+10     	; 0x1078 <DIO_U8_Set_Port_Direction+0x40>
    106e:	8c 81       	ldd	r24, Y+4	; 0x04
    1070:	9d 81       	ldd	r25, Y+5	; 0x05
    1072:	00 97       	sbiw	r24, 0x00	; 0
    1074:	61 f0       	breq	.+24     	; 0x108e <DIO_U8_Set_Port_Direction+0x56>
    1076:	1e c0       	rjmp	.+60     	; 0x10b4 <DIO_U8_Set_Port_Direction+0x7c>
    1078:	2c 81       	ldd	r18, Y+4	; 0x04
    107a:	3d 81       	ldd	r19, Y+5	; 0x05
    107c:	22 30       	cpi	r18, 0x02	; 2
    107e:	31 05       	cpc	r19, r1
    1080:	81 f0       	breq	.+32     	; 0x10a2 <DIO_U8_Set_Port_Direction+0x6a>
    1082:	8c 81       	ldd	r24, Y+4	; 0x04
    1084:	9d 81       	ldd	r25, Y+5	; 0x05
    1086:	83 30       	cpi	r24, 0x03	; 3
    1088:	91 05       	cpc	r25, r1
    108a:	81 f0       	breq	.+32     	; 0x10ac <DIO_U8_Set_Port_Direction+0x74>
    108c:	13 c0       	rjmp	.+38     	; 0x10b4 <DIO_U8_Set_Port_Direction+0x7c>
		case GROUP_A:
			DIO_U8_DDRA = Copy_U8_Port_Dir;
    108e:	ea e3       	ldi	r30, 0x3A	; 58
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	80 83       	st	Z, r24
    1096:	0e c0       	rjmp	.+28     	; 0x10b4 <DIO_U8_Set_Port_Direction+0x7c>
			break;
		case GROUP_B:
			DIO_U8_DDRB = Copy_U8_Port_Dir;
    1098:	e7 e3       	ldi	r30, 0x37	; 55
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	80 83       	st	Z, r24
    10a0:	09 c0       	rjmp	.+18     	; 0x10b4 <DIO_U8_Set_Port_Direction+0x7c>
			break;
		case GROUP_C:
			DIO_U8_DDRC = Copy_U8_Port_Dir;
    10a2:	e4 e3       	ldi	r30, 0x34	; 52
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	80 83       	st	Z, r24
    10aa:	04 c0       	rjmp	.+8      	; 0x10b4 <DIO_U8_Set_Port_Direction+0x7c>
			break;
		case GROUP_D:
			DIO_U8_DDRD = Copy_U8_Port_Dir;
    10ac:	e1 e3       	ldi	r30, 0x31	; 49
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	80 83       	st	Z, r24
		}
	}
	else{
		return INVALID_PORT_ID;
	}
	return Success;
    10b4:	1b 82       	std	Y+3, r1	; 0x03
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <DIO_U8_Set_Port_Direction+0x84>
			DIO_U8_DDRD = Copy_U8_Port_Dir;
			break;
		}
	}
	else{
		return INVALID_PORT_ID;
    10b8:	95 ef       	ldi	r25, 0xF5	; 245
    10ba:	9b 83       	std	Y+3, r25	; 0x03
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	return Success;
}
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	cf 91       	pop	r28
    10ca:	df 91       	pop	r29
    10cc:	08 95       	ret

000010ce <DIO_U8_Set_Port_Value>:

u8 DIO_U8_Set_Port_Value(u8 Copy_U8_Port_ID,u8 Copy_U8_Port_Value){   //lw 3aiz a4t8al 3la al value bta3t al port kolo;
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	00 d0       	rcall	.+0      	; 0x10d4 <DIO_U8_Set_Port_Value+0x6>
    10d4:	00 d0       	rcall	.+0      	; 0x10d6 <DIO_U8_Set_Port_Value+0x8>
    10d6:	0f 92       	push	r0
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	89 83       	std	Y+1, r24	; 0x01
    10de:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_U8_Port_ID <= GROUP_D) && (Copy_U8_Port_ID >= GROUP_A)){
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	84 30       	cpi	r24, 0x04	; 4
    10e4:	a0 f5       	brcc	.+104    	; 0x114e <DIO_U8_Set_Port_Value+0x80>
		switch(Copy_U8_Port_ID){
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	3d 83       	std	Y+5, r19	; 0x05
    10ee:	2c 83       	std	Y+4, r18	; 0x04
    10f0:	8c 81       	ldd	r24, Y+4	; 0x04
    10f2:	9d 81       	ldd	r25, Y+5	; 0x05
    10f4:	81 30       	cpi	r24, 0x01	; 1
    10f6:	91 05       	cpc	r25, r1
    10f8:	d1 f0       	breq	.+52     	; 0x112e <DIO_U8_Set_Port_Value+0x60>
    10fa:	2c 81       	ldd	r18, Y+4	; 0x04
    10fc:	3d 81       	ldd	r19, Y+5	; 0x05
    10fe:	22 30       	cpi	r18, 0x02	; 2
    1100:	31 05       	cpc	r19, r1
    1102:	2c f4       	brge	.+10     	; 0x110e <DIO_U8_Set_Port_Value+0x40>
    1104:	8c 81       	ldd	r24, Y+4	; 0x04
    1106:	9d 81       	ldd	r25, Y+5	; 0x05
    1108:	00 97       	sbiw	r24, 0x00	; 0
    110a:	61 f0       	breq	.+24     	; 0x1124 <DIO_U8_Set_Port_Value+0x56>
    110c:	1e c0       	rjmp	.+60     	; 0x114a <DIO_U8_Set_Port_Value+0x7c>
    110e:	2c 81       	ldd	r18, Y+4	; 0x04
    1110:	3d 81       	ldd	r19, Y+5	; 0x05
    1112:	22 30       	cpi	r18, 0x02	; 2
    1114:	31 05       	cpc	r19, r1
    1116:	81 f0       	breq	.+32     	; 0x1138 <DIO_U8_Set_Port_Value+0x6a>
    1118:	8c 81       	ldd	r24, Y+4	; 0x04
    111a:	9d 81       	ldd	r25, Y+5	; 0x05
    111c:	83 30       	cpi	r24, 0x03	; 3
    111e:	91 05       	cpc	r25, r1
    1120:	81 f0       	breq	.+32     	; 0x1142 <DIO_U8_Set_Port_Value+0x74>
    1122:	13 c0       	rjmp	.+38     	; 0x114a <DIO_U8_Set_Port_Value+0x7c>
		case GROUP_A:
			DIO_U8_PORTA = Copy_U8_Port_Value;
    1124:	eb e3       	ldi	r30, 0x3B	; 59
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	80 83       	st	Z, r24
    112c:	0e c0       	rjmp	.+28     	; 0x114a <DIO_U8_Set_Port_Value+0x7c>
			break;
		case GROUP_B:
			DIO_U8_PORTB = Copy_U8_Port_Value;
    112e:	e8 e3       	ldi	r30, 0x38	; 56
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	80 83       	st	Z, r24
    1136:	09 c0       	rjmp	.+18     	; 0x114a <DIO_U8_Set_Port_Value+0x7c>
			break;
		case GROUP_C:
			DIO_U8_PORTC = Copy_U8_Port_Value;
    1138:	e5 e3       	ldi	r30, 0x35	; 53
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	80 83       	st	Z, r24
    1140:	04 c0       	rjmp	.+8      	; 0x114a <DIO_U8_Set_Port_Value+0x7c>
			break;
		case GROUP_D:
			DIO_U8_PORTD = Copy_U8_Port_Value;
    1142:	e2 e3       	ldi	r30, 0x32	; 50
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	80 83       	st	Z, r24
	}
	else{
		return INVALID_PORT_ID;
	}

	return Success;
    114a:	1b 82       	std	Y+3, r1	; 0x03
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <DIO_U8_Set_Port_Value+0x84>
			DIO_U8_PORTD = Copy_U8_Port_Value;
			break;
		}
	}
	else{
		return INVALID_PORT_ID;
    114e:	95 ef       	ldi	r25, 0xF5	; 245
    1150:	9b 83       	std	Y+3, r25	; 0x03
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
	}

	return Success;
}
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	08 95       	ret

00001164 <DIO_U8_Get_Pin_Direction>:

u8 DIO_U8_Get_Pin_Direction(u8 Copy_U8_Port_ID, u8 Copy_U8_Pin_ID ){
    1164:	df 93       	push	r29
    1166:	cf 93       	push	r28
    1168:	00 d0       	rcall	.+0      	; 0x116a <DIO_U8_Get_Pin_Direction+0x6>
    116a:	00 d0       	rcall	.+0      	; 0x116c <DIO_U8_Get_Pin_Direction+0x8>
    116c:	00 d0       	rcall	.+0      	; 0x116e <DIO_U8_Get_Pin_Direction+0xa>
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	8a 83       	std	Y+2, r24	; 0x02
    1174:	6b 83       	std	Y+3, r22	; 0x03
	u8 Pin_direction;

	if ((Copy_U8_Port_ID <= GROUP_D) && (Copy_U8_Port_ID >= GROUP_A)){
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	84 30       	cpi	r24, 0x04	; 4
    117a:	08 f0       	brcs	.+2      	; 0x117e <DIO_U8_Get_Pin_Direction+0x1a>
    117c:	6a c0       	rjmp	.+212    	; 0x1252 <DIO_U8_Get_Pin_Direction+0xee>
		switch(Copy_U8_Port_ID){
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	3e 83       	std	Y+6, r19	; 0x06
    1186:	2d 83       	std	Y+5, r18	; 0x05
    1188:	4d 81       	ldd	r20, Y+5	; 0x05
    118a:	5e 81       	ldd	r21, Y+6	; 0x06
    118c:	41 30       	cpi	r20, 0x01	; 1
    118e:	51 05       	cpc	r21, r1
    1190:	41 f1       	breq	.+80     	; 0x11e2 <DIO_U8_Get_Pin_Direction+0x7e>
    1192:	8d 81       	ldd	r24, Y+5	; 0x05
    1194:	9e 81       	ldd	r25, Y+6	; 0x06
    1196:	82 30       	cpi	r24, 0x02	; 2
    1198:	91 05       	cpc	r25, r1
    119a:	34 f4       	brge	.+12     	; 0x11a8 <DIO_U8_Get_Pin_Direction+0x44>
    119c:	2d 81       	ldd	r18, Y+5	; 0x05
    119e:	3e 81       	ldd	r19, Y+6	; 0x06
    11a0:	21 15       	cp	r18, r1
    11a2:	31 05       	cpc	r19, r1
    11a4:	61 f0       	breq	.+24     	; 0x11be <DIO_U8_Get_Pin_Direction+0x5a>
    11a6:	52 c0       	rjmp	.+164    	; 0x124c <DIO_U8_Get_Pin_Direction+0xe8>
    11a8:	4d 81       	ldd	r20, Y+5	; 0x05
    11aa:	5e 81       	ldd	r21, Y+6	; 0x06
    11ac:	42 30       	cpi	r20, 0x02	; 2
    11ae:	51 05       	cpc	r21, r1
    11b0:	51 f1       	breq	.+84     	; 0x1206 <DIO_U8_Get_Pin_Direction+0xa2>
    11b2:	8d 81       	ldd	r24, Y+5	; 0x05
    11b4:	9e 81       	ldd	r25, Y+6	; 0x06
    11b6:	83 30       	cpi	r24, 0x03	; 3
    11b8:	91 05       	cpc	r25, r1
    11ba:	b9 f1       	breq	.+110    	; 0x122a <DIO_U8_Get_Pin_Direction+0xc6>
    11bc:	47 c0       	rjmp	.+142    	; 0x124c <DIO_U8_Get_Pin_Direction+0xe8>
		case GROUP_A:
			Pin_direction = Get_Bit(DIO_U8_DDRA,Copy_U8_Pin_ID);
    11be:	ea e3       	ldi	r30, 0x3A	; 58
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	88 2f       	mov	r24, r24
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	a9 01       	movw	r20, r18
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <DIO_U8_Get_Pin_Direction+0x72>
    11d2:	55 95       	asr	r21
    11d4:	47 95       	ror	r20
    11d6:	8a 95       	dec	r24
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <DIO_U8_Get_Pin_Direction+0x6e>
    11da:	ca 01       	movw	r24, r20
    11dc:	81 70       	andi	r24, 0x01	; 1
    11de:	89 83       	std	Y+1, r24	; 0x01
    11e0:	35 c0       	rjmp	.+106    	; 0x124c <DIO_U8_Get_Pin_Direction+0xe8>
			break;
		case GROUP_B:
			Pin_direction = Get_Bit(DIO_U8_DDRB,Copy_U8_Pin_ID);
    11e2:	e7 e3       	ldi	r30, 0x37	; 55
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	88 2f       	mov	r24, r24
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	a9 01       	movw	r20, r18
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <DIO_U8_Get_Pin_Direction+0x96>
    11f6:	55 95       	asr	r21
    11f8:	47 95       	ror	r20
    11fa:	8a 95       	dec	r24
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <DIO_U8_Get_Pin_Direction+0x92>
    11fe:	ca 01       	movw	r24, r20
    1200:	81 70       	andi	r24, 0x01	; 1
    1202:	89 83       	std	Y+1, r24	; 0x01
    1204:	23 c0       	rjmp	.+70     	; 0x124c <DIO_U8_Get_Pin_Direction+0xe8>
			break;
		case GROUP_C:
			Pin_direction = Get_Bit(DIO_U8_DDRC,Copy_U8_Pin_ID);
    1206:	e4 e3       	ldi	r30, 0x34	; 52
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	88 2f       	mov	r24, r24
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	a9 01       	movw	r20, r18
    1218:	02 c0       	rjmp	.+4      	; 0x121e <DIO_U8_Get_Pin_Direction+0xba>
    121a:	55 95       	asr	r21
    121c:	47 95       	ror	r20
    121e:	8a 95       	dec	r24
    1220:	e2 f7       	brpl	.-8      	; 0x121a <DIO_U8_Get_Pin_Direction+0xb6>
    1222:	ca 01       	movw	r24, r20
    1224:	81 70       	andi	r24, 0x01	; 1
    1226:	89 83       	std	Y+1, r24	; 0x01
    1228:	11 c0       	rjmp	.+34     	; 0x124c <DIO_U8_Get_Pin_Direction+0xe8>
			break;
		case GROUP_D:
			Pin_direction = Get_Bit(DIO_U8_DDRD,Copy_U8_Pin_ID);
    122a:	e1 e3       	ldi	r30, 0x31	; 49
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	88 2f       	mov	r24, r24
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	a9 01       	movw	r20, r18
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <DIO_U8_Get_Pin_Direction+0xde>
    123e:	55 95       	asr	r21
    1240:	47 95       	ror	r20
    1242:	8a 95       	dec	r24
    1244:	e2 f7       	brpl	.-8      	; 0x123e <DIO_U8_Get_Pin_Direction+0xda>
    1246:	ca 01       	movw	r24, r20
    1248:	81 70       	andi	r24, 0x01	; 1
    124a:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	else{
		return INVALID_PORT_ID;
	}
	return Pin_direction;
    124c:	59 81       	ldd	r21, Y+1	; 0x01
    124e:	5c 83       	std	Y+4, r21	; 0x04
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <DIO_U8_Get_Pin_Direction+0xf2>
			Pin_direction = Get_Bit(DIO_U8_DDRD,Copy_U8_Pin_ID);
			break;
		}
	}
	else{
		return INVALID_PORT_ID;
    1252:	85 ef       	ldi	r24, 0xF5	; 245
    1254:	8c 83       	std	Y+4, r24	; 0x04
    1256:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	return Pin_direction;
}
    1258:	26 96       	adiw	r28, 0x06	; 6
    125a:	0f b6       	in	r0, 0x3f	; 63
    125c:	f8 94       	cli
    125e:	de bf       	out	0x3e, r29	; 62
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	cd bf       	out	0x3d, r28	; 61
    1264:	cf 91       	pop	r28
    1266:	df 91       	pop	r29
    1268:	08 95       	ret

0000126a <DIO_U8_Get_Port_Direction>:

u8 DIO_U8_Get_Port_Direction(u8 Copy_U8_Port_ID){
    126a:	df 93       	push	r29
    126c:	cf 93       	push	r28
    126e:	00 d0       	rcall	.+0      	; 0x1270 <DIO_U8_Get_Port_Direction+0x6>
    1270:	00 d0       	rcall	.+0      	; 0x1272 <DIO_U8_Get_Port_Direction+0x8>
    1272:	0f 92       	push	r0
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	8a 83       	std	Y+2, r24	; 0x02
	u8 port_direction;
	if((Copy_U8_Port_ID <= GROUP_D) && (Copy_U8_Port_ID >= GROUP_A)){
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	84 30       	cpi	r24, 0x04	; 4
    127e:	a8 f5       	brcc	.+106    	; 0x12ea <DIO_U8_Get_Port_Direction+0x80>
		switch(Copy_U8_Port_ID){
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	3d 83       	std	Y+5, r19	; 0x05
    1288:	2c 83       	std	Y+4, r18	; 0x04
    128a:	8c 81       	ldd	r24, Y+4	; 0x04
    128c:	9d 81       	ldd	r25, Y+5	; 0x05
    128e:	81 30       	cpi	r24, 0x01	; 1
    1290:	91 05       	cpc	r25, r1
    1292:	d1 f0       	breq	.+52     	; 0x12c8 <DIO_U8_Get_Port_Direction+0x5e>
    1294:	2c 81       	ldd	r18, Y+4	; 0x04
    1296:	3d 81       	ldd	r19, Y+5	; 0x05
    1298:	22 30       	cpi	r18, 0x02	; 2
    129a:	31 05       	cpc	r19, r1
    129c:	2c f4       	brge	.+10     	; 0x12a8 <DIO_U8_Get_Port_Direction+0x3e>
    129e:	8c 81       	ldd	r24, Y+4	; 0x04
    12a0:	9d 81       	ldd	r25, Y+5	; 0x05
    12a2:	00 97       	sbiw	r24, 0x00	; 0
    12a4:	61 f0       	breq	.+24     	; 0x12be <DIO_U8_Get_Port_Direction+0x54>
    12a6:	1e c0       	rjmp	.+60     	; 0x12e4 <DIO_U8_Get_Port_Direction+0x7a>
    12a8:	2c 81       	ldd	r18, Y+4	; 0x04
    12aa:	3d 81       	ldd	r19, Y+5	; 0x05
    12ac:	22 30       	cpi	r18, 0x02	; 2
    12ae:	31 05       	cpc	r19, r1
    12b0:	81 f0       	breq	.+32     	; 0x12d2 <DIO_U8_Get_Port_Direction+0x68>
    12b2:	8c 81       	ldd	r24, Y+4	; 0x04
    12b4:	9d 81       	ldd	r25, Y+5	; 0x05
    12b6:	83 30       	cpi	r24, 0x03	; 3
    12b8:	91 05       	cpc	r25, r1
    12ba:	81 f0       	breq	.+32     	; 0x12dc <DIO_U8_Get_Port_Direction+0x72>
    12bc:	13 c0       	rjmp	.+38     	; 0x12e4 <DIO_U8_Get_Port_Direction+0x7a>
		case GROUP_A:
			port_direction = DIO_U8_DDRA;
    12be:	ea e3       	ldi	r30, 0x3A	; 58
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	89 83       	std	Y+1, r24	; 0x01
    12c6:	0e c0       	rjmp	.+28     	; 0x12e4 <DIO_U8_Get_Port_Direction+0x7a>
			break;
		case GROUP_B:
			port_direction = DIO_U8_DDRB;
    12c8:	e7 e3       	ldi	r30, 0x37	; 55
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	89 83       	std	Y+1, r24	; 0x01
    12d0:	09 c0       	rjmp	.+18     	; 0x12e4 <DIO_U8_Get_Port_Direction+0x7a>
			break;
		case GROUP_C:
			port_direction = DIO_U8_DDRC;
    12d2:	e4 e3       	ldi	r30, 0x34	; 52
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	89 83       	std	Y+1, r24	; 0x01
    12da:	04 c0       	rjmp	.+8      	; 0x12e4 <DIO_U8_Get_Port_Direction+0x7a>
			break;
		case GROUP_D:
			port_direction = DIO_U8_DDRD;
    12dc:	e1 e3       	ldi	r30, 0x31	; 49
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	89 83       	std	Y+1, r24	; 0x01
	}
	else{
		return INVALID_PORT_ID;
	}

	return port_direction;
    12e4:	99 81       	ldd	r25, Y+1	; 0x01
    12e6:	9b 83       	std	Y+3, r25	; 0x03
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <DIO_U8_Get_Port_Direction+0x84>
			break;

		}
	}
	else{
		return INVALID_PORT_ID;
    12ea:	25 ef       	ldi	r18, 0xF5	; 245
    12ec:	2b 83       	std	Y+3, r18	; 0x03
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
	}

	return port_direction;
}
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	08 95       	ret

00001300 <DIO_U8_Get_Port_Value>:


// get port value_U8_PINB = port_direction

u8 DIO_U8_Get_Port_Value(u8 Copy_U8_Port_ID,u8* Copy_U8_Port_Value){
    1300:	df 93       	push	r29
    1302:	cf 93       	push	r28
    1304:	00 d0       	rcall	.+0      	; 0x1306 <DIO_U8_Get_Port_Value+0x6>
    1306:	00 d0       	rcall	.+0      	; 0x1308 <DIO_U8_Get_Port_Value+0x8>
    1308:	00 d0       	rcall	.+0      	; 0x130a <DIO_U8_Get_Port_Value+0xa>
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	89 83       	std	Y+1, r24	; 0x01
    1310:	7b 83       	std	Y+3, r23	; 0x03
    1312:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_U8_Port_ID <= GROUP_D) && (Copy_U8_Port_ID >= GROUP_A)){
    1314:	89 81       	ldd	r24, Y+1	; 0x01
    1316:	84 30       	cpi	r24, 0x04	; 4
    1318:	e0 f5       	brcc	.+120    	; 0x1392 <DIO_U8_Get_Port_Value+0x92>
		switch(Copy_U8_Port_ID){
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	3e 83       	std	Y+6, r19	; 0x06
    1322:	2d 83       	std	Y+5, r18	; 0x05
    1324:	8d 81       	ldd	r24, Y+5	; 0x05
    1326:	9e 81       	ldd	r25, Y+6	; 0x06
    1328:	81 30       	cpi	r24, 0x01	; 1
    132a:	91 05       	cpc	r25, r1
    132c:	e1 f0       	breq	.+56     	; 0x1366 <DIO_U8_Get_Port_Value+0x66>
    132e:	2d 81       	ldd	r18, Y+5	; 0x05
    1330:	3e 81       	ldd	r19, Y+6	; 0x06
    1332:	22 30       	cpi	r18, 0x02	; 2
    1334:	31 05       	cpc	r19, r1
    1336:	2c f4       	brge	.+10     	; 0x1342 <DIO_U8_Get_Port_Value+0x42>
    1338:	8d 81       	ldd	r24, Y+5	; 0x05
    133a:	9e 81       	ldd	r25, Y+6	; 0x06
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	61 f0       	breq	.+24     	; 0x1358 <DIO_U8_Get_Port_Value+0x58>
    1340:	26 c0       	rjmp	.+76     	; 0x138e <DIO_U8_Get_Port_Value+0x8e>
    1342:	2d 81       	ldd	r18, Y+5	; 0x05
    1344:	3e 81       	ldd	r19, Y+6	; 0x06
    1346:	22 30       	cpi	r18, 0x02	; 2
    1348:	31 05       	cpc	r19, r1
    134a:	a1 f0       	breq	.+40     	; 0x1374 <DIO_U8_Get_Port_Value+0x74>
    134c:	8d 81       	ldd	r24, Y+5	; 0x05
    134e:	9e 81       	ldd	r25, Y+6	; 0x06
    1350:	83 30       	cpi	r24, 0x03	; 3
    1352:	91 05       	cpc	r25, r1
    1354:	b1 f0       	breq	.+44     	; 0x1382 <DIO_U8_Get_Port_Value+0x82>
    1356:	1b c0       	rjmp	.+54     	; 0x138e <DIO_U8_Get_Port_Value+0x8e>
			case GROUP_A:
				*Copy_U8_Port_Value = DIO_U8_PINA;
    1358:	e9 e3       	ldi	r30, 0x39	; 57
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	ea 81       	ldd	r30, Y+2	; 0x02
    1360:	fb 81       	ldd	r31, Y+3	; 0x03
    1362:	80 83       	st	Z, r24
    1364:	14 c0       	rjmp	.+40     	; 0x138e <DIO_U8_Get_Port_Value+0x8e>
				break;
			case GROUP_B:
				*Copy_U8_Port_Value = DIO_U8_PINB;
    1366:	e6 e3       	ldi	r30, 0x36	; 54
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	ea 81       	ldd	r30, Y+2	; 0x02
    136e:	fb 81       	ldd	r31, Y+3	; 0x03
    1370:	80 83       	st	Z, r24
    1372:	0d c0       	rjmp	.+26     	; 0x138e <DIO_U8_Get_Port_Value+0x8e>
				break;
			case GROUP_C:
				*Copy_U8_Port_Value = DIO_U8_PINC;
    1374:	e3 e3       	ldi	r30, 0x33	; 51
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	ea 81       	ldd	r30, Y+2	; 0x02
    137c:	fb 81       	ldd	r31, Y+3	; 0x03
    137e:	80 83       	st	Z, r24
    1380:	06 c0       	rjmp	.+12     	; 0x138e <DIO_U8_Get_Port_Value+0x8e>
				break;
			case GROUP_D:
				*Copy_U8_Port_Value = DIO_U8_PIND;
    1382:	e0 e3       	ldi	r30, 0x30	; 48
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	ea 81       	ldd	r30, Y+2	; 0x02
    138a:	fb 81       	ldd	r31, Y+3	; 0x03
    138c:	80 83       	st	Z, r24

	}
	else{
		return INVALID_PORT_ID;
	}
	return 0;
    138e:	1c 82       	std	Y+4, r1	; 0x04
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <DIO_U8_Get_Port_Value+0x96>
				break;
		}

	}
	else{
		return INVALID_PORT_ID;
    1392:	95 ef       	ldi	r25, 0xF5	; 245
    1394:	9c 83       	std	Y+4, r25	; 0x04
    1396:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	return 0;
}
    1398:	26 96       	adiw	r28, 0x06	; 6
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	f8 94       	cli
    139e:	de bf       	out	0x3e, r29	; 62
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	cd bf       	out	0x3d, r28	; 61
    13a4:	cf 91       	pop	r28
    13a6:	df 91       	pop	r29
    13a8:	08 95       	ret

000013aa <__vector_1>:
#include "EXTI_Private.h"
#include "EXTI_Interface.h"

void(*AVoidCallBack[3])(void);

void __vector_1(void){
    13aa:	1f 92       	push	r1
    13ac:	0f 92       	push	r0
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	0f 92       	push	r0
    13b2:	11 24       	eor	r1, r1
    13b4:	2f 93       	push	r18
    13b6:	3f 93       	push	r19
    13b8:	4f 93       	push	r20
    13ba:	5f 93       	push	r21
    13bc:	6f 93       	push	r22
    13be:	7f 93       	push	r23
    13c0:	8f 93       	push	r24
    13c2:	9f 93       	push	r25
    13c4:	af 93       	push	r26
    13c6:	bf 93       	push	r27
    13c8:	ef 93       	push	r30
    13ca:	ff 93       	push	r31
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
	if(AVoidCallBack[1]!= NULL){
    13d4:	80 91 98 00 	lds	r24, 0x0098
    13d8:	90 91 99 00 	lds	r25, 0x0099
    13dc:	00 97       	sbiw	r24, 0x00	; 0
    13de:	29 f0       	breq	.+10     	; 0x13ea <__vector_1+0x40>
		AVoidCallBack[1]();
    13e0:	e0 91 98 00 	lds	r30, 0x0098
    13e4:	f0 91 99 00 	lds	r31, 0x0099
    13e8:	09 95       	icall
	}
}
    13ea:	cf 91       	pop	r28
    13ec:	df 91       	pop	r29
    13ee:	ff 91       	pop	r31
    13f0:	ef 91       	pop	r30
    13f2:	bf 91       	pop	r27
    13f4:	af 91       	pop	r26
    13f6:	9f 91       	pop	r25
    13f8:	8f 91       	pop	r24
    13fa:	7f 91       	pop	r23
    13fc:	6f 91       	pop	r22
    13fe:	5f 91       	pop	r21
    1400:	4f 91       	pop	r20
    1402:	3f 91       	pop	r19
    1404:	2f 91       	pop	r18
    1406:	0f 90       	pop	r0
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	0f 90       	pop	r0
    140c:	1f 90       	pop	r1
    140e:	18 95       	reti

00001410 <__vector_2>:

void __vector_2(void){
    1410:	1f 92       	push	r1
    1412:	0f 92       	push	r0
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	0f 92       	push	r0
    1418:	11 24       	eor	r1, r1
    141a:	2f 93       	push	r18
    141c:	3f 93       	push	r19
    141e:	4f 93       	push	r20
    1420:	5f 93       	push	r21
    1422:	6f 93       	push	r22
    1424:	7f 93       	push	r23
    1426:	8f 93       	push	r24
    1428:	9f 93       	push	r25
    142a:	af 93       	push	r26
    142c:	bf 93       	push	r27
    142e:	ef 93       	push	r30
    1430:	ff 93       	push	r31
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
	if(AVoidCallBack[2]!= NULL){
    143a:	80 91 9a 00 	lds	r24, 0x009A
    143e:	90 91 9b 00 	lds	r25, 0x009B
    1442:	00 97       	sbiw	r24, 0x00	; 0
    1444:	29 f0       	breq	.+10     	; 0x1450 <__vector_2+0x40>
		AVoidCallBack[2]();
    1446:	e0 91 9a 00 	lds	r30, 0x009A
    144a:	f0 91 9b 00 	lds	r31, 0x009B
    144e:	09 95       	icall
	}
}
    1450:	cf 91       	pop	r28
    1452:	df 91       	pop	r29
    1454:	ff 91       	pop	r31
    1456:	ef 91       	pop	r30
    1458:	bf 91       	pop	r27
    145a:	af 91       	pop	r26
    145c:	9f 91       	pop	r25
    145e:	8f 91       	pop	r24
    1460:	7f 91       	pop	r23
    1462:	6f 91       	pop	r22
    1464:	5f 91       	pop	r21
    1466:	4f 91       	pop	r20
    1468:	3f 91       	pop	r19
    146a:	2f 91       	pop	r18
    146c:	0f 90       	pop	r0
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	0f 90       	pop	r0
    1472:	1f 90       	pop	r1
    1474:	18 95       	reti

00001476 <__vector_3>:

void __vector_3(void){
    1476:	1f 92       	push	r1
    1478:	0f 92       	push	r0
    147a:	0f b6       	in	r0, 0x3f	; 63
    147c:	0f 92       	push	r0
    147e:	11 24       	eor	r1, r1
    1480:	2f 93       	push	r18
    1482:	3f 93       	push	r19
    1484:	4f 93       	push	r20
    1486:	5f 93       	push	r21
    1488:	6f 93       	push	r22
    148a:	7f 93       	push	r23
    148c:	8f 93       	push	r24
    148e:	9f 93       	push	r25
    1490:	af 93       	push	r26
    1492:	bf 93       	push	r27
    1494:	ef 93       	push	r30
    1496:	ff 93       	push	r31
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
	if(AVoidCallBack[0]!= NULL){
    14a0:	80 91 96 00 	lds	r24, 0x0096
    14a4:	90 91 97 00 	lds	r25, 0x0097
    14a8:	00 97       	sbiw	r24, 0x00	; 0
    14aa:	29 f0       	breq	.+10     	; 0x14b6 <__vector_3+0x40>
		AVoidCallBack[0]();
    14ac:	e0 91 96 00 	lds	r30, 0x0096
    14b0:	f0 91 97 00 	lds	r31, 0x0097
    14b4:	09 95       	icall
	}
}
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	ff 91       	pop	r31
    14bc:	ef 91       	pop	r30
    14be:	bf 91       	pop	r27
    14c0:	af 91       	pop	r26
    14c2:	9f 91       	pop	r25
    14c4:	8f 91       	pop	r24
    14c6:	7f 91       	pop	r23
    14c8:	6f 91       	pop	r22
    14ca:	5f 91       	pop	r21
    14cc:	4f 91       	pop	r20
    14ce:	3f 91       	pop	r19
    14d0:	2f 91       	pop	r18
    14d2:	0f 90       	pop	r0
    14d4:	0f be       	out	0x3f, r0	; 63
    14d6:	0f 90       	pop	r0
    14d8:	1f 90       	pop	r1
    14da:	18 95       	reti

000014dc <EXTI_Void_Global_Enable_Disable>:

void EXTI_Void_Global_Enable_Disable(u8 Copy_u8_Ein_Dis){
    14dc:	df 93       	push	r29
    14de:	cf 93       	push	r28
    14e0:	00 d0       	rcall	.+0      	; 0x14e2 <EXTI_Void_Global_Enable_Disable+0x6>
    14e2:	0f 92       	push	r0
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	89 83       	std	Y+1, r24	; 0x01


	switch(Copy_u8_Ein_Dis){
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	3b 83       	std	Y+3, r19	; 0x03
    14f2:	2a 83       	std	Y+2, r18	; 0x02
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	9b 81       	ldd	r25, Y+3	; 0x03
    14f8:	00 97       	sbiw	r24, 0x00	; 0
    14fa:	69 f0       	breq	.+26     	; 0x1516 <EXTI_Void_Global_Enable_Disable+0x3a>
    14fc:	2a 81       	ldd	r18, Y+2	; 0x02
    14fe:	3b 81       	ldd	r19, Y+3	; 0x03
    1500:	21 30       	cpi	r18, 0x01	; 1
    1502:	31 05       	cpc	r19, r1
    1504:	79 f4       	brne	.+30     	; 0x1524 <EXTI_Void_Global_Enable_Disable+0x48>
		case EXTI_U8_Global_Enable:
			Set_Bit(EXTI_U8_SREG,EXTI_U8_Global_Int_PIN);
    1506:	af e5       	ldi	r26, 0x5F	; 95
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	ef e5       	ldi	r30, 0x5F	; 95
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	80 68       	ori	r24, 0x80	; 128
    1512:	8c 93       	st	X, r24
    1514:	07 c0       	rjmp	.+14     	; 0x1524 <EXTI_Void_Global_Enable_Disable+0x48>
			break;
		case EXTI_U8_Global_Disable:
			Clear_Bit(EXTI_U8_SREG,EXTI_U8_Global_Int_PIN);
    1516:	af e5       	ldi	r26, 0x5F	; 95
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	ef e5       	ldi	r30, 0x5F	; 95
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	8f 77       	andi	r24, 0x7F	; 127
    1522:	8c 93       	st	X, r24
			break;
	}

}
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	08 95       	ret

00001530 <EXTI_Void_Ein_Dis>:

void EXTI_Void_Ein_Dis(u8 Copy_U8_INT_Index, u8 Copy_U8_Ein_Dis){
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	00 d0       	rcall	.+0      	; 0x1536 <EXTI_Void_Ein_Dis+0x6>
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	89 83       	std	Y+1, r24	; 0x01
    153c:	6a 83       	std	Y+2, r22	; 0x02
	Assign_Bit(EXTI_U8_GICR,Copy_U8_INT_Index,Copy_U8_Ein_Dis);
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	81 30       	cpi	r24, 0x01	; 1
    1542:	a1 f4       	brne	.+40     	; 0x156c <EXTI_Void_Ein_Dis+0x3c>
    1544:	ab e5       	ldi	r26, 0x5B	; 91
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	eb e5       	ldi	r30, 0x5B	; 91
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	48 2f       	mov	r20, r24
    1550:	89 81       	ldd	r24, Y+1	; 0x01
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	02 2e       	mov	r0, r18
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <EXTI_Void_Ein_Dis+0x32>
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	0a 94       	dec	r0
    1564:	e2 f7       	brpl	.-8      	; 0x155e <EXTI_Void_Ein_Dis+0x2e>
    1566:	84 2b       	or	r24, r20
    1568:	8c 93       	st	X, r24
    156a:	14 c0       	rjmp	.+40     	; 0x1594 <EXTI_Void_Ein_Dis+0x64>
    156c:	ab e5       	ldi	r26, 0x5B	; 91
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	eb e5       	ldi	r30, 0x5B	; 91
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	48 2f       	mov	r20, r24
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	02 2e       	mov	r0, r18
    1584:	02 c0       	rjmp	.+4      	; 0x158a <EXTI_Void_Ein_Dis+0x5a>
    1586:	88 0f       	add	r24, r24
    1588:	99 1f       	adc	r25, r25
    158a:	0a 94       	dec	r0
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <EXTI_Void_Ein_Dis+0x56>
    158e:	80 95       	com	r24
    1590:	84 23       	and	r24, r20
    1592:	8c 93       	st	X, r24
}
    1594:	0f 90       	pop	r0
    1596:	0f 90       	pop	r0
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	08 95       	ret

0000159e <EXTI_U8_Set_Level>:

void EXTI_U8_Set_Level (u8 Copy_U8_Int_Index, u8 Copy_U8_Int_Level){
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <EXTI_U8_Set_Level+0x6>
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <EXTI_U8_Set_Level+0x8>
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	89 83       	std	Y+1, r24	; 0x01
    15ac:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8_Int_Index){
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	3c 83       	std	Y+4, r19	; 0x04
    15b6:	2b 83       	std	Y+3, r18	; 0x03
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	9c 81       	ldd	r25, Y+4	; 0x04
    15bc:	86 30       	cpi	r24, 0x06	; 6
    15be:	91 05       	cpc	r25, r1
    15c0:	61 f0       	breq	.+24     	; 0x15da <EXTI_U8_Set_Level+0x3c>
    15c2:	2b 81       	ldd	r18, Y+3	; 0x03
    15c4:	3c 81       	ldd	r19, Y+4	; 0x04
    15c6:	27 30       	cpi	r18, 0x07	; 7
    15c8:	31 05       	cpc	r19, r1
    15ca:	a9 f1       	breq	.+106    	; 0x1636 <EXTI_U8_Set_Level+0x98>
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	9c 81       	ldd	r25, Y+4	; 0x04
    15d0:	85 30       	cpi	r24, 0x05	; 5
    15d2:	91 05       	cpc	r25, r1
    15d4:	09 f4       	brne	.+2      	; 0x15d8 <EXTI_U8_Set_Level+0x3a>
    15d6:	5d c0       	rjmp	.+186    	; 0x1692 <EXTI_U8_Set_Level+0xf4>
    15d8:	72 c0       	rjmp	.+228    	; 0x16be <EXTI_U8_Set_Level+0x120>
		case EXTI_U8_INT0:
			Assign_Bit(EXTI_U8_MCUCR, EXTI_U8_INT0_Set_LVL_Bit_0, Get_Bit(Copy_U8_Int_Level,BIT0));
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	88 2f       	mov	r24, r24
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	81 70       	andi	r24, 0x01	; 1
    15e2:	90 70       	andi	r25, 0x00	; 0
    15e4:	88 23       	and	r24, r24
    15e6:	41 f0       	breq	.+16     	; 0x15f8 <EXTI_U8_Set_Level+0x5a>
    15e8:	a5 e5       	ldi	r26, 0x55	; 85
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	e5 e5       	ldi	r30, 0x55	; 85
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	81 60       	ori	r24, 0x01	; 1
    15f4:	8c 93       	st	X, r24
    15f6:	07 c0       	rjmp	.+14     	; 0x1606 <EXTI_U8_Set_Level+0x68>
    15f8:	a5 e5       	ldi	r26, 0x55	; 85
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e5 e5       	ldi	r30, 0x55	; 85
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	8e 7f       	andi	r24, 0xFE	; 254
    1604:	8c 93       	st	X, r24
			Assign_Bit(EXTI_U8_MCUCR, EXTI_U8_INT0_Set_LVL_Bit_1, Get_Bit(Copy_U8_Int_Level,BIT1));
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	86 95       	lsr	r24
    160a:	88 2f       	mov	r24, r24
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	81 70       	andi	r24, 0x01	; 1
    1610:	90 70       	andi	r25, 0x00	; 0
    1612:	88 23       	and	r24, r24
    1614:	41 f0       	breq	.+16     	; 0x1626 <EXTI_U8_Set_Level+0x88>
    1616:	a5 e5       	ldi	r26, 0x55	; 85
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e5 e5       	ldi	r30, 0x55	; 85
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	82 60       	ori	r24, 0x02	; 2
    1622:	8c 93       	st	X, r24
    1624:	4c c0       	rjmp	.+152    	; 0x16be <EXTI_U8_Set_Level+0x120>
    1626:	a5 e5       	ldi	r26, 0x55	; 85
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	e5 e5       	ldi	r30, 0x55	; 85
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	8d 7f       	andi	r24, 0xFD	; 253
    1632:	8c 93       	st	X, r24
    1634:	44 c0       	rjmp	.+136    	; 0x16be <EXTI_U8_Set_Level+0x120>
			break;
		case EXTI_U8_INT1:
			Assign_Bit(EXTI_U8_MCUCR, EXTI_U8_INT1_Set_LVL_Bit_2, Get_Bit(Copy_U8_Int_Level,BIT0));
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	88 2f       	mov	r24, r24
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	81 70       	andi	r24, 0x01	; 1
    163e:	90 70       	andi	r25, 0x00	; 0
    1640:	88 23       	and	r24, r24
    1642:	41 f0       	breq	.+16     	; 0x1654 <EXTI_U8_Set_Level+0xb6>
    1644:	a5 e5       	ldi	r26, 0x55	; 85
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	e5 e5       	ldi	r30, 0x55	; 85
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	84 60       	ori	r24, 0x04	; 4
    1650:	8c 93       	st	X, r24
    1652:	07 c0       	rjmp	.+14     	; 0x1662 <EXTI_U8_Set_Level+0xc4>
    1654:	a5 e5       	ldi	r26, 0x55	; 85
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e5 e5       	ldi	r30, 0x55	; 85
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	8b 7f       	andi	r24, 0xFB	; 251
    1660:	8c 93       	st	X, r24
			Assign_Bit(EXTI_U8_MCUCR, EXTI_U8_INT1_Set_LVL_Bit_3, Get_Bit(Copy_U8_Int_Level,BIT1));
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	86 95       	lsr	r24
    1666:	88 2f       	mov	r24, r24
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	81 70       	andi	r24, 0x01	; 1
    166c:	90 70       	andi	r25, 0x00	; 0
    166e:	88 23       	and	r24, r24
    1670:	41 f0       	breq	.+16     	; 0x1682 <EXTI_U8_Set_Level+0xe4>
    1672:	a5 e5       	ldi	r26, 0x55	; 85
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	e5 e5       	ldi	r30, 0x55	; 85
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	88 60       	ori	r24, 0x08	; 8
    167e:	8c 93       	st	X, r24
    1680:	1e c0       	rjmp	.+60     	; 0x16be <EXTI_U8_Set_Level+0x120>
    1682:	a5 e5       	ldi	r26, 0x55	; 85
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e5 e5       	ldi	r30, 0x55	; 85
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	87 7f       	andi	r24, 0xF7	; 247
    168e:	8c 93       	st	X, r24
    1690:	16 c0       	rjmp	.+44     	; 0x16be <EXTI_U8_Set_Level+0x120>
			break;
		case EXTI_U8_INT2:
			Assign_Bit(EXTI_U8_MCUCSR, EXTI_U8_INT2_Set_LVL_Bit_6, Get_Bit(Copy_U8_Int_Level,BIT0));
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	88 2f       	mov	r24, r24
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	81 70       	andi	r24, 0x01	; 1
    169a:	90 70       	andi	r25, 0x00	; 0
    169c:	88 23       	and	r24, r24
    169e:	41 f0       	breq	.+16     	; 0x16b0 <EXTI_U8_Set_Level+0x112>
    16a0:	a4 e5       	ldi	r26, 0x54	; 84
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	e4 e5       	ldi	r30, 0x54	; 84
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	80 64       	ori	r24, 0x40	; 64
    16ac:	8c 93       	st	X, r24
    16ae:	07 c0       	rjmp	.+14     	; 0x16be <EXTI_U8_Set_Level+0x120>
    16b0:	a4 e5       	ldi	r26, 0x54	; 84
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e4 e5       	ldi	r30, 0x54	; 84
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	8f 7b       	andi	r24, 0xBF	; 191
    16bc:	8c 93       	st	X, r24
			break;

	}
}
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	cf 91       	pop	r28
    16c8:	df 91       	pop	r29
    16ca:	08 95       	ret

000016cc <EXTI_Void_Set_Call_Back>:


void EXTI_Void_Set_Call_Back(u8 Copy_U8_Int_index, void (*PVOID_CallBack)(void)){
    16cc:	df 93       	push	r29
    16ce:	cf 93       	push	r28
    16d0:	00 d0       	rcall	.+0      	; 0x16d2 <EXTI_Void_Set_Call_Back+0x6>
    16d2:	0f 92       	push	r0
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
    16d8:	89 83       	std	Y+1, r24	; 0x01
    16da:	7b 83       	std	Y+3, r23	; 0x03
    16dc:	6a 83       	std	Y+2, r22	; 0x02
	AVoidCallBack[Copy_U8_Int_index-mapping]= PVOID_CallBack;
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	88 2f       	mov	r24, r24
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	05 97       	sbiw	r24, 0x05	; 5
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	fc 01       	movw	r30, r24
    16ec:	ea 56       	subi	r30, 0x6A	; 106
    16ee:	ff 4f       	sbci	r31, 0xFF	; 255
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	9b 81       	ldd	r25, Y+3	; 0x03
    16f4:	91 83       	std	Z+1, r25	; 0x01
    16f6:	80 83       	st	Z, r24
}
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	cf 91       	pop	r28
    1700:	df 91       	pop	r29
    1702:	08 95       	ret

00001704 <LCD_Void_Init_8Bits>:
#include "LCD_Config.h"

#include "LCD_Interface.h"
#include <avr/delay.h>

void LCD_Void_Init_8Bits (void){
    1704:	df 93       	push	r29
    1706:	cf 93       	push	r28
    1708:	cd b7       	in	r28, 0x3d	; 61
    170a:	de b7       	in	r29, 0x3e	; 62
    170c:	e8 97       	sbiw	r28, 0x38	; 56
    170e:	0f b6       	in	r0, 0x3f	; 63
    1710:	f8 94       	cli
    1712:	de bf       	out	0x3e, r29	; 62
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	cd bf       	out	0x3d, r28	; 61
	DIO_U8_Set_Port_Direction(LCD_U8_DATA_Port, maximum_port_direction);
    1718:	82 e0       	ldi	r24, 0x02	; 2
    171a:	6f ef       	ldi	r22, 0xFF	; 255
    171c:	0e 94 1c 08 	call	0x1038	; 0x1038 <DIO_U8_Set_Port_Direction>
	DIO_U8_Set_Pin_Direction(LCD_U8_CTRL_Port, LCD_U8_RS_PIN, OUTPUT);
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	65 e0       	ldi	r22, 0x05	; 5
    1724:	41 e0       	ldi	r20, 0x01	; 1
    1726:	0e 94 28 07 	call	0xe50	; 0xe50 <DIO_U8_Set_Pin_Direction>
	DIO_U8_Set_Pin_Direction(LCD_U8_CTRL_Port, LCD_U8_RW_PIN, OUTPUT);
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	66 e0       	ldi	r22, 0x06	; 6
    172e:	41 e0       	ldi	r20, 0x01	; 1
    1730:	0e 94 28 07 	call	0xe50	; 0xe50 <DIO_U8_Set_Pin_Direction>
	DIO_U8_Set_Pin_Direction(LCD_U8_CTRL_Port, LCD_U8_ENABLE_PIN, OUTPUT);
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	67 e0       	ldi	r22, 0x07	; 7
    1738:	41 e0       	ldi	r20, 0x01	; 1
    173a:	0e 94 28 07 	call	0xe50	; 0xe50 <DIO_U8_Set_Pin_Direction>
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	a8 e4       	ldi	r26, 0x48	; 72
    1744:	b2 e4       	ldi	r27, 0x42	; 66
    1746:	8d ab       	std	Y+53, r24	; 0x35
    1748:	9e ab       	std	Y+54, r25	; 0x36
    174a:	af ab       	std	Y+55, r26	; 0x37
    174c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    174e:	6d a9       	ldd	r22, Y+53	; 0x35
    1750:	7e a9       	ldd	r23, Y+54	; 0x36
    1752:	8f a9       	ldd	r24, Y+55	; 0x37
    1754:	98 ad       	ldd	r25, Y+56	; 0x38
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	4a ef       	ldi	r20, 0xFA	; 250
    175c:	54 e4       	ldi	r21, 0x44	; 68
    175e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	89 ab       	std	Y+49, r24	; 0x31
    1768:	9a ab       	std	Y+50, r25	; 0x32
    176a:	ab ab       	std	Y+51, r26	; 0x33
    176c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    176e:	69 a9       	ldd	r22, Y+49	; 0x31
    1770:	7a a9       	ldd	r23, Y+50	; 0x32
    1772:	8b a9       	ldd	r24, Y+51	; 0x33
    1774:	9c a9       	ldd	r25, Y+52	; 0x34
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	40 e8       	ldi	r20, 0x80	; 128
    177c:	5f e3       	ldi	r21, 0x3F	; 63
    177e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1782:	88 23       	and	r24, r24
    1784:	2c f4       	brge	.+10     	; 0x1790 <LCD_Void_Init_8Bits+0x8c>
		__ticks = 1;
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	98 ab       	std	Y+48, r25	; 0x30
    178c:	8f a7       	std	Y+47, r24	; 0x2f
    178e:	3f c0       	rjmp	.+126    	; 0x180e <LCD_Void_Init_8Bits+0x10a>
	else if (__tmp > 65535)
    1790:	69 a9       	ldd	r22, Y+49	; 0x31
    1792:	7a a9       	ldd	r23, Y+50	; 0x32
    1794:	8b a9       	ldd	r24, Y+51	; 0x33
    1796:	9c a9       	ldd	r25, Y+52	; 0x34
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	3f ef       	ldi	r19, 0xFF	; 255
    179c:	4f e7       	ldi	r20, 0x7F	; 127
    179e:	57 e4       	ldi	r21, 0x47	; 71
    17a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17a4:	18 16       	cp	r1, r24
    17a6:	4c f5       	brge	.+82     	; 0x17fa <LCD_Void_Init_8Bits+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17a8:	6d a9       	ldd	r22, Y+53	; 0x35
    17aa:	7e a9       	ldd	r23, Y+54	; 0x36
    17ac:	8f a9       	ldd	r24, Y+55	; 0x37
    17ae:	98 ad       	ldd	r25, Y+56	; 0x38
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	40 e2       	ldi	r20, 0x20	; 32
    17b6:	51 e4       	ldi	r21, 0x41	; 65
    17b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	bc 01       	movw	r22, r24
    17c2:	cd 01       	movw	r24, r26
    17c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	98 ab       	std	Y+48, r25	; 0x30
    17ce:	8f a7       	std	Y+47, r24	; 0x2f
    17d0:	0f c0       	rjmp	.+30     	; 0x17f0 <LCD_Void_Init_8Bits+0xec>
    17d2:	88 ec       	ldi	r24, 0xC8	; 200
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	9e a7       	std	Y+46, r25	; 0x2e
    17d8:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17da:	8d a5       	ldd	r24, Y+45	; 0x2d
    17dc:	9e a5       	ldd	r25, Y+46	; 0x2e
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	f1 f7       	brne	.-4      	; 0x17de <LCD_Void_Init_8Bits+0xda>
    17e2:	9e a7       	std	Y+46, r25	; 0x2e
    17e4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    17e8:	98 a9       	ldd	r25, Y+48	; 0x30
    17ea:	01 97       	sbiw	r24, 0x01	; 1
    17ec:	98 ab       	std	Y+48, r25	; 0x30
    17ee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    17f2:	98 a9       	ldd	r25, Y+48	; 0x30
    17f4:	00 97       	sbiw	r24, 0x00	; 0
    17f6:	69 f7       	brne	.-38     	; 0x17d2 <LCD_Void_Init_8Bits+0xce>
    17f8:	14 c0       	rjmp	.+40     	; 0x1822 <LCD_Void_Init_8Bits+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17fa:	69 a9       	ldd	r22, Y+49	; 0x31
    17fc:	7a a9       	ldd	r23, Y+50	; 0x32
    17fe:	8b a9       	ldd	r24, Y+51	; 0x33
    1800:	9c a9       	ldd	r25, Y+52	; 0x34
    1802:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1806:	dc 01       	movw	r26, r24
    1808:	cb 01       	movw	r24, r22
    180a:	98 ab       	std	Y+48, r25	; 0x30
    180c:	8f a7       	std	Y+47, r24	; 0x2f
    180e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1810:	98 a9       	ldd	r25, Y+48	; 0x30
    1812:	9c a7       	std	Y+44, r25	; 0x2c
    1814:	8b a7       	std	Y+43, r24	; 0x2b
    1816:	8b a5       	ldd	r24, Y+43	; 0x2b
    1818:	9c a5       	ldd	r25, Y+44	; 0x2c
    181a:	01 97       	sbiw	r24, 0x01	; 1
    181c:	f1 f7       	brne	.-4      	; 0x181a <LCD_Void_Init_8Bits+0x116>
    181e:	9c a7       	std	Y+44, r25	; 0x2c
    1820:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	LCD_Void_Write_Cmd(Init_Function_set);  //FUNCTION set  see starting from page 12 in lcd datasheet
    1822:	88 e3       	ldi	r24, 0x38	; 56
    1824:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <LCD_Void_Write_Cmd>
    1828:	80 e0       	ldi	r24, 0x00	; 0
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	a8 e4       	ldi	r26, 0x48	; 72
    182e:	b2 e4       	ldi	r27, 0x42	; 66
    1830:	8f a3       	std	Y+39, r24	; 0x27
    1832:	98 a7       	std	Y+40, r25	; 0x28
    1834:	a9 a7       	std	Y+41, r26	; 0x29
    1836:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1838:	6f a1       	ldd	r22, Y+39	; 0x27
    183a:	78 a5       	ldd	r23, Y+40	; 0x28
    183c:	89 a5       	ldd	r24, Y+41	; 0x29
    183e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	4a ef       	ldi	r20, 0xFA	; 250
    1846:	54 e4       	ldi	r21, 0x44	; 68
    1848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	8b a3       	std	Y+35, r24	; 0x23
    1852:	9c a3       	std	Y+36, r25	; 0x24
    1854:	ad a3       	std	Y+37, r26	; 0x25
    1856:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1858:	6b a1       	ldd	r22, Y+35	; 0x23
    185a:	7c a1       	ldd	r23, Y+36	; 0x24
    185c:	8d a1       	ldd	r24, Y+37	; 0x25
    185e:	9e a1       	ldd	r25, Y+38	; 0x26
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	40 e8       	ldi	r20, 0x80	; 128
    1866:	5f e3       	ldi	r21, 0x3F	; 63
    1868:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    186c:	88 23       	and	r24, r24
    186e:	2c f4       	brge	.+10     	; 0x187a <LCD_Void_Init_8Bits+0x176>
		__ticks = 1;
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	9a a3       	std	Y+34, r25	; 0x22
    1876:	89 a3       	std	Y+33, r24	; 0x21
    1878:	3f c0       	rjmp	.+126    	; 0x18f8 <LCD_Void_Init_8Bits+0x1f4>
	else if (__tmp > 65535)
    187a:	6b a1       	ldd	r22, Y+35	; 0x23
    187c:	7c a1       	ldd	r23, Y+36	; 0x24
    187e:	8d a1       	ldd	r24, Y+37	; 0x25
    1880:	9e a1       	ldd	r25, Y+38	; 0x26
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	3f ef       	ldi	r19, 0xFF	; 255
    1886:	4f e7       	ldi	r20, 0x7F	; 127
    1888:	57 e4       	ldi	r21, 0x47	; 71
    188a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    188e:	18 16       	cp	r1, r24
    1890:	4c f5       	brge	.+82     	; 0x18e4 <LCD_Void_Init_8Bits+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1892:	6f a1       	ldd	r22, Y+39	; 0x27
    1894:	78 a5       	ldd	r23, Y+40	; 0x28
    1896:	89 a5       	ldd	r24, Y+41	; 0x29
    1898:	9a a5       	ldd	r25, Y+42	; 0x2a
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	40 e2       	ldi	r20, 0x20	; 32
    18a0:	51 e4       	ldi	r21, 0x41	; 65
    18a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	bc 01       	movw	r22, r24
    18ac:	cd 01       	movw	r24, r26
    18ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	9a a3       	std	Y+34, r25	; 0x22
    18b8:	89 a3       	std	Y+33, r24	; 0x21
    18ba:	0f c0       	rjmp	.+30     	; 0x18da <LCD_Void_Init_8Bits+0x1d6>
    18bc:	88 ec       	ldi	r24, 0xC8	; 200
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	98 a3       	std	Y+32, r25	; 0x20
    18c2:	8f 8f       	std	Y+31, r24	; 0x1f
    18c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18c6:	98 a1       	ldd	r25, Y+32	; 0x20
    18c8:	01 97       	sbiw	r24, 0x01	; 1
    18ca:	f1 f7       	brne	.-4      	; 0x18c8 <LCD_Void_Init_8Bits+0x1c4>
    18cc:	98 a3       	std	Y+32, r25	; 0x20
    18ce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d0:	89 a1       	ldd	r24, Y+33	; 0x21
    18d2:	9a a1       	ldd	r25, Y+34	; 0x22
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	9a a3       	std	Y+34, r25	; 0x22
    18d8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18da:	89 a1       	ldd	r24, Y+33	; 0x21
    18dc:	9a a1       	ldd	r25, Y+34	; 0x22
    18de:	00 97       	sbiw	r24, 0x00	; 0
    18e0:	69 f7       	brne	.-38     	; 0x18bc <LCD_Void_Init_8Bits+0x1b8>
    18e2:	14 c0       	rjmp	.+40     	; 0x190c <LCD_Void_Init_8Bits+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e4:	6b a1       	ldd	r22, Y+35	; 0x23
    18e6:	7c a1       	ldd	r23, Y+36	; 0x24
    18e8:	8d a1       	ldd	r24, Y+37	; 0x25
    18ea:	9e a1       	ldd	r25, Y+38	; 0x26
    18ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	9a a3       	std	Y+34, r25	; 0x22
    18f6:	89 a3       	std	Y+33, r24	; 0x21
    18f8:	89 a1       	ldd	r24, Y+33	; 0x21
    18fa:	9a a1       	ldd	r25, Y+34	; 0x22
    18fc:	9e 8f       	std	Y+30, r25	; 0x1e
    18fe:	8d 8f       	std	Y+29, r24	; 0x1d
    1900:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1902:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	f1 f7       	brne	.-4      	; 0x1904 <LCD_Void_Init_8Bits+0x200>
    1908:	9e 8f       	std	Y+30, r25	; 0x1e
    190a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);
	LCD_Void_Write_Cmd(Init_Display_OnOff);  //display on/off
    190c:	8c e0       	ldi	r24, 0x0C	; 12
    190e:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <LCD_Void_Write_Cmd>
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	a8 e4       	ldi	r26, 0x48	; 72
    1918:	b2 e4       	ldi	r27, 0x42	; 66
    191a:	89 8f       	std	Y+25, r24	; 0x19
    191c:	9a 8f       	std	Y+26, r25	; 0x1a
    191e:	ab 8f       	std	Y+27, r26	; 0x1b
    1920:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1922:	69 8d       	ldd	r22, Y+25	; 0x19
    1924:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1926:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1928:	9c 8d       	ldd	r25, Y+28	; 0x1c
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	4a ef       	ldi	r20, 0xFA	; 250
    1930:	54 e4       	ldi	r21, 0x44	; 68
    1932:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	8d 8b       	std	Y+21, r24	; 0x15
    193c:	9e 8b       	std	Y+22, r25	; 0x16
    193e:	af 8b       	std	Y+23, r26	; 0x17
    1940:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1942:	6d 89       	ldd	r22, Y+21	; 0x15
    1944:	7e 89       	ldd	r23, Y+22	; 0x16
    1946:	8f 89       	ldd	r24, Y+23	; 0x17
    1948:	98 8d       	ldd	r25, Y+24	; 0x18
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 e8       	ldi	r20, 0x80	; 128
    1950:	5f e3       	ldi	r21, 0x3F	; 63
    1952:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1956:	88 23       	and	r24, r24
    1958:	2c f4       	brge	.+10     	; 0x1964 <LCD_Void_Init_8Bits+0x260>
		__ticks = 1;
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	9c 8b       	std	Y+20, r25	; 0x14
    1960:	8b 8b       	std	Y+19, r24	; 0x13
    1962:	3f c0       	rjmp	.+126    	; 0x19e2 <LCD_Void_Init_8Bits+0x2de>
	else if (__tmp > 65535)
    1964:	6d 89       	ldd	r22, Y+21	; 0x15
    1966:	7e 89       	ldd	r23, Y+22	; 0x16
    1968:	8f 89       	ldd	r24, Y+23	; 0x17
    196a:	98 8d       	ldd	r25, Y+24	; 0x18
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	3f ef       	ldi	r19, 0xFF	; 255
    1970:	4f e7       	ldi	r20, 0x7F	; 127
    1972:	57 e4       	ldi	r21, 0x47	; 71
    1974:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1978:	18 16       	cp	r1, r24
    197a:	4c f5       	brge	.+82     	; 0x19ce <LCD_Void_Init_8Bits+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    197c:	69 8d       	ldd	r22, Y+25	; 0x19
    197e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1980:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1982:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 e2       	ldi	r20, 0x20	; 32
    198a:	51 e4       	ldi	r21, 0x41	; 65
    198c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	bc 01       	movw	r22, r24
    1996:	cd 01       	movw	r24, r26
    1998:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	9c 8b       	std	Y+20, r25	; 0x14
    19a2:	8b 8b       	std	Y+19, r24	; 0x13
    19a4:	0f c0       	rjmp	.+30     	; 0x19c4 <LCD_Void_Init_8Bits+0x2c0>
    19a6:	88 ec       	ldi	r24, 0xC8	; 200
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	9a 8b       	std	Y+18, r25	; 0x12
    19ac:	89 8b       	std	Y+17, r24	; 0x11
    19ae:	89 89       	ldd	r24, Y+17	; 0x11
    19b0:	9a 89       	ldd	r25, Y+18	; 0x12
    19b2:	01 97       	sbiw	r24, 0x01	; 1
    19b4:	f1 f7       	brne	.-4      	; 0x19b2 <LCD_Void_Init_8Bits+0x2ae>
    19b6:	9a 8b       	std	Y+18, r25	; 0x12
    19b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ba:	8b 89       	ldd	r24, Y+19	; 0x13
    19bc:	9c 89       	ldd	r25, Y+20	; 0x14
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	9c 8b       	std	Y+20, r25	; 0x14
    19c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c4:	8b 89       	ldd	r24, Y+19	; 0x13
    19c6:	9c 89       	ldd	r25, Y+20	; 0x14
    19c8:	00 97       	sbiw	r24, 0x00	; 0
    19ca:	69 f7       	brne	.-38     	; 0x19a6 <LCD_Void_Init_8Bits+0x2a2>
    19cc:	14 c0       	rjmp	.+40     	; 0x19f6 <LCD_Void_Init_8Bits+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ce:	6d 89       	ldd	r22, Y+21	; 0x15
    19d0:	7e 89       	ldd	r23, Y+22	; 0x16
    19d2:	8f 89       	ldd	r24, Y+23	; 0x17
    19d4:	98 8d       	ldd	r25, Y+24	; 0x18
    19d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	9c 8b       	std	Y+20, r25	; 0x14
    19e0:	8b 8b       	std	Y+19, r24	; 0x13
    19e2:	8b 89       	ldd	r24, Y+19	; 0x13
    19e4:	9c 89       	ldd	r25, Y+20	; 0x14
    19e6:	98 8b       	std	Y+16, r25	; 0x10
    19e8:	8f 87       	std	Y+15, r24	; 0x0f
    19ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    19ec:	98 89       	ldd	r25, Y+16	; 0x10
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	f1 f7       	brne	.-4      	; 0x19ee <LCD_Void_Init_8Bits+0x2ea>
    19f2:	98 8b       	std	Y+16, r25	; 0x10
    19f4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	LCD_Void_Write_Cmd(Init_Display_Clear);  //display clear
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <LCD_Void_Write_Cmd>
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	a0 e0       	ldi	r26, 0x00	; 0
    1a02:	b0 e4       	ldi	r27, 0x40	; 64
    1a04:	8b 87       	std	Y+11, r24	; 0x0b
    1a06:	9c 87       	std	Y+12, r25	; 0x0c
    1a08:	ad 87       	std	Y+13, r26	; 0x0d
    1a0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	4a ef       	ldi	r20, 0xFA	; 250
    1a1a:	54 e4       	ldi	r21, 0x44	; 68
    1a1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	8f 83       	std	Y+7, r24	; 0x07
    1a26:	98 87       	std	Y+8, r25	; 0x08
    1a28:	a9 87       	std	Y+9, r26	; 0x09
    1a2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a2e:	78 85       	ldd	r23, Y+8	; 0x08
    1a30:	89 85       	ldd	r24, Y+9	; 0x09
    1a32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	40 e8       	ldi	r20, 0x80	; 128
    1a3a:	5f e3       	ldi	r21, 0x3F	; 63
    1a3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a40:	88 23       	and	r24, r24
    1a42:	2c f4       	brge	.+10     	; 0x1a4e <LCD_Void_Init_8Bits+0x34a>
		__ticks = 1;
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	9e 83       	std	Y+6, r25	; 0x06
    1a4a:	8d 83       	std	Y+5, r24	; 0x05
    1a4c:	3f c0       	rjmp	.+126    	; 0x1acc <LCD_Void_Init_8Bits+0x3c8>
	else if (__tmp > 65535)
    1a4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a50:	78 85       	ldd	r23, Y+8	; 0x08
    1a52:	89 85       	ldd	r24, Y+9	; 0x09
    1a54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	3f ef       	ldi	r19, 0xFF	; 255
    1a5a:	4f e7       	ldi	r20, 0x7F	; 127
    1a5c:	57 e4       	ldi	r21, 0x47	; 71
    1a5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a62:	18 16       	cp	r1, r24
    1a64:	4c f5       	brge	.+82     	; 0x1ab8 <LCD_Void_Init_8Bits+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a66:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a68:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	40 e2       	ldi	r20, 0x20	; 32
    1a74:	51 e4       	ldi	r21, 0x41	; 65
    1a76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	bc 01       	movw	r22, r24
    1a80:	cd 01       	movw	r24, r26
    1a82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	9e 83       	std	Y+6, r25	; 0x06
    1a8c:	8d 83       	std	Y+5, r24	; 0x05
    1a8e:	0f c0       	rjmp	.+30     	; 0x1aae <LCD_Void_Init_8Bits+0x3aa>
    1a90:	88 ec       	ldi	r24, 0xC8	; 200
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	9c 83       	std	Y+4, r25	; 0x04
    1a96:	8b 83       	std	Y+3, r24	; 0x03
    1a98:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9c:	01 97       	sbiw	r24, 0x01	; 1
    1a9e:	f1 f7       	brne	.-4      	; 0x1a9c <LCD_Void_Init_8Bits+0x398>
    1aa0:	9c 83       	std	Y+4, r25	; 0x04
    1aa2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa6:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	9e 83       	std	Y+6, r25	; 0x06
    1aac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aae:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab2:	00 97       	sbiw	r24, 0x00	; 0
    1ab4:	69 f7       	brne	.-38     	; 0x1a90 <LCD_Void_Init_8Bits+0x38c>
    1ab6:	14 c0       	rjmp	.+40     	; 0x1ae0 <LCD_Void_Init_8Bits+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aba:	78 85       	ldd	r23, Y+8	; 0x08
    1abc:	89 85       	ldd	r24, Y+9	; 0x09
    1abe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	9e 83       	std	Y+6, r25	; 0x06
    1aca:	8d 83       	std	Y+5, r24	; 0x05
    1acc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ace:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad0:	9a 83       	std	Y+2, r25	; 0x02
    1ad2:	89 83       	std	Y+1, r24	; 0x01
    1ad4:	89 81       	ldd	r24, Y+1	; 0x01
    1ad6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	f1 f7       	brne	.-4      	; 0x1ad8 <LCD_Void_Init_8Bits+0x3d4>
    1adc:	9a 83       	std	Y+2, r25	; 0x02
    1ade:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_Void_Write_Cmd(Init_Entry_Data_Set);  //Entry Mode set
    1ae0:	86 e0       	ldi	r24, 0x06	; 6
    1ae2:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <LCD_Void_Write_Cmd>
}
    1ae6:	e8 96       	adiw	r28, 0x38	; 56
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	f8 94       	cli
    1aec:	de bf       	out	0x3e, r29	; 62
    1aee:	0f be       	out	0x3f, r0	; 63
    1af0:	cd bf       	out	0x3d, r28	; 61
    1af2:	cf 91       	pop	r28
    1af4:	df 91       	pop	r29
    1af6:	08 95       	ret

00001af8 <LCD_Void_Write_Cmd>:


void LCD_Void_Write_Cmd(u8 Copy_u8_Cmd){
    1af8:	df 93       	push	r29
    1afa:	cf 93       	push	r28
    1afc:	0f 92       	push	r0
    1afe:	cd b7       	in	r28, 0x3d	; 61
    1b00:	de b7       	in	r29, 0x3e	; 62
    1b02:	89 83       	std	Y+1, r24	; 0x01
	DIO_U8_Set_Pin_Value(LCD_U8_CTRL_Port, LCD_U8_RS_PIN, LOW);
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	65 e0       	ldi	r22, 0x05	; 5
    1b08:	40 e0       	ldi	r20, 0x00	; 0
    1b0a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_U8_Set_Pin_Value>
	LCD_Void_Write(Copy_u8_Cmd);
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	88 2f       	mov	r24, r24
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <LCD_Void_Write>
}
    1b18:	0f 90       	pop	r0
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	08 95       	ret

00001b20 <LCD_Void_Write_Data>:

void LCD_Void_Write_Data(u8 Copy_u8_Data){
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	0f 92       	push	r0
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
    1b2a:	89 83       	std	Y+1, r24	; 0x01
	DIO_U8_Set_Pin_Value(LCD_U8_CTRL_Port, LCD_U8_RS_PIN, HIGH);
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	65 e0       	ldi	r22, 0x05	; 5
    1b30:	41 e0       	ldi	r20, 0x01	; 1
    1b32:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_U8_Set_Pin_Value>
	LCD_Void_Write(Copy_u8_Data);
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
    1b38:	88 2f       	mov	r24, r24
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <LCD_Void_Write>
}
    1b40:	0f 90       	pop	r0
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	08 95       	ret

00001b48 <LCD_Void_Write>:

void LCD_Void_Write(u8 Copy_U8_Value){
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	2f 97       	sbiw	r28, 0x0f	; 15
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_U8_Set_Pin_Value(LCD_U8_CTRL_Port, LCD_U8_RW_PIN, LOW);
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	66 e0       	ldi	r22, 0x06	; 6
    1b62:	40 e0       	ldi	r20, 0x00	; 0
    1b64:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_U8_Set_Pin_Value>
	DIO_U8_Set_Pin_Value(LCD_U8_DATA_Port, LCD_U8_DATA_PIN_0 ,Get_Bit(Copy_U8_Value,BIT0));
    1b68:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b6a:	98 2f       	mov	r25, r24
    1b6c:	91 70       	andi	r25, 0x01	; 1
    1b6e:	82 e0       	ldi	r24, 0x02	; 2
    1b70:	60 e0       	ldi	r22, 0x00	; 0
    1b72:	49 2f       	mov	r20, r25
    1b74:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_U8_Set_Pin_Value>
	DIO_U8_Set_Pin_Value(LCD_U8_DATA_Port, LCD_U8_DATA_PIN_1 ,Get_Bit(Copy_U8_Value,BIT1));
    1b78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b7a:	86 95       	lsr	r24
    1b7c:	98 2f       	mov	r25, r24
    1b7e:	91 70       	andi	r25, 0x01	; 1
    1b80:	82 e0       	ldi	r24, 0x02	; 2
    1b82:	61 e0       	ldi	r22, 0x01	; 1
    1b84:	49 2f       	mov	r20, r25
    1b86:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_U8_Set_Pin_Value>
	DIO_U8_Set_Pin_Value(LCD_U8_DATA_Port, LCD_U8_DATA_PIN_2 ,Get_Bit(Copy_U8_Value,BIT2));
    1b8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b8c:	86 95       	lsr	r24
    1b8e:	86 95       	lsr	r24
    1b90:	98 2f       	mov	r25, r24
    1b92:	91 70       	andi	r25, 0x01	; 1
    1b94:	82 e0       	ldi	r24, 0x02	; 2
    1b96:	62 e0       	ldi	r22, 0x02	; 2
    1b98:	49 2f       	mov	r20, r25
    1b9a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_U8_Set_Pin_Value>
	DIO_U8_Set_Pin_Value(LCD_U8_DATA_Port, LCD_U8_DATA_PIN_3 ,Get_Bit(Copy_U8_Value,BIT3));
    1b9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ba0:	86 95       	lsr	r24
    1ba2:	86 95       	lsr	r24
    1ba4:	86 95       	lsr	r24
    1ba6:	98 2f       	mov	r25, r24
    1ba8:	91 70       	andi	r25, 0x01	; 1
    1baa:	82 e0       	ldi	r24, 0x02	; 2
    1bac:	63 e0       	ldi	r22, 0x03	; 3
    1bae:	49 2f       	mov	r20, r25
    1bb0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_U8_Set_Pin_Value>
	DIO_U8_Set_Pin_Value(LCD_U8_DATA_Port, LCD_U8_DATA_PIN_4 ,Get_Bit(Copy_U8_Value,BIT4));
    1bb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bb6:	82 95       	swap	r24
    1bb8:	8f 70       	andi	r24, 0x0F	; 15
    1bba:	98 2f       	mov	r25, r24
    1bbc:	91 70       	andi	r25, 0x01	; 1
    1bbe:	82 e0       	ldi	r24, 0x02	; 2
    1bc0:	64 e0       	ldi	r22, 0x04	; 4
    1bc2:	49 2f       	mov	r20, r25
    1bc4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_U8_Set_Pin_Value>
	DIO_U8_Set_Pin_Value(LCD_U8_DATA_Port, LCD_U8_DATA_PIN_5 ,Get_Bit(Copy_U8_Value,BIT5));
    1bc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bca:	82 95       	swap	r24
    1bcc:	86 95       	lsr	r24
    1bce:	87 70       	andi	r24, 0x07	; 7
    1bd0:	98 2f       	mov	r25, r24
    1bd2:	91 70       	andi	r25, 0x01	; 1
    1bd4:	82 e0       	ldi	r24, 0x02	; 2
    1bd6:	65 e0       	ldi	r22, 0x05	; 5
    1bd8:	49 2f       	mov	r20, r25
    1bda:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_U8_Set_Pin_Value>
	DIO_U8_Set_Pin_Value(LCD_U8_DATA_Port, LCD_U8_DATA_PIN_6 ,Get_Bit(Copy_U8_Value,BIT6));
    1bde:	8f 85       	ldd	r24, Y+15	; 0x0f
    1be0:	82 95       	swap	r24
    1be2:	86 95       	lsr	r24
    1be4:	86 95       	lsr	r24
    1be6:	83 70       	andi	r24, 0x03	; 3
    1be8:	98 2f       	mov	r25, r24
    1bea:	91 70       	andi	r25, 0x01	; 1
    1bec:	82 e0       	ldi	r24, 0x02	; 2
    1bee:	66 e0       	ldi	r22, 0x06	; 6
    1bf0:	49 2f       	mov	r20, r25
    1bf2:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_U8_Set_Pin_Value>
	DIO_U8_Set_Pin_Value(LCD_U8_DATA_Port, LCD_U8_DATA_PIN_7 ,Get_Bit(Copy_U8_Value,BIT7));
    1bf6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bf8:	98 2f       	mov	r25, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	99 27       	eor	r25, r25
    1bfe:	99 1f       	adc	r25, r25
    1c00:	82 e0       	ldi	r24, 0x02	; 2
    1c02:	67 e0       	ldi	r22, 0x07	; 7
    1c04:	49 2f       	mov	r20, r25
    1c06:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_U8_Set_Pin_Value>

	DIO_U8_Set_Pin_Value(LCD_U8_CTRL_Port, LCD_U8_ENABLE_PIN, HIGH);
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	67 e0       	ldi	r22, 0x07	; 7
    1c0e:	41 e0       	ldi	r20, 0x01	; 1
    1c10:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_U8_Set_Pin_Value>
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	a0 e8       	ldi	r26, 0x80	; 128
    1c1a:	bf e3       	ldi	r27, 0x3F	; 63
    1c1c:	8b 87       	std	Y+11, r24	; 0x0b
    1c1e:	9c 87       	std	Y+12, r25	; 0x0c
    1c20:	ad 87       	std	Y+13, r26	; 0x0d
    1c22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	4a ef       	ldi	r20, 0xFA	; 250
    1c32:	54 e4       	ldi	r21, 0x44	; 68
    1c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	8f 83       	std	Y+7, r24	; 0x07
    1c3e:	98 87       	std	Y+8, r25	; 0x08
    1c40:	a9 87       	std	Y+9, r26	; 0x09
    1c42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c44:	6f 81       	ldd	r22, Y+7	; 0x07
    1c46:	78 85       	ldd	r23, Y+8	; 0x08
    1c48:	89 85       	ldd	r24, Y+9	; 0x09
    1c4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	40 e8       	ldi	r20, 0x80	; 128
    1c52:	5f e3       	ldi	r21, 0x3F	; 63
    1c54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c58:	88 23       	and	r24, r24
    1c5a:	2c f4       	brge	.+10     	; 0x1c66 <LCD_Void_Write+0x11e>
		__ticks = 1;
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	9e 83       	std	Y+6, r25	; 0x06
    1c62:	8d 83       	std	Y+5, r24	; 0x05
    1c64:	3f c0       	rjmp	.+126    	; 0x1ce4 <LCD_Void_Write+0x19c>
	else if (__tmp > 65535)
    1c66:	6f 81       	ldd	r22, Y+7	; 0x07
    1c68:	78 85       	ldd	r23, Y+8	; 0x08
    1c6a:	89 85       	ldd	r24, Y+9	; 0x09
    1c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	3f ef       	ldi	r19, 0xFF	; 255
    1c72:	4f e7       	ldi	r20, 0x7F	; 127
    1c74:	57 e4       	ldi	r21, 0x47	; 71
    1c76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c7a:	18 16       	cp	r1, r24
    1c7c:	4c f5       	brge	.+82     	; 0x1cd0 <LCD_Void_Write+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	40 e2       	ldi	r20, 0x20	; 32
    1c8c:	51 e4       	ldi	r21, 0x41	; 65
    1c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	bc 01       	movw	r22, r24
    1c98:	cd 01       	movw	r24, r26
    1c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	9e 83       	std	Y+6, r25	; 0x06
    1ca4:	8d 83       	std	Y+5, r24	; 0x05
    1ca6:	0f c0       	rjmp	.+30     	; 0x1cc6 <LCD_Void_Write+0x17e>
    1ca8:	88 ec       	ldi	r24, 0xC8	; 200
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	9c 83       	std	Y+4, r25	; 0x04
    1cae:	8b 83       	std	Y+3, r24	; 0x03
    1cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb4:	01 97       	sbiw	r24, 0x01	; 1
    1cb6:	f1 f7       	brne	.-4      	; 0x1cb4 <LCD_Void_Write+0x16c>
    1cb8:	9c 83       	std	Y+4, r25	; 0x04
    1cba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc0:	01 97       	sbiw	r24, 0x01	; 1
    1cc2:	9e 83       	std	Y+6, r25	; 0x06
    1cc4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cca:	00 97       	sbiw	r24, 0x00	; 0
    1ccc:	69 f7       	brne	.-38     	; 0x1ca8 <LCD_Void_Write+0x160>
    1cce:	14 c0       	rjmp	.+40     	; 0x1cf8 <LCD_Void_Write+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd2:	78 85       	ldd	r23, Y+8	; 0x08
    1cd4:	89 85       	ldd	r24, Y+9	; 0x09
    1cd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	9e 83       	std	Y+6, r25	; 0x06
    1ce2:	8d 83       	std	Y+5, r24	; 0x05
    1ce4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce8:	9a 83       	std	Y+2, r25	; 0x02
    1cea:	89 83       	std	Y+1, r24	; 0x01
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	f1 f7       	brne	.-4      	; 0x1cf0 <LCD_Void_Write+0x1a8>
    1cf4:	9a 83       	std	Y+2, r25	; 0x02
    1cf6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_U8_Set_Pin_Value(LCD_U8_CTRL_Port, LCD_U8_ENABLE_PIN, LOW);
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	67 e0       	ldi	r22, 0x07	; 7
    1cfc:	40 e0       	ldi	r20, 0x00	; 0
    1cfe:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_U8_Set_Pin_Value>

}
    1d02:	2f 96       	adiw	r28, 0x0f	; 15
    1d04:	0f b6       	in	r0, 0x3f	; 63
    1d06:	f8 94       	cli
    1d08:	de bf       	out	0x3e, r29	; 62
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	cd bf       	out	0x3d, r28	; 61
    1d0e:	cf 91       	pop	r28
    1d10:	df 91       	pop	r29
    1d12:	08 95       	ret

00001d14 <LCD_Void_Write_String>:


void LCD_Void_Write_String(u8* Copy_PU8_DATA, u8 Copy_U8_X_Postion, u8 Copy_U8_Y_Postion) {
    1d14:	df 93       	push	r29
    1d16:	cf 93       	push	r28
    1d18:	00 d0       	rcall	.+0      	; 0x1d1a <LCD_Void_Write_String+0x6>
    1d1a:	00 d0       	rcall	.+0      	; 0x1d1c <LCD_Void_Write_String+0x8>
    1d1c:	00 d0       	rcall	.+0      	; 0x1d1e <LCD_Void_Write_String+0xa>
    1d1e:	cd b7       	in	r28, 0x3d	; 61
    1d20:	de b7       	in	r29, 0x3e	; 62
    1d22:	9c 83       	std	Y+4, r25	; 0x04
    1d24:	8b 83       	std	Y+3, r24	; 0x03
    1d26:	6d 83       	std	Y+5, r22	; 0x05
    1d28:	4e 83       	std	Y+6, r20	; 0x06
    u8 Local_U8_DDRAM_Address;
    u8 counter = 0;
    1d2a:	19 82       	std	Y+1, r1	; 0x01
    if (Copy_U8_X_Postion > 15 || Copy_U8_Y_Postion > 1) {
    1d2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2e:	80 31       	cpi	r24, 0x10	; 16
    1d30:	18 f4       	brcc	.+6      	; 0x1d38 <LCD_Void_Write_String+0x24>
    1d32:	8e 81       	ldd	r24, Y+6	; 0x06
    1d34:	82 30       	cpi	r24, 0x02	; 2
    1d36:	38 f0       	brcs	.+14     	; 0x1d46 <LCD_Void_Write_String+0x32>
        LCD_Void_Write_String((u8*)"Invalid entry", 0, 0);
    1d38:	80 e6       	ldi	r24, 0x60	; 96
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	60 e0       	ldi	r22, 0x00	; 0
    1d3e:	40 e0       	ldi	r20, 0x00	; 0
    1d40:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_Void_Write_String>
    1d44:	3a c0       	rjmp	.+116    	; 0x1dba <LCD_Void_Write_String+0xa6>
        return;
    }
    Local_U8_DDRAM_Address = Copy_U8_X_Postion + (Copy_U8_Y_Postion * 64);
    1d46:	8e 81       	ldd	r24, Y+6	; 0x06
    1d48:	88 2f       	mov	r24, r24
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	00 24       	eor	r0, r0
    1d4e:	96 95       	lsr	r25
    1d50:	87 95       	ror	r24
    1d52:	07 94       	ror	r0
    1d54:	96 95       	lsr	r25
    1d56:	87 95       	ror	r24
    1d58:	07 94       	ror	r0
    1d5a:	98 2f       	mov	r25, r24
    1d5c:	80 2d       	mov	r24, r0
    1d5e:	98 2f       	mov	r25, r24
    1d60:	8d 81       	ldd	r24, Y+5	; 0x05
    1d62:	89 0f       	add	r24, r25
    1d64:	8a 83       	std	Y+2, r24	; 0x02
    Local_U8_DDRAM_Address |= DDRAM_ADDRESS;
    1d66:	8a 81       	ldd	r24, Y+2	; 0x02
    1d68:	80 68       	ori	r24, 0x80	; 128
    1d6a:	8a 83       	std	Y+2, r24	; 0x02
    LCD_Void_Write_Cmd(Local_U8_DDRAM_Address);
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <LCD_Void_Write_Cmd>
    1d72:	1e c0       	rjmp	.+60     	; 0x1db0 <LCD_Void_Write_String+0x9c>

    while (*Copy_PU8_DATA != '\0') {
        LCD_Void_Write_Data(*Copy_PU8_DATA);
    1d74:	eb 81       	ldd	r30, Y+3	; 0x03
    1d76:	fc 81       	ldd	r31, Y+4	; 0x04
    1d78:	80 81       	ld	r24, Z
    1d7a:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_Void_Write_Data>
        Copy_PU8_DATA++;
    1d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d80:	9c 81       	ldd	r25, Y+4	; 0x04
    1d82:	01 96       	adiw	r24, 0x01	; 1
    1d84:	9c 83       	std	Y+4, r25	; 0x04
    1d86:	8b 83       	std	Y+3, r24	; 0x03
        counter++;
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	8f 5f       	subi	r24, 0xFF	; 255
    1d8c:	89 83       	std	Y+1, r24	; 0x01
        if (counter == 16) {
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
    1d90:	80 31       	cpi	r24, 0x10	; 16
    1d92:	71 f4       	brne	.+28     	; 0x1db0 <LCD_Void_Write_String+0x9c>
            if (Copy_U8_Y_Postion == 0) {
    1d94:	8e 81       	ldd	r24, Y+6	; 0x06
    1d96:	88 23       	and	r24, r24
    1d98:	19 f4       	brne	.+6      	; 0x1da0 <LCD_Void_Write_String+0x8c>
                Local_U8_DDRAM_Address = Second_Line_Start;
    1d9a:	80 e4       	ldi	r24, 0x40	; 64
    1d9c:	8a 83       	std	Y+2, r24	; 0x02
    1d9e:	02 c0       	rjmp	.+4      	; 0x1da4 <LCD_Void_Write_String+0x90>
            } else {
            	Local_U8_DDRAM_Address = Copy_U8_X_Postion;
    1da0:	8d 81       	ldd	r24, Y+5	; 0x05
    1da2:	8a 83       	std	Y+2, r24	; 0x02
            }
            Local_U8_DDRAM_Address |= DDRAM_ADDRESS;
    1da4:	8a 81       	ldd	r24, Y+2	; 0x02
    1da6:	80 68       	ori	r24, 0x80	; 128
    1da8:	8a 83       	std	Y+2, r24	; 0x02
            LCD_Void_Write_Cmd(Local_U8_DDRAM_Address);
    1daa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dac:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <LCD_Void_Write_Cmd>
    }
    Local_U8_DDRAM_Address = Copy_U8_X_Postion + (Copy_U8_Y_Postion * 64);
    Local_U8_DDRAM_Address |= DDRAM_ADDRESS;
    LCD_Void_Write_Cmd(Local_U8_DDRAM_Address);

    while (*Copy_PU8_DATA != '\0') {
    1db0:	eb 81       	ldd	r30, Y+3	; 0x03
    1db2:	fc 81       	ldd	r31, Y+4	; 0x04
    1db4:	80 81       	ld	r24, Z
    1db6:	88 23       	and	r24, r24
    1db8:	e9 f6       	brne	.-70     	; 0x1d74 <LCD_Void_Write_String+0x60>
            }
            Local_U8_DDRAM_Address |= DDRAM_ADDRESS;
            LCD_Void_Write_Cmd(Local_U8_DDRAM_Address);
        }
    }
}
    1dba:	26 96       	adiw	r28, 0x06	; 6
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	f8 94       	cli
    1dc0:	de bf       	out	0x3e, r29	; 62
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	cd bf       	out	0x3d, r28	; 61
    1dc6:	cf 91       	pop	r28
    1dc8:	df 91       	pop	r29
    1dca:	08 95       	ret

00001dcc <LCD_Void_Write_Number>:



void LCD_Void_Write_Number(u32 Copy_U32_Number, u8 Copy_U8_X_Postion, u8 Copy_U8_Y_Postion){
    1dcc:	df 93       	push	r29
    1dce:	cf 93       	push	r28
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
    1dd4:	a1 97       	sbiw	r28, 0x21	; 33
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	f8 94       	cli
    1dda:	de bf       	out	0x3e, r29	; 62
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	cd bf       	out	0x3d, r28	; 61
    1de0:	6c 8f       	std	Y+28, r22	; 0x1c
    1de2:	7d 8f       	std	Y+29, r23	; 0x1d
    1de4:	8e 8f       	std	Y+30, r24	; 0x1e
    1de6:	9f 8f       	std	Y+31, r25	; 0x1f
    1de8:	48 a3       	std	Y+32, r20	; 0x20
    1dea:	29 a3       	std	Y+33, r18	; 0x21
    u8 Copy_U8_Reminder;
    u8 Copy_U8_arr[20];
    u8 i=0;
    1dec:	1e 82       	std	Y+6, r1	; 0x06
    u8 Local_U8_DDRAM_Address;
    u8 counter = 0; // Initialize counter variable to 0
    1dee:	1c 82       	std	Y+4, r1	; 0x04

    if (Copy_U8_X_Postion > 15 || Copy_U8_Y_Postion > 1) {
    1df0:	88 a1       	ldd	r24, Y+32	; 0x20
    1df2:	80 31       	cpi	r24, 0x10	; 16
    1df4:	18 f4       	brcc	.+6      	; 0x1dfc <LCD_Void_Write_Number+0x30>
    1df6:	89 a1       	ldd	r24, Y+33	; 0x21
    1df8:	82 30       	cpi	r24, 0x02	; 2
    1dfa:	38 f0       	brcs	.+14     	; 0x1e0a <LCD_Void_Write_Number+0x3e>
        LCD_Void_Write_String((u8*)"Invalid entry", 0, 0);
    1dfc:	80 e6       	ldi	r24, 0x60	; 96
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	60 e0       	ldi	r22, 0x00	; 0
    1e02:	40 e0       	ldi	r20, 0x00	; 0
    1e04:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_Void_Write_String>
    1e08:	f2 c0       	rjmp	.+484    	; 0x1fee <LCD_Void_Write_Number+0x222>
        return;
    }

    Local_U8_DDRAM_Address = Copy_U8_X_Postion + (Copy_U8_Y_Postion * 64);
    1e0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e0c:	88 2f       	mov	r24, r24
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	00 24       	eor	r0, r0
    1e12:	96 95       	lsr	r25
    1e14:	87 95       	ror	r24
    1e16:	07 94       	ror	r0
    1e18:	96 95       	lsr	r25
    1e1a:	87 95       	ror	r24
    1e1c:	07 94       	ror	r0
    1e1e:	98 2f       	mov	r25, r24
    1e20:	80 2d       	mov	r24, r0
    1e22:	98 2f       	mov	r25, r24
    1e24:	88 a1       	ldd	r24, Y+32	; 0x20
    1e26:	89 0f       	add	r24, r25
    1e28:	8d 83       	std	Y+5, r24	; 0x05
    Local_U8_DDRAM_Address |= DDRAM_ADDRESS;
    1e2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2c:	80 68       	ori	r24, 0x80	; 128
    1e2e:	8d 83       	std	Y+5, r24	; 0x05
    LCD_Void_Write_Cmd(Local_U8_DDRAM_Address);
    1e30:	8d 81       	ldd	r24, Y+5	; 0x05
    1e32:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <LCD_Void_Write_Cmd>

    if (Copy_U32_Number == 0) {
    1e36:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e38:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e3a:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1e3c:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1e3e:	00 97       	sbiw	r24, 0x00	; 0
    1e40:	a1 05       	cpc	r26, r1
    1e42:	b1 05       	cpc	r27, r1
    1e44:	09 f0       	breq	.+2      	; 0x1e48 <LCD_Void_Write_Number+0x7c>
    1e46:	44 c0       	rjmp	.+136    	; 0x1ed0 <LCD_Void_Write_Number+0x104>
        Copy_U8_arr[i] = '0';
    1e48:	8e 81       	ldd	r24, Y+6	; 0x06
    1e4a:	28 2f       	mov	r18, r24
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	ce 01       	movw	r24, r28
    1e50:	08 96       	adiw	r24, 0x08	; 8
    1e52:	fc 01       	movw	r30, r24
    1e54:	e2 0f       	add	r30, r18
    1e56:	f3 1f       	adc	r31, r19
    1e58:	80 e3       	ldi	r24, 0x30	; 48
    1e5a:	80 83       	st	Z, r24
        i++;
    1e5c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e5e:	8f 5f       	subi	r24, 0xFF	; 255
    1e60:	8e 83       	std	Y+6, r24	; 0x06
        counter++;
    1e62:	8c 81       	ldd	r24, Y+4	; 0x04
    1e64:	8f 5f       	subi	r24, 0xFF	; 255
    1e66:	8c 83       	std	Y+4, r24	; 0x04
    1e68:	3b c0       	rjmp	.+118    	; 0x1ee0 <LCD_Void_Write_Number+0x114>
    } else {
        while(Copy_U32_Number != 0){
            Copy_U8_Reminder = Copy_U32_Number % 10;
    1e6a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e6c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e6e:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1e70:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1e72:	2a e0       	ldi	r18, 0x0A	; 10
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	40 e0       	ldi	r20, 0x00	; 0
    1e78:	50 e0       	ldi	r21, 0x00	; 0
    1e7a:	bc 01       	movw	r22, r24
    1e7c:	cd 01       	movw	r24, r26
    1e7e:	0e 94 b1 11 	call	0x2362	; 0x2362 <__udivmodsi4>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	8f 83       	std	Y+7, r24	; 0x07
            Copy_U8_arr[i] = Copy_U8_Reminder +'0';
    1e88:	8e 81       	ldd	r24, Y+6	; 0x06
    1e8a:	28 2f       	mov	r18, r24
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	8f 81       	ldd	r24, Y+7	; 0x07
    1e90:	48 2f       	mov	r20, r24
    1e92:	40 5d       	subi	r20, 0xD0	; 208
    1e94:	ce 01       	movw	r24, r28
    1e96:	08 96       	adiw	r24, 0x08	; 8
    1e98:	fc 01       	movw	r30, r24
    1e9a:	e2 0f       	add	r30, r18
    1e9c:	f3 1f       	adc	r31, r19
    1e9e:	40 83       	st	Z, r20
            i++;
    1ea0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ea2:	8f 5f       	subi	r24, 0xFF	; 255
    1ea4:	8e 83       	std	Y+6, r24	; 0x06
            Copy_U32_Number = Copy_U32_Number / 10;
    1ea6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ea8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1eaa:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1eac:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1eae:	2a e0       	ldi	r18, 0x0A	; 10
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	40 e0       	ldi	r20, 0x00	; 0
    1eb4:	50 e0       	ldi	r21, 0x00	; 0
    1eb6:	bc 01       	movw	r22, r24
    1eb8:	cd 01       	movw	r24, r26
    1eba:	0e 94 b1 11 	call	0x2362	; 0x2362 <__udivmodsi4>
    1ebe:	da 01       	movw	r26, r20
    1ec0:	c9 01       	movw	r24, r18
    1ec2:	8c 8f       	std	Y+28, r24	; 0x1c
    1ec4:	9d 8f       	std	Y+29, r25	; 0x1d
    1ec6:	ae 8f       	std	Y+30, r26	; 0x1e
    1ec8:	bf 8f       	std	Y+31, r27	; 0x1f
            counter++;
    1eca:	8c 81       	ldd	r24, Y+4	; 0x04
    1ecc:	8f 5f       	subi	r24, 0xFF	; 255
    1ece:	8c 83       	std	Y+4, r24	; 0x04
    if (Copy_U32_Number == 0) {
        Copy_U8_arr[i] = '0';
        i++;
        counter++;
    } else {
        while(Copy_U32_Number != 0){
    1ed0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ed2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ed4:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1ed6:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1ed8:	00 97       	sbiw	r24, 0x00	; 0
    1eda:	a1 05       	cpc	r26, r1
    1edc:	b1 05       	cpc	r27, r1
    1ede:	29 f6       	brne	.-118    	; 0x1e6a <LCD_Void_Write_Number+0x9e>
            i++;
            Copy_U32_Number = Copy_U32_Number / 10;
            counter++;
        }
    }
    Copy_U8_arr[i] = '\0';
    1ee0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ee2:	28 2f       	mov	r18, r24
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	ce 01       	movw	r24, r28
    1ee8:	08 96       	adiw	r24, 0x08	; 8
    1eea:	fc 01       	movw	r30, r24
    1eec:	e2 0f       	add	r30, r18
    1eee:	f3 1f       	adc	r31, r19
    1ef0:	10 82       	st	Z, r1

    // Reverse the order of the digits in the array

    for (u8 j = 0; j < i/2; j++) {
    1ef2:	1b 82       	std	Y+3, r1	; 0x03
    1ef4:	39 c0       	rjmp	.+114    	; 0x1f68 <LCD_Void_Write_Number+0x19c>
        u8 temp = Copy_U8_arr[j];
    1ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef8:	28 2f       	mov	r18, r24
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	ce 01       	movw	r24, r28
    1efe:	08 96       	adiw	r24, 0x08	; 8
    1f00:	fc 01       	movw	r30, r24
    1f02:	e2 0f       	add	r30, r18
    1f04:	f3 1f       	adc	r31, r19
    1f06:	80 81       	ld	r24, Z
    1f08:	8a 83       	std	Y+2, r24	; 0x02
        Copy_U8_arr[j] = Copy_U8_arr[i-1-j];
    1f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0c:	48 2f       	mov	r20, r24
    1f0e:	50 e0       	ldi	r21, 0x00	; 0
    1f10:	8e 81       	ldd	r24, Y+6	; 0x06
    1f12:	88 2f       	mov	r24, r24
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	9c 01       	movw	r18, r24
    1f18:	21 50       	subi	r18, 0x01	; 1
    1f1a:	30 40       	sbci	r19, 0x00	; 0
    1f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1e:	88 2f       	mov	r24, r24
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	28 1b       	sub	r18, r24
    1f24:	39 0b       	sbc	r19, r25
    1f26:	ce 01       	movw	r24, r28
    1f28:	08 96       	adiw	r24, 0x08	; 8
    1f2a:	fc 01       	movw	r30, r24
    1f2c:	e2 0f       	add	r30, r18
    1f2e:	f3 1f       	adc	r31, r19
    1f30:	20 81       	ld	r18, Z
    1f32:	ce 01       	movw	r24, r28
    1f34:	08 96       	adiw	r24, 0x08	; 8
    1f36:	fc 01       	movw	r30, r24
    1f38:	e4 0f       	add	r30, r20
    1f3a:	f5 1f       	adc	r31, r21
    1f3c:	20 83       	st	Z, r18
        Copy_U8_arr[i-1-j] = temp;
    1f3e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f40:	88 2f       	mov	r24, r24
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	9c 01       	movw	r18, r24
    1f46:	21 50       	subi	r18, 0x01	; 1
    1f48:	30 40       	sbci	r19, 0x00	; 0
    1f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4c:	88 2f       	mov	r24, r24
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	28 1b       	sub	r18, r24
    1f52:	39 0b       	sbc	r19, r25
    1f54:	ce 01       	movw	r24, r28
    1f56:	08 96       	adiw	r24, 0x08	; 8
    1f58:	fc 01       	movw	r30, r24
    1f5a:	e2 0f       	add	r30, r18
    1f5c:	f3 1f       	adc	r31, r19
    1f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f60:	80 83       	st	Z, r24
    }
    Copy_U8_arr[i] = '\0';

    // Reverse the order of the digits in the array

    for (u8 j = 0; j < i/2; j++) {
    1f62:	8b 81       	ldd	r24, Y+3	; 0x03
    1f64:	8f 5f       	subi	r24, 0xFF	; 255
    1f66:	8b 83       	std	Y+3, r24	; 0x03
    1f68:	8e 81       	ldd	r24, Y+6	; 0x06
    1f6a:	98 2f       	mov	r25, r24
    1f6c:	96 95       	lsr	r25
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	89 17       	cp	r24, r25
    1f72:	08 f2       	brcs	.-126    	; 0x1ef6 <LCD_Void_Write_Number+0x12a>
        Copy_U8_arr[i-1-j] = temp;
    }


    // Print the array elements and check for line break
    for(u8 j = 0; Copy_U8_arr[j] != '\0'; j++){
    1f74:	19 82       	std	Y+1, r1	; 0x01
    1f76:	30 c0       	rjmp	.+96     	; 0x1fd8 <LCD_Void_Write_Number+0x20c>
        LCD_Void_Write_Data(Copy_U8_arr[j]);
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	28 2f       	mov	r18, r24
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	ce 01       	movw	r24, r28
    1f80:	08 96       	adiw	r24, 0x08	; 8
    1f82:	fc 01       	movw	r30, r24
    1f84:	e2 0f       	add	r30, r18
    1f86:	f3 1f       	adc	r31, r19
    1f88:	80 81       	ld	r24, Z
    1f8a:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_Void_Write_Data>
        counter++;
    1f8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f90:	8f 5f       	subi	r24, 0xFF	; 255
    1f92:	8c 83       	std	Y+4, r24	; 0x04
        if (counter == 16) {
    1f94:	8c 81       	ldd	r24, Y+4	; 0x04
    1f96:	80 31       	cpi	r24, 0x10	; 16
    1f98:	e1 f4       	brne	.+56     	; 0x1fd2 <LCD_Void_Write_Number+0x206>
            if (Copy_U8_Y_Postion == 0) {
    1f9a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f9c:	88 23       	and	r24, r24
    1f9e:	19 f4       	brne	.+6      	; 0x1fa6 <LCD_Void_Write_Number+0x1da>
                Local_U8_DDRAM_Address = Second_Line_Start;
    1fa0:	80 e4       	ldi	r24, 0x40	; 64
    1fa2:	8d 83       	std	Y+5, r24	; 0x05
    1fa4:	10 c0       	rjmp	.+32     	; 0x1fc6 <LCD_Void_Write_Number+0x1fa>
            } else {
            	Local_U8_DDRAM_Address = Copy_U8_X_Postion + (Copy_U8_Y_Postion * 64);
    1fa6:	89 a1       	ldd	r24, Y+33	; 0x21
    1fa8:	88 2f       	mov	r24, r24
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	00 24       	eor	r0, r0
    1fae:	96 95       	lsr	r25
    1fb0:	87 95       	ror	r24
    1fb2:	07 94       	ror	r0
    1fb4:	96 95       	lsr	r25
    1fb6:	87 95       	ror	r24
    1fb8:	07 94       	ror	r0
    1fba:	98 2f       	mov	r25, r24
    1fbc:	80 2d       	mov	r24, r0
    1fbe:	98 2f       	mov	r25, r24
    1fc0:	88 a1       	ldd	r24, Y+32	; 0x20
    1fc2:	89 0f       	add	r24, r25
    1fc4:	8d 83       	std	Y+5, r24	; 0x05
            }
            Local_U8_DDRAM_Address |= DDRAM_ADDRESS;
    1fc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc8:	80 68       	ori	r24, 0x80	; 128
    1fca:	8d 83       	std	Y+5, r24	; 0x05
            LCD_Void_Write_Cmd(Local_U8_DDRAM_Address);
    1fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fce:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <LCD_Void_Write_Cmd>
        Copy_U8_arr[i-1-j] = temp;
    }


    // Print the array elements and check for line break
    for(u8 j = 0; Copy_U8_arr[j] != '\0'; j++){
    1fd2:	89 81       	ldd	r24, Y+1	; 0x01
    1fd4:	8f 5f       	subi	r24, 0xFF	; 255
    1fd6:	89 83       	std	Y+1, r24	; 0x01
    1fd8:	89 81       	ldd	r24, Y+1	; 0x01
    1fda:	28 2f       	mov	r18, r24
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	ce 01       	movw	r24, r28
    1fe0:	08 96       	adiw	r24, 0x08	; 8
    1fe2:	fc 01       	movw	r30, r24
    1fe4:	e2 0f       	add	r30, r18
    1fe6:	f3 1f       	adc	r31, r19
    1fe8:	80 81       	ld	r24, Z
    1fea:	88 23       	and	r24, r24
    1fec:	29 f6       	brne	.-118    	; 0x1f78 <LCD_Void_Write_Number+0x1ac>
            }
            Local_U8_DDRAM_Address |= DDRAM_ADDRESS;
            LCD_Void_Write_Cmd(Local_U8_DDRAM_Address);
        }
    }
}
    1fee:	a1 96       	adiw	r28, 0x21	; 33
    1ff0:	0f b6       	in	r0, 0x3f	; 63
    1ff2:	f8 94       	cli
    1ff4:	de bf       	out	0x3e, r29	; 62
    1ff6:	0f be       	out	0x3f, r0	; 63
    1ff8:	cd bf       	out	0x3d, r28	; 61
    1ffa:	cf 91       	pop	r28
    1ffc:	df 91       	pop	r29
    1ffe:	08 95       	ret

00002000 <LCD_ClearDisplay>:

void LCD_ClearDisplay(){
    2000:	df 93       	push	r29
    2002:	cf 93       	push	r28
    2004:	cd b7       	in	r28, 0x3d	; 61
    2006:	de b7       	in	r29, 0x3e	; 62
    2008:	2e 97       	sbiw	r28, 0x0e	; 14
    200a:	0f b6       	in	r0, 0x3f	; 63
    200c:	f8 94       	cli
    200e:	de bf       	out	0x3e, r29	; 62
    2010:	0f be       	out	0x3f, r0	; 63
    2012:	cd bf       	out	0x3d, r28	; 61
	LCD_Void_Write_Cmd(Init_Display_Clear);  //display clear
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <LCD_Void_Write_Cmd>
    201a:	80 e0       	ldi	r24, 0x00	; 0
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	a0 e0       	ldi	r26, 0x00	; 0
    2020:	b0 e4       	ldi	r27, 0x40	; 64
    2022:	8b 87       	std	Y+11, r24	; 0x0b
    2024:	9c 87       	std	Y+12, r25	; 0x0c
    2026:	ad 87       	std	Y+13, r26	; 0x0d
    2028:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    202a:	6b 85       	ldd	r22, Y+11	; 0x0b
    202c:	7c 85       	ldd	r23, Y+12	; 0x0c
    202e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2030:	9e 85       	ldd	r25, Y+14	; 0x0e
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	4a ef       	ldi	r20, 0xFA	; 250
    2038:	54 e4       	ldi	r21, 0x44	; 68
    203a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	8f 83       	std	Y+7, r24	; 0x07
    2044:	98 87       	std	Y+8, r25	; 0x08
    2046:	a9 87       	std	Y+9, r26	; 0x09
    2048:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    204a:	6f 81       	ldd	r22, Y+7	; 0x07
    204c:	78 85       	ldd	r23, Y+8	; 0x08
    204e:	89 85       	ldd	r24, Y+9	; 0x09
    2050:	9a 85       	ldd	r25, Y+10	; 0x0a
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	40 e8       	ldi	r20, 0x80	; 128
    2058:	5f e3       	ldi	r21, 0x3F	; 63
    205a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    205e:	88 23       	and	r24, r24
    2060:	2c f4       	brge	.+10     	; 0x206c <LCD_ClearDisplay+0x6c>
		__ticks = 1;
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	9e 83       	std	Y+6, r25	; 0x06
    2068:	8d 83       	std	Y+5, r24	; 0x05
    206a:	3f c0       	rjmp	.+126    	; 0x20ea <LCD_ClearDisplay+0xea>
	else if (__tmp > 65535)
    206c:	6f 81       	ldd	r22, Y+7	; 0x07
    206e:	78 85       	ldd	r23, Y+8	; 0x08
    2070:	89 85       	ldd	r24, Y+9	; 0x09
    2072:	9a 85       	ldd	r25, Y+10	; 0x0a
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	3f ef       	ldi	r19, 0xFF	; 255
    2078:	4f e7       	ldi	r20, 0x7F	; 127
    207a:	57 e4       	ldi	r21, 0x47	; 71
    207c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2080:	18 16       	cp	r1, r24
    2082:	4c f5       	brge	.+82     	; 0x20d6 <LCD_ClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2084:	6b 85       	ldd	r22, Y+11	; 0x0b
    2086:	7c 85       	ldd	r23, Y+12	; 0x0c
    2088:	8d 85       	ldd	r24, Y+13	; 0x0d
    208a:	9e 85       	ldd	r25, Y+14	; 0x0e
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	40 e2       	ldi	r20, 0x20	; 32
    2092:	51 e4       	ldi	r21, 0x41	; 65
    2094:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	bc 01       	movw	r22, r24
    209e:	cd 01       	movw	r24, r26
    20a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	9e 83       	std	Y+6, r25	; 0x06
    20aa:	8d 83       	std	Y+5, r24	; 0x05
    20ac:	0f c0       	rjmp	.+30     	; 0x20cc <LCD_ClearDisplay+0xcc>
    20ae:	88 ec       	ldi	r24, 0xC8	; 200
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	9c 83       	std	Y+4, r25	; 0x04
    20b4:	8b 83       	std	Y+3, r24	; 0x03
    20b6:	8b 81       	ldd	r24, Y+3	; 0x03
    20b8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ba:	01 97       	sbiw	r24, 0x01	; 1
    20bc:	f1 f7       	brne	.-4      	; 0x20ba <LCD_ClearDisplay+0xba>
    20be:	9c 83       	std	Y+4, r25	; 0x04
    20c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c2:	8d 81       	ldd	r24, Y+5	; 0x05
    20c4:	9e 81       	ldd	r25, Y+6	; 0x06
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	9e 83       	std	Y+6, r25	; 0x06
    20ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20cc:	8d 81       	ldd	r24, Y+5	; 0x05
    20ce:	9e 81       	ldd	r25, Y+6	; 0x06
    20d0:	00 97       	sbiw	r24, 0x00	; 0
    20d2:	69 f7       	brne	.-38     	; 0x20ae <LCD_ClearDisplay+0xae>
    20d4:	14 c0       	rjmp	.+40     	; 0x20fe <LCD_ClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d6:	6f 81       	ldd	r22, Y+7	; 0x07
    20d8:	78 85       	ldd	r23, Y+8	; 0x08
    20da:	89 85       	ldd	r24, Y+9	; 0x09
    20dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	9e 83       	std	Y+6, r25	; 0x06
    20e8:	8d 83       	std	Y+5, r24	; 0x05
    20ea:	8d 81       	ldd	r24, Y+5	; 0x05
    20ec:	9e 81       	ldd	r25, Y+6	; 0x06
    20ee:	9a 83       	std	Y+2, r25	; 0x02
    20f0:	89 83       	std	Y+1, r24	; 0x01
    20f2:	89 81       	ldd	r24, Y+1	; 0x01
    20f4:	9a 81       	ldd	r25, Y+2	; 0x02
    20f6:	01 97       	sbiw	r24, 0x01	; 1
    20f8:	f1 f7       	brne	.-4      	; 0x20f6 <LCD_ClearDisplay+0xf6>
    20fa:	9a 83       	std	Y+2, r25	; 0x02
    20fc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    20fe:	2e 96       	adiw	r28, 0x0e	; 14
    2100:	0f b6       	in	r0, 0x3f	; 63
    2102:	f8 94       	cli
    2104:	de bf       	out	0x3e, r29	; 62
    2106:	0f be       	out	0x3f, r0	; 63
    2108:	cd bf       	out	0x3d, r28	; 61
    210a:	cf 91       	pop	r28
    210c:	df 91       	pop	r29
    210e:	08 95       	ret

00002110 <Calculate_String_Length>:

u8 Calculate_String_Length(u8* Copy_PU8_DATA){
    2110:	df 93       	push	r29
    2112:	cf 93       	push	r28
    2114:	00 d0       	rcall	.+0      	; 0x2116 <Calculate_String_Length+0x6>
    2116:	0f 92       	push	r0
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
    211c:	9b 83       	std	Y+3, r25	; 0x03
    211e:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    2120:	19 82       	std	Y+1, r1	; 0x01
    2122:	08 c0       	rjmp	.+16     	; 0x2134 <Calculate_String_Length+0x24>
	while(*Copy_PU8_DATA != '\0'){
		i++;
    2124:	89 81       	ldd	r24, Y+1	; 0x01
    2126:	8f 5f       	subi	r24, 0xFF	; 255
    2128:	89 83       	std	Y+1, r24	; 0x01
		Copy_PU8_DATA++;
    212a:	8a 81       	ldd	r24, Y+2	; 0x02
    212c:	9b 81       	ldd	r25, Y+3	; 0x03
    212e:	01 96       	adiw	r24, 0x01	; 1
    2130:	9b 83       	std	Y+3, r25	; 0x03
    2132:	8a 83       	std	Y+2, r24	; 0x02
	_delay_ms(2);
}

u8 Calculate_String_Length(u8* Copy_PU8_DATA){
	u8 i=0;
	while(*Copy_PU8_DATA != '\0'){
    2134:	ea 81       	ldd	r30, Y+2	; 0x02
    2136:	fb 81       	ldd	r31, Y+3	; 0x03
    2138:	80 81       	ld	r24, Z
    213a:	88 23       	and	r24, r24
    213c:	99 f7       	brne	.-26     	; 0x2124 <Calculate_String_Length+0x14>
		i++;
		Copy_PU8_DATA++;

	}
	return i;
    213e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2140:	0f 90       	pop	r0
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	cf 91       	pop	r28
    2148:	df 91       	pop	r29
    214a:	08 95       	ret

0000214c <reverse>:


void reverse(u8 arr[], u8 lenght){
    214c:	df 93       	push	r29
    214e:	cf 93       	push	r28
    2150:	00 d0       	rcall	.+0      	; 0x2152 <reverse+0x6>
    2152:	00 d0       	rcall	.+0      	; 0x2154 <reverse+0x8>
    2154:	00 d0       	rcall	.+0      	; 0x2156 <reverse+0xa>
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62
    215a:	9d 83       	std	Y+5, r25	; 0x05
    215c:	8c 83       	std	Y+4, r24	; 0x04
    215e:	6e 83       	std	Y+6, r22	; 0x06
	u8 start=0;
    2160:	1b 82       	std	Y+3, r1	; 0x03
	u8 end = lenght -1;
    2162:	8e 81       	ldd	r24, Y+6	; 0x06
    2164:	81 50       	subi	r24, 0x01	; 1
    2166:	8a 83       	std	Y+2, r24	; 0x02
    2168:	2c c0       	rjmp	.+88     	; 0x21c2 <reverse+0x76>

	while(start< end){

		u8 temp = arr[start];
    216a:	8b 81       	ldd	r24, Y+3	; 0x03
    216c:	28 2f       	mov	r18, r24
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	8c 81       	ldd	r24, Y+4	; 0x04
    2172:	9d 81       	ldd	r25, Y+5	; 0x05
    2174:	fc 01       	movw	r30, r24
    2176:	e2 0f       	add	r30, r18
    2178:	f3 1f       	adc	r31, r19
    217a:	80 81       	ld	r24, Z
    217c:	89 83       	std	Y+1, r24	; 0x01
		arr[start] = arr[end];
    217e:	8b 81       	ldd	r24, Y+3	; 0x03
    2180:	28 2f       	mov	r18, r24
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	8c 81       	ldd	r24, Y+4	; 0x04
    2186:	9d 81       	ldd	r25, Y+5	; 0x05
    2188:	dc 01       	movw	r26, r24
    218a:	a2 0f       	add	r26, r18
    218c:	b3 1f       	adc	r27, r19
    218e:	8a 81       	ldd	r24, Y+2	; 0x02
    2190:	28 2f       	mov	r18, r24
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	8c 81       	ldd	r24, Y+4	; 0x04
    2196:	9d 81       	ldd	r25, Y+5	; 0x05
    2198:	fc 01       	movw	r30, r24
    219a:	e2 0f       	add	r30, r18
    219c:	f3 1f       	adc	r31, r19
    219e:	80 81       	ld	r24, Z
    21a0:	8c 93       	st	X, r24
		arr[end] = temp;
    21a2:	8a 81       	ldd	r24, Y+2	; 0x02
    21a4:	28 2f       	mov	r18, r24
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	8c 81       	ldd	r24, Y+4	; 0x04
    21aa:	9d 81       	ldd	r25, Y+5	; 0x05
    21ac:	fc 01       	movw	r30, r24
    21ae:	e2 0f       	add	r30, r18
    21b0:	f3 1f       	adc	r31, r19
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	80 83       	st	Z, r24
		start++;
    21b6:	8b 81       	ldd	r24, Y+3	; 0x03
    21b8:	8f 5f       	subi	r24, 0xFF	; 255
    21ba:	8b 83       	std	Y+3, r24	; 0x03
		end++;
    21bc:	8a 81       	ldd	r24, Y+2	; 0x02
    21be:	8f 5f       	subi	r24, 0xFF	; 255
    21c0:	8a 83       	std	Y+2, r24	; 0x02

void reverse(u8 arr[], u8 lenght){
	u8 start=0;
	u8 end = lenght -1;

	while(start< end){
    21c2:	9b 81       	ldd	r25, Y+3	; 0x03
    21c4:	8a 81       	ldd	r24, Y+2	; 0x02
    21c6:	98 17       	cp	r25, r24
    21c8:	80 f2       	brcs	.-96     	; 0x216a <reverse+0x1e>
		arr[end] = temp;
		start++;
		end++;

	}
}
    21ca:	26 96       	adiw	r28, 0x06	; 6
    21cc:	0f b6       	in	r0, 0x3f	; 63
    21ce:	f8 94       	cli
    21d0:	de bf       	out	0x3e, r29	; 62
    21d2:	0f be       	out	0x3f, r0	; 63
    21d4:	cd bf       	out	0x3d, r28	; 61
    21d6:	cf 91       	pop	r28
    21d8:	df 91       	pop	r29
    21da:	08 95       	ret

000021dc <Turn_onLed>:
u8 ledState = 0;
u8 arr[10]={0b11000000,0b11111001,0b10100100,0b10110000,0b10011001,0b10010010,0b10000010,0b11111000,0b10000000,0b10010000};
u8 currentNumber=0;


void Turn_onLed(void) {
    21dc:	df 93       	push	r29
    21de:	cf 93       	push	r28
    21e0:	0f 92       	push	r0
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
    ledState = !ledState;
    21e6:	80 91 94 00 	lds	r24, 0x0094
    21ea:	19 82       	std	Y+1, r1	; 0x01
    21ec:	88 23       	and	r24, r24
    21ee:	11 f4       	brne	.+4      	; 0x21f4 <Turn_onLed+0x18>
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	89 83       	std	Y+1, r24	; 0x01
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
    21f6:	80 93 94 00 	sts	0x0094, r24
    if (ledState==1){
    21fa:	80 91 94 00 	lds	r24, 0x0094
    21fe:	81 30       	cpi	r24, 0x01	; 1
    2200:	31 f4       	brne	.+12     	; 0x220e <Turn_onLed+0x32>
    	DIO_U8_Set_Pin_Value(GROUP_D, PIN0, HIGH);
    2202:	83 e0       	ldi	r24, 0x03	; 3
    2204:	60 e0       	ldi	r22, 0x00	; 0
    2206:	41 e0       	ldi	r20, 0x01	; 1
    2208:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_U8_Set_Pin_Value>
    220c:	05 c0       	rjmp	.+10     	; 0x2218 <Turn_onLed+0x3c>
    }
    else{
    	DIO_U8_Set_Pin_Value(GROUP_D, PIN0, LOW);
    220e:	83 e0       	ldi	r24, 0x03	; 3
    2210:	60 e0       	ldi	r22, 0x00	; 0
    2212:	40 e0       	ldi	r20, 0x00	; 0
    2214:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_U8_Set_Pin_Value>
    }

}
    2218:	0f 90       	pop	r0
    221a:	cf 91       	pop	r28
    221c:	df 91       	pop	r29
    221e:	08 95       	ret

00002220 <Turn_onLCD>:

void Turn_onLCD(void){
    2220:	df 93       	push	r29
    2222:	cf 93       	push	r28
    2224:	0f 92       	push	r0
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
    ledState = !ledState;
    222a:	80 91 94 00 	lds	r24, 0x0094
    222e:	19 82       	std	Y+1, r1	; 0x01
    2230:	88 23       	and	r24, r24
    2232:	11 f4       	brne	.+4      	; 0x2238 <Turn_onLCD+0x18>
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	89 83       	std	Y+1, r24	; 0x01
    2238:	89 81       	ldd	r24, Y+1	; 0x01
    223a:	80 93 94 00 	sts	0x0094, r24
    if (ledState==1){
    223e:	80 91 94 00 	lds	r24, 0x0094
    2242:	81 30       	cpi	r24, 0x01	; 1
    2244:	49 f4       	brne	.+18     	; 0x2258 <Turn_onLCD+0x38>
        LCD_ClearDisplay();
    2246:	0e 94 00 10 	call	0x2000	; 0x2000 <LCD_ClearDisplay>
    	LCD_Void_Write_String((u8*)"Pressed",0,0);
    224a:	8e e6       	ldi	r24, 0x6E	; 110
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	60 e0       	ldi	r22, 0x00	; 0
    2250:	40 e0       	ldi	r20, 0x00	; 0
    2252:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_Void_Write_String>
    2256:	08 c0       	rjmp	.+16     	; 0x2268 <Turn_onLCD+0x48>
    }
    else{
        LCD_ClearDisplay();
    2258:	0e 94 00 10 	call	0x2000	; 0x2000 <LCD_ClearDisplay>
    	LCD_Void_Write_String((u8*)"NOT Pressed",0,0);
    225c:	86 e7       	ldi	r24, 0x76	; 118
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	60 e0       	ldi	r22, 0x00	; 0
    2262:	40 e0       	ldi	r20, 0x00	; 0
    2264:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_Void_Write_String>
    }
}
    2268:	0f 90       	pop	r0
    226a:	cf 91       	pop	r28
    226c:	df 91       	pop	r29
    226e:	08 95       	ret

00002270 <Turn_on7SEG>:

void Turn_on7SEG(void) {
    2270:	df 93       	push	r29
    2272:	cf 93       	push	r28
    2274:	cd b7       	in	r28, 0x3d	; 61
    2276:	de b7       	in	r29, 0x3e	; 62
    currentNumber++;
    2278:	80 91 95 00 	lds	r24, 0x0095
    227c:	8f 5f       	subi	r24, 0xFF	; 255
    227e:	80 93 95 00 	sts	0x0095, r24
    if (currentNumber >= 10) {
    2282:	80 91 95 00 	lds	r24, 0x0095
    2286:	8a 30       	cpi	r24, 0x0A	; 10
    2288:	10 f0       	brcs	.+4      	; 0x228e <Turn_on7SEG+0x1e>
        currentNumber = 0;
    228a:	10 92 95 00 	sts	0x0095, r1
    }

    DIO_U8_Set_Port_Value(GROUP_C, arr[currentNumber]);
    228e:	80 91 95 00 	lds	r24, 0x0095
    2292:	88 2f       	mov	r24, r24
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	fc 01       	movw	r30, r24
    2298:	e6 57       	subi	r30, 0x76	; 118
    229a:	ff 4f       	sbci	r31, 0xFF	; 255
    229c:	90 81       	ld	r25, Z
    229e:	82 e0       	ldi	r24, 0x02	; 2
    22a0:	69 2f       	mov	r22, r25
    22a2:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_U8_Set_Port_Value>
}
    22a6:	cf 91       	pop	r28
    22a8:	df 91       	pop	r29
    22aa:	08 95       	ret

000022ac <main>:


int main(){
    22ac:	df 93       	push	r29
    22ae:	cf 93       	push	r28
    22b0:	cd b7       	in	r28, 0x3d	; 61
    22b2:	de b7       	in	r29, 0x3e	; 62

	EXTI_Void_Global_Enable_Disable(EXTI_U8_Global_Enable);
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <EXTI_Void_Global_Enable_Disable>

	// led PORTD PIN0 INT0
	DIO_U8_Set_Pin_Direction(EXTI_U8_INT0_PORT,EXTI_U8_INT0_PIN,INPUT);
    22ba:	83 e0       	ldi	r24, 0x03	; 3
    22bc:	62 e0       	ldi	r22, 0x02	; 2
    22be:	40 e0       	ldi	r20, 0x00	; 0
    22c0:	0e 94 28 07 	call	0xe50	; 0xe50 <DIO_U8_Set_Pin_Direction>
	DIO_U8_Set_Pin_Value(EXTI_U8_INT0_PORT,EXTI_U8_INT0_PIN,HIGH);
    22c4:	83 e0       	ldi	r24, 0x03	; 3
    22c6:	62 e0       	ldi	r22, 0x02	; 2
    22c8:	41 e0       	ldi	r20, 0x01	; 1
    22ca:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_U8_Set_Pin_Value>
	DIO_U8_Set_Pin_Direction(GROUP_D,PIN0,OUTPUT);
    22ce:	83 e0       	ldi	r24, 0x03	; 3
    22d0:	60 e0       	ldi	r22, 0x00	; 0
    22d2:	41 e0       	ldi	r20, 0x01	; 1
    22d4:	0e 94 28 07 	call	0xe50	; 0xe50 <DIO_U8_Set_Pin_Direction>

	EXTI_U8_Set_Level(EXTI_U8_INT0,EXTI_U8_Falling_Edge);
    22d8:	86 e0       	ldi	r24, 0x06	; 6
    22da:	62 e0       	ldi	r22, 0x02	; 2
    22dc:	0e 94 cf 0a 	call	0x159e	; 0x159e <EXTI_U8_Set_Level>
	EXTI_Void_Set_Call_Back(EXTI_U8_INT0, Turn_onLed);
    22e0:	2e ee       	ldi	r18, 0xEE	; 238
    22e2:	30 e1       	ldi	r19, 0x10	; 16
    22e4:	86 e0       	ldi	r24, 0x06	; 6
    22e6:	b9 01       	movw	r22, r18
    22e8:	0e 94 66 0b 	call	0x16cc	; 0x16cc <EXTI_Void_Set_Call_Back>
	EXTI_Void_Ein_Dis(EXTI_U8_INT0 ,EXTI_U8_Global_Enable);
    22ec:	86 e0       	ldi	r24, 0x06	; 6
    22ee:	61 e0       	ldi	r22, 0x01	; 1
    22f0:	0e 94 98 0a 	call	0x1530	; 0x1530 <EXTI_Void_Ein_Dis>

	// LCD PORTB PORTC INT1
	LCD_Void_Init_8Bits();
    22f4:	0e 94 82 0b 	call	0x1704	; 0x1704 <LCD_Void_Init_8Bits>
	DIO_U8_Set_Pin_Direction(EXTI_U8_INT1_PORT,EXTI_U8_INT1_PIN,INPUT);
    22f8:	83 e0       	ldi	r24, 0x03	; 3
    22fa:	63 e0       	ldi	r22, 0x03	; 3
    22fc:	40 e0       	ldi	r20, 0x00	; 0
    22fe:	0e 94 28 07 	call	0xe50	; 0xe50 <DIO_U8_Set_Pin_Direction>
	DIO_U8_Set_Pin_Value(EXTI_U8_INT1_PORT,EXTI_U8_INT1_PIN,HIGH);
    2302:	83 e0       	ldi	r24, 0x03	; 3
    2304:	63 e0       	ldi	r22, 0x03	; 3
    2306:	41 e0       	ldi	r20, 0x01	; 1
    2308:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_U8_Set_Pin_Value>

	EXTI_U8_Set_Level(EXTI_U8_INT1,EXTI_U8_Falling_Edge);
    230c:	87 e0       	ldi	r24, 0x07	; 7
    230e:	62 e0       	ldi	r22, 0x02	; 2
    2310:	0e 94 cf 0a 	call	0x159e	; 0x159e <EXTI_U8_Set_Level>
	EXTI_Void_Set_Call_Back(EXTI_U8_INT1, Turn_onLCD);
    2314:	20 e1       	ldi	r18, 0x10	; 16
    2316:	31 e1       	ldi	r19, 0x11	; 17
    2318:	87 e0       	ldi	r24, 0x07	; 7
    231a:	b9 01       	movw	r22, r18
    231c:	0e 94 66 0b 	call	0x16cc	; 0x16cc <EXTI_Void_Set_Call_Back>
	EXTI_Void_Ein_Dis(EXTI_U8_INT1 ,EXTI_U8_Global_Enable);
    2320:	87 e0       	ldi	r24, 0x07	; 7
    2322:	61 e0       	ldi	r22, 0x01	; 1
    2324:	0e 94 98 0a 	call	0x1530	; 0x1530 <EXTI_Void_Ein_Dis>

	// 7SEGEMENT PORTA
	DIO_U8_Set_Pin_Direction(EXTI_U8_INT2_PORT,EXTI_U8_INT2_PIN,INPUT);
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	62 e0       	ldi	r22, 0x02	; 2
    232c:	40 e0       	ldi	r20, 0x00	; 0
    232e:	0e 94 28 07 	call	0xe50	; 0xe50 <DIO_U8_Set_Pin_Direction>
	DIO_U8_Set_Pin_Value(EXTI_U8_INT2_PORT,EXTI_U8_INT2_PIN,HIGH);
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	62 e0       	ldi	r22, 0x02	; 2
    2336:	41 e0       	ldi	r20, 0x01	; 1
    2338:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_U8_Set_Pin_Value>
	DIO_U8_Set_Port_Direction(GROUP_B,maximum_port_direction);
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	6f ef       	ldi	r22, 0xFF	; 255
    2340:	0e 94 1c 08 	call	0x1038	; 0x1038 <DIO_U8_Set_Port_Direction>

	EXTI_U8_Set_Level(EXTI_U8_INT2,EXTI_U8_Falling_Edge);
    2344:	85 e0       	ldi	r24, 0x05	; 5
    2346:	62 e0       	ldi	r22, 0x02	; 2
    2348:	0e 94 cf 0a 	call	0x159e	; 0x159e <EXTI_U8_Set_Level>
	EXTI_Void_Set_Call_Back(EXTI_U8_INT2, Turn_on7SEG);
    234c:	28 e3       	ldi	r18, 0x38	; 56
    234e:	31 e1       	ldi	r19, 0x11	; 17
    2350:	85 e0       	ldi	r24, 0x05	; 5
    2352:	b9 01       	movw	r22, r18
    2354:	0e 94 66 0b 	call	0x16cc	; 0x16cc <EXTI_Void_Set_Call_Back>
	EXTI_Void_Ein_Dis(EXTI_U8_INT2 ,EXTI_U8_Global_Enable);
    2358:	85 e0       	ldi	r24, 0x05	; 5
    235a:	61 e0       	ldi	r22, 0x01	; 1
    235c:	0e 94 98 0a 	call	0x1530	; 0x1530 <EXTI_Void_Ein_Dis>
    2360:	ff cf       	rjmp	.-2      	; 0x2360 <main+0xb4>

00002362 <__udivmodsi4>:
    2362:	a1 e2       	ldi	r26, 0x21	; 33
    2364:	1a 2e       	mov	r1, r26
    2366:	aa 1b       	sub	r26, r26
    2368:	bb 1b       	sub	r27, r27
    236a:	fd 01       	movw	r30, r26
    236c:	0d c0       	rjmp	.+26     	; 0x2388 <__udivmodsi4_ep>

0000236e <__udivmodsi4_loop>:
    236e:	aa 1f       	adc	r26, r26
    2370:	bb 1f       	adc	r27, r27
    2372:	ee 1f       	adc	r30, r30
    2374:	ff 1f       	adc	r31, r31
    2376:	a2 17       	cp	r26, r18
    2378:	b3 07       	cpc	r27, r19
    237a:	e4 07       	cpc	r30, r20
    237c:	f5 07       	cpc	r31, r21
    237e:	20 f0       	brcs	.+8      	; 0x2388 <__udivmodsi4_ep>
    2380:	a2 1b       	sub	r26, r18
    2382:	b3 0b       	sbc	r27, r19
    2384:	e4 0b       	sbc	r30, r20
    2386:	f5 0b       	sbc	r31, r21

00002388 <__udivmodsi4_ep>:
    2388:	66 1f       	adc	r22, r22
    238a:	77 1f       	adc	r23, r23
    238c:	88 1f       	adc	r24, r24
    238e:	99 1f       	adc	r25, r25
    2390:	1a 94       	dec	r1
    2392:	69 f7       	brne	.-38     	; 0x236e <__udivmodsi4_loop>
    2394:	60 95       	com	r22
    2396:	70 95       	com	r23
    2398:	80 95       	com	r24
    239a:	90 95       	com	r25
    239c:	9b 01       	movw	r18, r22
    239e:	ac 01       	movw	r20, r24
    23a0:	bd 01       	movw	r22, r26
    23a2:	cf 01       	movw	r24, r30
    23a4:	08 95       	ret

000023a6 <__prologue_saves__>:
    23a6:	2f 92       	push	r2
    23a8:	3f 92       	push	r3
    23aa:	4f 92       	push	r4
    23ac:	5f 92       	push	r5
    23ae:	6f 92       	push	r6
    23b0:	7f 92       	push	r7
    23b2:	8f 92       	push	r8
    23b4:	9f 92       	push	r9
    23b6:	af 92       	push	r10
    23b8:	bf 92       	push	r11
    23ba:	cf 92       	push	r12
    23bc:	df 92       	push	r13
    23be:	ef 92       	push	r14
    23c0:	ff 92       	push	r15
    23c2:	0f 93       	push	r16
    23c4:	1f 93       	push	r17
    23c6:	cf 93       	push	r28
    23c8:	df 93       	push	r29
    23ca:	cd b7       	in	r28, 0x3d	; 61
    23cc:	de b7       	in	r29, 0x3e	; 62
    23ce:	ca 1b       	sub	r28, r26
    23d0:	db 0b       	sbc	r29, r27
    23d2:	0f b6       	in	r0, 0x3f	; 63
    23d4:	f8 94       	cli
    23d6:	de bf       	out	0x3e, r29	; 62
    23d8:	0f be       	out	0x3f, r0	; 63
    23da:	cd bf       	out	0x3d, r28	; 61
    23dc:	09 94       	ijmp

000023de <__epilogue_restores__>:
    23de:	2a 88       	ldd	r2, Y+18	; 0x12
    23e0:	39 88       	ldd	r3, Y+17	; 0x11
    23e2:	48 88       	ldd	r4, Y+16	; 0x10
    23e4:	5f 84       	ldd	r5, Y+15	; 0x0f
    23e6:	6e 84       	ldd	r6, Y+14	; 0x0e
    23e8:	7d 84       	ldd	r7, Y+13	; 0x0d
    23ea:	8c 84       	ldd	r8, Y+12	; 0x0c
    23ec:	9b 84       	ldd	r9, Y+11	; 0x0b
    23ee:	aa 84       	ldd	r10, Y+10	; 0x0a
    23f0:	b9 84       	ldd	r11, Y+9	; 0x09
    23f2:	c8 84       	ldd	r12, Y+8	; 0x08
    23f4:	df 80       	ldd	r13, Y+7	; 0x07
    23f6:	ee 80       	ldd	r14, Y+6	; 0x06
    23f8:	fd 80       	ldd	r15, Y+5	; 0x05
    23fa:	0c 81       	ldd	r16, Y+4	; 0x04
    23fc:	1b 81       	ldd	r17, Y+3	; 0x03
    23fe:	aa 81       	ldd	r26, Y+2	; 0x02
    2400:	b9 81       	ldd	r27, Y+1	; 0x01
    2402:	ce 0f       	add	r28, r30
    2404:	d1 1d       	adc	r29, r1
    2406:	0f b6       	in	r0, 0x3f	; 63
    2408:	f8 94       	cli
    240a:	de bf       	out	0x3e, r29	; 62
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	cd bf       	out	0x3d, r28	; 61
    2410:	ed 01       	movw	r28, r26
    2412:	08 95       	ret

00002414 <_exit>:
    2414:	f8 94       	cli

00002416 <__stop_program>:
    2416:	ff cf       	rjmp	.-2      	; 0x2416 <__stop_program>
