
TIMER1_ICU_EXTI_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000140  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000005  00800060  00800060  000001b4  2**0
                  ALLOC
  2 .stab         000002b8  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000033d  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  74:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_1>:

u16 ON_TIME;
u16 OFF_TIME;

void __vector_1(void)__attribute__((signal));
void __vector_1(void){
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
  8a:	ef 93       	push	r30
  8c:	ff 93       	push	r31
  8e:	df 93       	push	r29
  90:	cf 93       	push	r28
  92:	cd b7       	in	r28, 0x3d	; 61
  94:	de b7       	in	r29, 0x3e	; 62
	static u8 flag = 0;
	OFF_TIME = TCNT1L;
  96:	ec e4       	ldi	r30, 0x4C	; 76
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	88 2f       	mov	r24, r24
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	90 93 62 00 	sts	0x0062, r25
  a4:	80 93 61 00 	sts	0x0061, r24
	TCNT1L = 0;
  a8:	ec e4       	ldi	r30, 0x4C	; 76
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
	MCUCR = 0B00000010;//FALLING
  ae:	e5 e5       	ldi	r30, 0x55	; 85
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	82 e0       	ldi	r24, 0x02	; 2
  b4:	80 83       	st	Z, r24
	ON_TIME = TCNT1L;
  b6:	ec e4       	ldi	r30, 0x4C	; 76
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	88 2f       	mov	r24, r24
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	90 93 64 00 	sts	0x0064, r25
  c4:	80 93 63 00 	sts	0x0063, r24
	TCNT1L = 0;
  c8:	ec e4       	ldi	r30, 0x4C	; 76
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	10 82       	st	Z, r1
	MCUCR = 0b00000011;//RISING
  ce:	e5 e5       	ldi	r30, 0x55	; 85
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	83 e0       	ldi	r24, 0x03	; 3
  d4:	80 83       	st	Z, r24
	flag = 0;
  d6:	10 92 60 00 	sts	0x0060, r1
	//Duty = (ON_TIME * 100) / OFF_TIME;
	//freq = 1000000 / (ON_TIME + OFF_TIME);
}
  da:	cf 91       	pop	r28
  dc:	df 91       	pop	r29
  de:	ff 91       	pop	r31
  e0:	ef 91       	pop	r30
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <main>:

int main(){
  f0:	df 93       	push	r29
  f2:	cf 93       	push	r28
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0b01101010;//fast pwm
  f8:	e3 e5       	ldi	r30, 0x53	; 83
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	8a e6       	ldi	r24, 0x6A	; 106
  fe:	80 83       	st	Z, r24
	OCR0 = 128;//clear OCR0 on compare, set on top
 100:	ec e5       	ldi	r30, 0x5C	; 92
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 e8       	ldi	r24, 0x80	; 128
 106:	80 83       	st	Z, r24
	//prescalar=clr/128

	//EXTI0
	MCUCR = 0b00000011;//rising edge
 108:	e5 e5       	ldi	r30, 0x55	; 85
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	83 e0       	ldi	r24, 0x03	; 3
 10e:	80 83       	st	Z, r24
	GICR = 0b01000000;// enable EXTI0
 110:	eb e5       	ldi	r30, 0x5B	; 91
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 e4       	ldi	r24, 0x40	; 64
 116:	80 83       	st	Z, r24
	//Timer1
	TCCR1A = 0b00000000;//normal mode
 118:	ef e4       	ldi	r30, 0x4F	; 79
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	10 82       	st	Z, r1
	TCCR1B = 0b00000001;//prescalar/8
 11e:	ee e4       	ldi	r30, 0x4E	; 78
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	91 83       	std	Z+1, r25	; 0x01
 128:	80 83       	st	Z, r24

	SREG = 0b10000000;
 12a:	ef e5       	ldi	r30, 0x5F	; 95
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 e8       	ldi	r24, 0x80	; 128
 130:	80 83       	st	Z, r24
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	90 e0       	ldi	r25, 0x00	; 0
}
 136:	cf 91       	pop	r28
 138:	df 91       	pop	r29
 13a:	08 95       	ret

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
