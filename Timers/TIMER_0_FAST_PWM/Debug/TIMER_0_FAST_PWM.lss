
TIMER_0_FAST_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d96  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  00000e0a  2**0
                  ALLOC
  2 .stab         00000f18  00000000  00000000  00000e0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c01  00000000  00000000  00001d24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <__vector_1>
   8:	0c 94 2d 05 	jmp	0xa5a	; 0xa5a <__vector_2>
   c:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a7 06 	call	0xd4e	; 0xd4e <main>
  74:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_Void_Init>:
#include "STD_TYPES.h"

#include "DIO_Interface.h"
#include "DIO_Private.h"

void ADC_Void_Init(void){
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	//Adc enable
	Set_Bit(ADCSRA,7);
  84:	a6 e2       	ldi	r26, 0x26	; 38
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	e6 e2       	ldi	r30, 0x26	; 38
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	80 68       	ori	r24, 0x80	; 128
  90:	8c 93       	st	X, r24
	//prescalar128
	Set_Bit(ADCSRA,0);
  92:	a6 e2       	ldi	r26, 0x26	; 38
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	e6 e2       	ldi	r30, 0x26	; 38
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,1);
  a0:	a6 e2       	ldi	r26, 0x26	; 38
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	e6 e2       	ldi	r30, 0x26	; 38
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	82 60       	ori	r24, 0x02	; 2
  ac:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,2);
  ae:	a6 e2       	ldi	r26, 0x26	; 38
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	e6 e2       	ldi	r30, 0x26	; 38
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	84 60       	ori	r24, 0x04	; 4
  ba:	8c 93       	st	X, r24
	//set ref voltage avcc
	Clear_Bit(ADMUX,7);
  bc:	a7 e2       	ldi	r26, 0x27	; 39
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	e7 e2       	ldi	r30, 0x27	; 39
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	8f 77       	andi	r24, 0x7F	; 127
  c8:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,6);
  ca:	a6 e2       	ldi	r26, 0x26	; 38
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	e6 e2       	ldi	r30, 0x26	; 38
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	8c 93       	st	X, r24
	//left adjustment
	Set_Bit(ADMUX,6);
  d8:	a7 e2       	ldi	r26, 0x27	; 39
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	e7 e2       	ldi	r30, 0x27	; 39
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	80 64       	ori	r24, 0x40	; 64
  e4:	8c 93       	st	X, r24

}
  e6:	cf 91       	pop	r28
  e8:	df 91       	pop	r29
  ea:	08 95       	ret

000000ec <ADC_U8_Read_channel>:

u16 ADC_U8_Read_channel(u8 channel){
  ec:	df 93       	push	r29
  ee:	cf 93       	push	r28
  f0:	00 d0       	rcall	.+0      	; 0xf2 <ADC_U8_Read_channel+0x6>
  f2:	0f 92       	push	r0
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
  f8:	8b 83       	std	Y+3, r24	; 0x03
	u16 result;
	ADMUX &= 0b11100000;
  fa:	a7 e2       	ldi	r26, 0x27	; 39
  fc:	b0 e0       	ldi	r27, 0x00	; 0
  fe:	e7 e2       	ldi	r30, 0x27	; 39
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	80 7e       	andi	r24, 0xE0	; 224
 106:	8c 93       	st	X, r24
	ADMUX |= channel;
 108:	a7 e2       	ldi	r26, 0x27	; 39
 10a:	b0 e0       	ldi	r27, 0x00	; 0
 10c:	e7 e2       	ldi	r30, 0x27	; 39
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	90 81       	ld	r25, Z
 112:	8b 81       	ldd	r24, Y+3	; 0x03
 114:	89 2b       	or	r24, r25
 116:	8c 93       	st	X, r24
	//start converion
	Set_Bit(ADCSRA,6);
 118:	a6 e2       	ldi	r26, 0x26	; 38
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	e6 e2       	ldi	r30, 0x26	; 38
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	80 64       	ori	r24, 0x40	; 64
 124:	8c 93       	st	X, r24

	while(Get_Bit(ADCSRA,4)  != 1);
 126:	e6 e2       	ldi	r30, 0x26	; 38
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	82 95       	swap	r24
 12e:	8f 70       	andi	r24, 0x0F	; 15
 130:	88 2f       	mov	r24, r24
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	81 70       	andi	r24, 0x01	; 1
 136:	90 70       	andi	r25, 0x00	; 0
 138:	00 97       	sbiw	r24, 0x00	; 0
 13a:	a9 f3       	breq	.-22     	; 0x126 <ADC_U8_Read_channel+0x3a>
	Set_Bit(ADCSRA,4);
 13c:	a6 e2       	ldi	r26, 0x26	; 38
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	e6 e2       	ldi	r30, 0x26	; 38
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	80 61       	ori	r24, 0x10	; 16
 148:	8c 93       	st	X, r24
	result = ADCL >> 6;
 14a:	e4 e2       	ldi	r30, 0x24	; 36
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	82 95       	swap	r24
 152:	86 95       	lsr	r24
 154:	86 95       	lsr	r24
 156:	83 70       	andi	r24, 0x03	; 3
 158:	88 2f       	mov	r24, r24
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	9a 83       	std	Y+2, r25	; 0x02
 15e:	89 83       	std	Y+1, r24	; 0x01
	result |= ((u16)ADCH << (2));
 160:	e5 e2       	ldi	r30, 0x25	; 37
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	88 2f       	mov	r24, r24
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	9c 01       	movw	r18, r24
 16c:	22 0f       	add	r18, r18
 16e:	33 1f       	adc	r19, r19
 170:	22 0f       	add	r18, r18
 172:	33 1f       	adc	r19, r19
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	9a 81       	ldd	r25, Y+2	; 0x02
 178:	82 2b       	or	r24, r18
 17a:	93 2b       	or	r25, r19
 17c:	9a 83       	std	Y+2, r25	; 0x02
 17e:	89 83       	std	Y+1, r24	; 0x01

	return result;
 180:	89 81       	ldd	r24, Y+1	; 0x01
 182:	9a 81       	ldd	r25, Y+2	; 0x02
}
 184:	0f 90       	pop	r0
 186:	0f 90       	pop	r0
 188:	0f 90       	pop	r0
 18a:	cf 91       	pop	r28
 18c:	df 91       	pop	r29
 18e:	08 95       	ret

00000190 <DIO_U8_Set_Pin_Value>:
#include "DIO_Private.h"
#include <avr/delay.h>



u8 DIO_U8_Set_Pin_Value(u8 Copy_U8_Port_ID, u8 Copy_U8_Pin_ID, u8 Copy_U8_Pin_Val){
 190:	df 93       	push	r29
 192:	cf 93       	push	r28
 194:	00 d0       	rcall	.+0      	; 0x196 <DIO_U8_Set_Pin_Value+0x6>
 196:	00 d0       	rcall	.+0      	; 0x198 <DIO_U8_Set_Pin_Value+0x8>
 198:	00 d0       	rcall	.+0      	; 0x19a <DIO_U8_Set_Pin_Value+0xa>
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62
 19e:	89 83       	std	Y+1, r24	; 0x01
 1a0:	6a 83       	std	Y+2, r22	; 0x02
 1a2:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_U8_Pin_ID >=PIN0) && (Copy_U8_Pin_ID <=PIN7) && (Copy_U8_Port_ID <= GROUP_D) && (Copy_U8_Port_ID >= GROUP_A)){
 1a4:	8a 81       	ldd	r24, Y+2	; 0x02
 1a6:	88 30       	cpi	r24, 0x08	; 8
 1a8:	08 f0       	brcs	.+2      	; 0x1ac <DIO_U8_Set_Pin_Value+0x1c>
 1aa:	e1 c0       	rjmp	.+450    	; 0x36e <DIO_U8_Set_Pin_Value+0x1de>
 1ac:	89 81       	ldd	r24, Y+1	; 0x01
 1ae:	84 30       	cpi	r24, 0x04	; 4
 1b0:	08 f0       	brcs	.+2      	; 0x1b4 <DIO_U8_Set_Pin_Value+0x24>
 1b2:	dd c0       	rjmp	.+442    	; 0x36e <DIO_U8_Set_Pin_Value+0x1de>
		if((Copy_U8_Pin_Val == HIGH) || (Copy_U8_Pin_Val == LOW )){
 1b4:	8b 81       	ldd	r24, Y+3	; 0x03
 1b6:	81 30       	cpi	r24, 0x01	; 1
 1b8:	21 f0       	breq	.+8      	; 0x1c2 <DIO_U8_Set_Pin_Value+0x32>
 1ba:	8b 81       	ldd	r24, Y+3	; 0x03
 1bc:	88 23       	and	r24, r24
 1be:	09 f0       	breq	.+2      	; 0x1c2 <DIO_U8_Set_Pin_Value+0x32>
 1c0:	d3 c0       	rjmp	.+422    	; 0x368 <DIO_U8_Set_Pin_Value+0x1d8>
			switch (Copy_U8_Port_ID){
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	28 2f       	mov	r18, r24
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	3e 83       	std	Y+6, r19	; 0x06
 1ca:	2d 83       	std	Y+5, r18	; 0x05
 1cc:	8d 81       	ldd	r24, Y+5	; 0x05
 1ce:	9e 81       	ldd	r25, Y+6	; 0x06
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	91 05       	cpc	r25, r1
 1d4:	09 f4       	brne	.+2      	; 0x1d8 <DIO_U8_Set_Pin_Value+0x48>
 1d6:	43 c0       	rjmp	.+134    	; 0x25e <DIO_U8_Set_Pin_Value+0xce>
 1d8:	2d 81       	ldd	r18, Y+5	; 0x05
 1da:	3e 81       	ldd	r19, Y+6	; 0x06
 1dc:	22 30       	cpi	r18, 0x02	; 2
 1de:	31 05       	cpc	r19, r1
 1e0:	2c f4       	brge	.+10     	; 0x1ec <DIO_U8_Set_Pin_Value+0x5c>
 1e2:	8d 81       	ldd	r24, Y+5	; 0x05
 1e4:	9e 81       	ldd	r25, Y+6	; 0x06
 1e6:	00 97       	sbiw	r24, 0x00	; 0
 1e8:	71 f0       	breq	.+28     	; 0x206 <DIO_U8_Set_Pin_Value+0x76>
 1ea:	bc c0       	rjmp	.+376    	; 0x364 <DIO_U8_Set_Pin_Value+0x1d4>
 1ec:	2d 81       	ldd	r18, Y+5	; 0x05
 1ee:	3e 81       	ldd	r19, Y+6	; 0x06
 1f0:	22 30       	cpi	r18, 0x02	; 2
 1f2:	31 05       	cpc	r19, r1
 1f4:	09 f4       	brne	.+2      	; 0x1f8 <DIO_U8_Set_Pin_Value+0x68>
 1f6:	5f c0       	rjmp	.+190    	; 0x2b6 <DIO_U8_Set_Pin_Value+0x126>
 1f8:	8d 81       	ldd	r24, Y+5	; 0x05
 1fa:	9e 81       	ldd	r25, Y+6	; 0x06
 1fc:	83 30       	cpi	r24, 0x03	; 3
 1fe:	91 05       	cpc	r25, r1
 200:	09 f4       	brne	.+2      	; 0x204 <DIO_U8_Set_Pin_Value+0x74>
 202:	85 c0       	rjmp	.+266    	; 0x30e <DIO_U8_Set_Pin_Value+0x17e>
 204:	af c0       	rjmp	.+350    	; 0x364 <DIO_U8_Set_Pin_Value+0x1d4>
			case GROUP_A:
				Assign_Bit(DIO_U8_PORTA,Copy_U8_Pin_ID,Copy_U8_Pin_Val);
 206:	8b 81       	ldd	r24, Y+3	; 0x03
 208:	81 30       	cpi	r24, 0x01	; 1
 20a:	a1 f4       	brne	.+40     	; 0x234 <DIO_U8_Set_Pin_Value+0xa4>
 20c:	ab e3       	ldi	r26, 0x3B	; 59
 20e:	b0 e0       	ldi	r27, 0x00	; 0
 210:	eb e3       	ldi	r30, 0x3B	; 59
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	48 2f       	mov	r20, r24
 218:	8a 81       	ldd	r24, Y+2	; 0x02
 21a:	28 2f       	mov	r18, r24
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 2e       	mov	r0, r18
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_U8_Set_Pin_Value+0x9a>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	0a 94       	dec	r0
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_U8_Set_Pin_Value+0x96>
 22e:	84 2b       	or	r24, r20
 230:	8c 93       	st	X, r24
 232:	98 c0       	rjmp	.+304    	; 0x364 <DIO_U8_Set_Pin_Value+0x1d4>
 234:	ab e3       	ldi	r26, 0x3B	; 59
 236:	b0 e0       	ldi	r27, 0x00	; 0
 238:	eb e3       	ldi	r30, 0x3B	; 59
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	48 2f       	mov	r20, r24
 240:	8a 81       	ldd	r24, Y+2	; 0x02
 242:	28 2f       	mov	r18, r24
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	02 2e       	mov	r0, r18
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_U8_Set_Pin_Value+0xc2>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	0a 94       	dec	r0
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_U8_Set_Pin_Value+0xbe>
 256:	80 95       	com	r24
 258:	84 23       	and	r24, r20
 25a:	8c 93       	st	X, r24
 25c:	83 c0       	rjmp	.+262    	; 0x364 <DIO_U8_Set_Pin_Value+0x1d4>
				break;
			case GROUP_B:
				Assign_Bit(DIO_U8_PORTB,Copy_U8_Pin_ID,Copy_U8_Pin_Val);
 25e:	8b 81       	ldd	r24, Y+3	; 0x03
 260:	81 30       	cpi	r24, 0x01	; 1
 262:	a1 f4       	brne	.+40     	; 0x28c <DIO_U8_Set_Pin_Value+0xfc>
 264:	a8 e3       	ldi	r26, 0x38	; 56
 266:	b0 e0       	ldi	r27, 0x00	; 0
 268:	e8 e3       	ldi	r30, 0x38	; 56
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	48 2f       	mov	r20, r24
 270:	8a 81       	ldd	r24, Y+2	; 0x02
 272:	28 2f       	mov	r18, r24
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 2e       	mov	r0, r18
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_U8_Set_Pin_Value+0xf2>
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	0a 94       	dec	r0
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_U8_Set_Pin_Value+0xee>
 286:	84 2b       	or	r24, r20
 288:	8c 93       	st	X, r24
 28a:	6c c0       	rjmp	.+216    	; 0x364 <DIO_U8_Set_Pin_Value+0x1d4>
 28c:	a8 e3       	ldi	r26, 0x38	; 56
 28e:	b0 e0       	ldi	r27, 0x00	; 0
 290:	e8 e3       	ldi	r30, 0x38	; 56
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	80 81       	ld	r24, Z
 296:	48 2f       	mov	r20, r24
 298:	8a 81       	ldd	r24, Y+2	; 0x02
 29a:	28 2f       	mov	r18, r24
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 2e       	mov	r0, r18
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_U8_Set_Pin_Value+0x11a>
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	0a 94       	dec	r0
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_U8_Set_Pin_Value+0x116>
 2ae:	80 95       	com	r24
 2b0:	84 23       	and	r24, r20
 2b2:	8c 93       	st	X, r24
 2b4:	57 c0       	rjmp	.+174    	; 0x364 <DIO_U8_Set_Pin_Value+0x1d4>
				break;
			case GROUP_C:
				Assign_Bit(DIO_U8_PORTC,Copy_U8_Pin_ID,Copy_U8_Pin_Val);
 2b6:	8b 81       	ldd	r24, Y+3	; 0x03
 2b8:	81 30       	cpi	r24, 0x01	; 1
 2ba:	a1 f4       	brne	.+40     	; 0x2e4 <DIO_U8_Set_Pin_Value+0x154>
 2bc:	a5 e3       	ldi	r26, 0x35	; 53
 2be:	b0 e0       	ldi	r27, 0x00	; 0
 2c0:	e5 e3       	ldi	r30, 0x35	; 53
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	48 2f       	mov	r20, r24
 2c8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ca:	28 2f       	mov	r18, r24
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	02 2e       	mov	r0, r18
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_U8_Set_Pin_Value+0x14a>
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	0a 94       	dec	r0
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_U8_Set_Pin_Value+0x146>
 2de:	84 2b       	or	r24, r20
 2e0:	8c 93       	st	X, r24
 2e2:	40 c0       	rjmp	.+128    	; 0x364 <DIO_U8_Set_Pin_Value+0x1d4>
 2e4:	a5 e3       	ldi	r26, 0x35	; 53
 2e6:	b0 e0       	ldi	r27, 0x00	; 0
 2e8:	e5 e3       	ldi	r30, 0x35	; 53
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	48 2f       	mov	r20, r24
 2f0:	8a 81       	ldd	r24, Y+2	; 0x02
 2f2:	28 2f       	mov	r18, r24
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	02 2e       	mov	r0, r18
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_U8_Set_Pin_Value+0x172>
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	0a 94       	dec	r0
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_U8_Set_Pin_Value+0x16e>
 306:	80 95       	com	r24
 308:	84 23       	and	r24, r20
 30a:	8c 93       	st	X, r24
 30c:	2b c0       	rjmp	.+86     	; 0x364 <DIO_U8_Set_Pin_Value+0x1d4>
				break;
			case GROUP_D:
				Assign_Bit(DIO_U8_PORTD,Copy_U8_Pin_ID,Copy_U8_Pin_Val);
 30e:	8b 81       	ldd	r24, Y+3	; 0x03
 310:	81 30       	cpi	r24, 0x01	; 1
 312:	a1 f4       	brne	.+40     	; 0x33c <DIO_U8_Set_Pin_Value+0x1ac>
 314:	a2 e3       	ldi	r26, 0x32	; 50
 316:	b0 e0       	ldi	r27, 0x00	; 0
 318:	e2 e3       	ldi	r30, 0x32	; 50
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	48 2f       	mov	r20, r24
 320:	8a 81       	ldd	r24, Y+2	; 0x02
 322:	28 2f       	mov	r18, r24
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	02 2e       	mov	r0, r18
 32c:	02 c0       	rjmp	.+4      	; 0x332 <DIO_U8_Set_Pin_Value+0x1a2>
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	0a 94       	dec	r0
 334:	e2 f7       	brpl	.-8      	; 0x32e <DIO_U8_Set_Pin_Value+0x19e>
 336:	84 2b       	or	r24, r20
 338:	8c 93       	st	X, r24
 33a:	14 c0       	rjmp	.+40     	; 0x364 <DIO_U8_Set_Pin_Value+0x1d4>
 33c:	a2 e3       	ldi	r26, 0x32	; 50
 33e:	b0 e0       	ldi	r27, 0x00	; 0
 340:	e2 e3       	ldi	r30, 0x32	; 50
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	48 2f       	mov	r20, r24
 348:	8a 81       	ldd	r24, Y+2	; 0x02
 34a:	28 2f       	mov	r18, r24
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	02 2e       	mov	r0, r18
 354:	02 c0       	rjmp	.+4      	; 0x35a <DIO_U8_Set_Pin_Value+0x1ca>
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	0a 94       	dec	r0
 35c:	e2 f7       	brpl	.-8      	; 0x356 <DIO_U8_Set_Pin_Value+0x1c6>
 35e:	80 95       	com	r24
 360:	84 23       	and	r24, r20
 362:	8c 93       	st	X, r24
		}
	}
	else{
		return INVALID_PIN_ID;
	}
	return Success;
 364:	1c 82       	std	Y+4, r1	; 0x04
 366:	05 c0       	rjmp	.+10     	; 0x372 <DIO_U8_Set_Pin_Value+0x1e2>
				break;

			}
		}
		else{
			return INVALID_PIN_VALUE;
 368:	9a ef       	ldi	r25, 0xFA	; 250
 36a:	9c 83       	std	Y+4, r25	; 0x04
 36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_U8_Set_Pin_Value+0x1e2>
		}
	}
	else{
		return INVALID_PIN_ID;
 36e:	2f ef       	ldi	r18, 0xFF	; 255
 370:	2c 83       	std	Y+4, r18	; 0x04
 372:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	return Success;
}
 374:	26 96       	adiw	r28, 0x06	; 6
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	f8 94       	cli
 37a:	de bf       	out	0x3e, r29	; 62
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	cd bf       	out	0x3d, r28	; 61
 380:	cf 91       	pop	r28
 382:	df 91       	pop	r29
 384:	08 95       	ret

00000386 <DIO_U8_Get_Pin_Value>:


u8 DIO_U8_Get_Pin_Value(u8 Copy_U8_Port_ID, u8 Copy_U8_Pin_ID){
 386:	df 93       	push	r29
 388:	cf 93       	push	r28
 38a:	00 d0       	rcall	.+0      	; 0x38c <DIO_U8_Get_Pin_Value+0x6>
 38c:	00 d0       	rcall	.+0      	; 0x38e <DIO_U8_Get_Pin_Value+0x8>
 38e:	00 d0       	rcall	.+0      	; 0x390 <DIO_U8_Get_Pin_Value+0xa>
 390:	cd b7       	in	r28, 0x3d	; 61
 392:	de b7       	in	r29, 0x3e	; 62
 394:	8a 83       	std	Y+2, r24	; 0x02
 396:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value;
	if ((Copy_U8_Port_ID <= GROUP_D) && (Copy_U8_Port_ID >= GROUP_A)){
 398:	8a 81       	ldd	r24, Y+2	; 0x02
 39a:	84 30       	cpi	r24, 0x04	; 4
 39c:	08 f0       	brcs	.+2      	; 0x3a0 <DIO_U8_Get_Pin_Value+0x1a>
 39e:	71 c0       	rjmp	.+226    	; 0x482 <DIO_U8_Get_Pin_Value+0xfc>
		if((Copy_U8_Pin_ID >=PIN0) && (Copy_U8_Pin_ID <=PIN7) ){
 3a0:	8b 81       	ldd	r24, Y+3	; 0x03
 3a2:	88 30       	cpi	r24, 0x08	; 8
 3a4:	08 f0       	brcs	.+2      	; 0x3a8 <DIO_U8_Get_Pin_Value+0x22>
 3a6:	6a c0       	rjmp	.+212    	; 0x47c <DIO_U8_Get_Pin_Value+0xf6>
			switch(Copy_U8_Port_ID){
 3a8:	8a 81       	ldd	r24, Y+2	; 0x02
 3aa:	28 2f       	mov	r18, r24
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	3e 83       	std	Y+6, r19	; 0x06
 3b0:	2d 83       	std	Y+5, r18	; 0x05
 3b2:	4d 81       	ldd	r20, Y+5	; 0x05
 3b4:	5e 81       	ldd	r21, Y+6	; 0x06
 3b6:	41 30       	cpi	r20, 0x01	; 1
 3b8:	51 05       	cpc	r21, r1
 3ba:	41 f1       	breq	.+80     	; 0x40c <DIO_U8_Get_Pin_Value+0x86>
 3bc:	8d 81       	ldd	r24, Y+5	; 0x05
 3be:	9e 81       	ldd	r25, Y+6	; 0x06
 3c0:	82 30       	cpi	r24, 0x02	; 2
 3c2:	91 05       	cpc	r25, r1
 3c4:	34 f4       	brge	.+12     	; 0x3d2 <DIO_U8_Get_Pin_Value+0x4c>
 3c6:	2d 81       	ldd	r18, Y+5	; 0x05
 3c8:	3e 81       	ldd	r19, Y+6	; 0x06
 3ca:	21 15       	cp	r18, r1
 3cc:	31 05       	cpc	r19, r1
 3ce:	61 f0       	breq	.+24     	; 0x3e8 <DIO_U8_Get_Pin_Value+0x62>
 3d0:	52 c0       	rjmp	.+164    	; 0x476 <DIO_U8_Get_Pin_Value+0xf0>
 3d2:	4d 81       	ldd	r20, Y+5	; 0x05
 3d4:	5e 81       	ldd	r21, Y+6	; 0x06
 3d6:	42 30       	cpi	r20, 0x02	; 2
 3d8:	51 05       	cpc	r21, r1
 3da:	51 f1       	breq	.+84     	; 0x430 <DIO_U8_Get_Pin_Value+0xaa>
 3dc:	8d 81       	ldd	r24, Y+5	; 0x05
 3de:	9e 81       	ldd	r25, Y+6	; 0x06
 3e0:	83 30       	cpi	r24, 0x03	; 3
 3e2:	91 05       	cpc	r25, r1
 3e4:	b9 f1       	breq	.+110    	; 0x454 <DIO_U8_Get_Pin_Value+0xce>
 3e6:	47 c0       	rjmp	.+142    	; 0x476 <DIO_U8_Get_Pin_Value+0xf0>
			case GROUP_A:
				pin_value = Get_Bit(DIO_U8_PINA,Copy_U8_Pin_ID);
 3e8:	e9 e3       	ldi	r30, 0x39	; 57
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	80 81       	ld	r24, Z
 3ee:	28 2f       	mov	r18, r24
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	8b 81       	ldd	r24, Y+3	; 0x03
 3f4:	88 2f       	mov	r24, r24
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	a9 01       	movw	r20, r18
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <DIO_U8_Get_Pin_Value+0x7a>
 3fc:	55 95       	asr	r21
 3fe:	47 95       	ror	r20
 400:	8a 95       	dec	r24
 402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_U8_Get_Pin_Value+0x76>
 404:	ca 01       	movw	r24, r20
 406:	81 70       	andi	r24, 0x01	; 1
 408:	89 83       	std	Y+1, r24	; 0x01
 40a:	35 c0       	rjmp	.+106    	; 0x476 <DIO_U8_Get_Pin_Value+0xf0>
				break;
			case GROUP_B:
				pin_value = Get_Bit(DIO_U8_PINB,Copy_U8_Pin_ID);
 40c:	e6 e3       	ldi	r30, 0x36	; 54
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	28 2f       	mov	r18, r24
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	8b 81       	ldd	r24, Y+3	; 0x03
 418:	88 2f       	mov	r24, r24
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	a9 01       	movw	r20, r18
 41e:	02 c0       	rjmp	.+4      	; 0x424 <DIO_U8_Get_Pin_Value+0x9e>
 420:	55 95       	asr	r21
 422:	47 95       	ror	r20
 424:	8a 95       	dec	r24
 426:	e2 f7       	brpl	.-8      	; 0x420 <DIO_U8_Get_Pin_Value+0x9a>
 428:	ca 01       	movw	r24, r20
 42a:	81 70       	andi	r24, 0x01	; 1
 42c:	89 83       	std	Y+1, r24	; 0x01
 42e:	23 c0       	rjmp	.+70     	; 0x476 <DIO_U8_Get_Pin_Value+0xf0>
				break;
			case GROUP_C:
				pin_value = Get_Bit(DIO_U8_PINC,Copy_U8_Pin_ID);
 430:	e3 e3       	ldi	r30, 0x33	; 51
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	28 2f       	mov	r18, r24
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	8b 81       	ldd	r24, Y+3	; 0x03
 43c:	88 2f       	mov	r24, r24
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	a9 01       	movw	r20, r18
 442:	02 c0       	rjmp	.+4      	; 0x448 <DIO_U8_Get_Pin_Value+0xc2>
 444:	55 95       	asr	r21
 446:	47 95       	ror	r20
 448:	8a 95       	dec	r24
 44a:	e2 f7       	brpl	.-8      	; 0x444 <DIO_U8_Get_Pin_Value+0xbe>
 44c:	ca 01       	movw	r24, r20
 44e:	81 70       	andi	r24, 0x01	; 1
 450:	89 83       	std	Y+1, r24	; 0x01
 452:	11 c0       	rjmp	.+34     	; 0x476 <DIO_U8_Get_Pin_Value+0xf0>
				break;
			case GROUP_D:
				pin_value = Get_Bit(DIO_U8_PIND,Copy_U8_Pin_ID);
 454:	e0 e3       	ldi	r30, 0x30	; 48
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	80 81       	ld	r24, Z
 45a:	28 2f       	mov	r18, r24
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	8b 81       	ldd	r24, Y+3	; 0x03
 460:	88 2f       	mov	r24, r24
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	a9 01       	movw	r20, r18
 466:	02 c0       	rjmp	.+4      	; 0x46c <DIO_U8_Get_Pin_Value+0xe6>
 468:	55 95       	asr	r21
 46a:	47 95       	ror	r20
 46c:	8a 95       	dec	r24
 46e:	e2 f7       	brpl	.-8      	; 0x468 <DIO_U8_Get_Pin_Value+0xe2>
 470:	ca 01       	movw	r24, r20
 472:	81 70       	andi	r24, 0x01	; 1
 474:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	else{
		return INVALID_PORT_ID;
	}
	return pin_value;
 476:	59 81       	ldd	r21, Y+1	; 0x01
 478:	5c 83       	std	Y+4, r21	; 0x04
 47a:	05 c0       	rjmp	.+10     	; 0x486 <DIO_U8_Get_Pin_Value+0x100>
				pin_value = Get_Bit(DIO_U8_PIND,Copy_U8_Pin_ID);
				break;
			}
		}
		else{
			return INVALID_PIN_ID;
 47c:	8f ef       	ldi	r24, 0xFF	; 255
 47e:	8c 83       	std	Y+4, r24	; 0x04
 480:	02 c0       	rjmp	.+4      	; 0x486 <DIO_U8_Get_Pin_Value+0x100>
		}
	}
	else{
		return INVALID_PORT_ID;
 482:	95 ef       	ldi	r25, 0xF5	; 245
 484:	9c 83       	std	Y+4, r25	; 0x04
 486:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	return pin_value;
}
 488:	26 96       	adiw	r28, 0x06	; 6
 48a:	0f b6       	in	r0, 0x3f	; 63
 48c:	f8 94       	cli
 48e:	de bf       	out	0x3e, r29	; 62
 490:	0f be       	out	0x3f, r0	; 63
 492:	cd bf       	out	0x3d, r28	; 61
 494:	cf 91       	pop	r28
 496:	df 91       	pop	r29
 498:	08 95       	ret

0000049a <DIO_U8_Set_Pin_Direction>:

u8 DIO_U8_Set_Pin_Direction(u8 Copy_U8_Port_ID, u8 Copy_U8_Pin_ID, u8 Copy_U8_Pin_Dir){
 49a:	df 93       	push	r29
 49c:	cf 93       	push	r28
 49e:	00 d0       	rcall	.+0      	; 0x4a0 <DIO_U8_Set_Pin_Direction+0x6>
 4a0:	00 d0       	rcall	.+0      	; 0x4a2 <DIO_U8_Set_Pin_Direction+0x8>
 4a2:	00 d0       	rcall	.+0      	; 0x4a4 <DIO_U8_Set_Pin_Direction+0xa>
 4a4:	cd b7       	in	r28, 0x3d	; 61
 4a6:	de b7       	in	r29, 0x3e	; 62
 4a8:	89 83       	std	Y+1, r24	; 0x01
 4aa:	6a 83       	std	Y+2, r22	; 0x02
 4ac:	4b 83       	std	Y+3, r20	; 0x03
	if( (Copy_U8_Port_ID <= GROUP_D) && (Copy_U8_Port_ID >= GROUP_A)){
 4ae:	89 81       	ldd	r24, Y+1	; 0x01
 4b0:	84 30       	cpi	r24, 0x04	; 4
 4b2:	08 f0       	brcs	.+2      	; 0x4b6 <DIO_U8_Set_Pin_Direction+0x1c>
 4b4:	da c0       	rjmp	.+436    	; 0x66a <DIO_U8_Set_Pin_Direction+0x1d0>
		if((Copy_U8_Pin_ID >=PIN0) && (Copy_U8_Pin_ID <=PIN7)){
 4b6:	8a 81       	ldd	r24, Y+2	; 0x02
 4b8:	88 30       	cpi	r24, 0x08	; 8
 4ba:	08 f0       	brcs	.+2      	; 0x4be <DIO_U8_Set_Pin_Direction+0x24>
 4bc:	d3 c0       	rjmp	.+422    	; 0x664 <DIO_U8_Set_Pin_Direction+0x1ca>
			switch (Copy_U8_Port_ID){
 4be:	89 81       	ldd	r24, Y+1	; 0x01
 4c0:	28 2f       	mov	r18, r24
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	3e 83       	std	Y+6, r19	; 0x06
 4c6:	2d 83       	std	Y+5, r18	; 0x05
 4c8:	8d 81       	ldd	r24, Y+5	; 0x05
 4ca:	9e 81       	ldd	r25, Y+6	; 0x06
 4cc:	81 30       	cpi	r24, 0x01	; 1
 4ce:	91 05       	cpc	r25, r1
 4d0:	09 f4       	brne	.+2      	; 0x4d4 <DIO_U8_Set_Pin_Direction+0x3a>
 4d2:	43 c0       	rjmp	.+134    	; 0x55a <DIO_U8_Set_Pin_Direction+0xc0>
 4d4:	2d 81       	ldd	r18, Y+5	; 0x05
 4d6:	3e 81       	ldd	r19, Y+6	; 0x06
 4d8:	22 30       	cpi	r18, 0x02	; 2
 4da:	31 05       	cpc	r19, r1
 4dc:	2c f4       	brge	.+10     	; 0x4e8 <DIO_U8_Set_Pin_Direction+0x4e>
 4de:	8d 81       	ldd	r24, Y+5	; 0x05
 4e0:	9e 81       	ldd	r25, Y+6	; 0x06
 4e2:	00 97       	sbiw	r24, 0x00	; 0
 4e4:	71 f0       	breq	.+28     	; 0x502 <DIO_U8_Set_Pin_Direction+0x68>
 4e6:	bc c0       	rjmp	.+376    	; 0x660 <DIO_U8_Set_Pin_Direction+0x1c6>
 4e8:	2d 81       	ldd	r18, Y+5	; 0x05
 4ea:	3e 81       	ldd	r19, Y+6	; 0x06
 4ec:	22 30       	cpi	r18, 0x02	; 2
 4ee:	31 05       	cpc	r19, r1
 4f0:	09 f4       	brne	.+2      	; 0x4f4 <DIO_U8_Set_Pin_Direction+0x5a>
 4f2:	5f c0       	rjmp	.+190    	; 0x5b2 <DIO_U8_Set_Pin_Direction+0x118>
 4f4:	8d 81       	ldd	r24, Y+5	; 0x05
 4f6:	9e 81       	ldd	r25, Y+6	; 0x06
 4f8:	83 30       	cpi	r24, 0x03	; 3
 4fa:	91 05       	cpc	r25, r1
 4fc:	09 f4       	brne	.+2      	; 0x500 <DIO_U8_Set_Pin_Direction+0x66>
 4fe:	85 c0       	rjmp	.+266    	; 0x60a <DIO_U8_Set_Pin_Direction+0x170>
 500:	af c0       	rjmp	.+350    	; 0x660 <DIO_U8_Set_Pin_Direction+0x1c6>
			case GROUP_A:
				Assign_Bit(DIO_U8_DDRA,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
 502:	8b 81       	ldd	r24, Y+3	; 0x03
 504:	81 30       	cpi	r24, 0x01	; 1
 506:	a1 f4       	brne	.+40     	; 0x530 <DIO_U8_Set_Pin_Direction+0x96>
 508:	aa e3       	ldi	r26, 0x3A	; 58
 50a:	b0 e0       	ldi	r27, 0x00	; 0
 50c:	ea e3       	ldi	r30, 0x3A	; 58
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	80 81       	ld	r24, Z
 512:	48 2f       	mov	r20, r24
 514:	8a 81       	ldd	r24, Y+2	; 0x02
 516:	28 2f       	mov	r18, r24
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	02 2e       	mov	r0, r18
 520:	02 c0       	rjmp	.+4      	; 0x526 <DIO_U8_Set_Pin_Direction+0x8c>
 522:	88 0f       	add	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	0a 94       	dec	r0
 528:	e2 f7       	brpl	.-8      	; 0x522 <DIO_U8_Set_Pin_Direction+0x88>
 52a:	84 2b       	or	r24, r20
 52c:	8c 93       	st	X, r24
 52e:	98 c0       	rjmp	.+304    	; 0x660 <DIO_U8_Set_Pin_Direction+0x1c6>
 530:	aa e3       	ldi	r26, 0x3A	; 58
 532:	b0 e0       	ldi	r27, 0x00	; 0
 534:	ea e3       	ldi	r30, 0x3A	; 58
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	80 81       	ld	r24, Z
 53a:	48 2f       	mov	r20, r24
 53c:	8a 81       	ldd	r24, Y+2	; 0x02
 53e:	28 2f       	mov	r18, r24
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	02 2e       	mov	r0, r18
 548:	02 c0       	rjmp	.+4      	; 0x54e <DIO_U8_Set_Pin_Direction+0xb4>
 54a:	88 0f       	add	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	0a 94       	dec	r0
 550:	e2 f7       	brpl	.-8      	; 0x54a <DIO_U8_Set_Pin_Direction+0xb0>
 552:	80 95       	com	r24
 554:	84 23       	and	r24, r20
 556:	8c 93       	st	X, r24
 558:	83 c0       	rjmp	.+262    	; 0x660 <DIO_U8_Set_Pin_Direction+0x1c6>
				break;
			case GROUP_B:
				Assign_Bit(DIO_U8_DDRB,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
 55a:	8b 81       	ldd	r24, Y+3	; 0x03
 55c:	81 30       	cpi	r24, 0x01	; 1
 55e:	a1 f4       	brne	.+40     	; 0x588 <DIO_U8_Set_Pin_Direction+0xee>
 560:	a7 e3       	ldi	r26, 0x37	; 55
 562:	b0 e0       	ldi	r27, 0x00	; 0
 564:	e7 e3       	ldi	r30, 0x37	; 55
 566:	f0 e0       	ldi	r31, 0x00	; 0
 568:	80 81       	ld	r24, Z
 56a:	48 2f       	mov	r20, r24
 56c:	8a 81       	ldd	r24, Y+2	; 0x02
 56e:	28 2f       	mov	r18, r24
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	02 2e       	mov	r0, r18
 578:	02 c0       	rjmp	.+4      	; 0x57e <DIO_U8_Set_Pin_Direction+0xe4>
 57a:	88 0f       	add	r24, r24
 57c:	99 1f       	adc	r25, r25
 57e:	0a 94       	dec	r0
 580:	e2 f7       	brpl	.-8      	; 0x57a <DIO_U8_Set_Pin_Direction+0xe0>
 582:	84 2b       	or	r24, r20
 584:	8c 93       	st	X, r24
 586:	6c c0       	rjmp	.+216    	; 0x660 <DIO_U8_Set_Pin_Direction+0x1c6>
 588:	a7 e3       	ldi	r26, 0x37	; 55
 58a:	b0 e0       	ldi	r27, 0x00	; 0
 58c:	e7 e3       	ldi	r30, 0x37	; 55
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	80 81       	ld	r24, Z
 592:	48 2f       	mov	r20, r24
 594:	8a 81       	ldd	r24, Y+2	; 0x02
 596:	28 2f       	mov	r18, r24
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	02 2e       	mov	r0, r18
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <DIO_U8_Set_Pin_Direction+0x10c>
 5a2:	88 0f       	add	r24, r24
 5a4:	99 1f       	adc	r25, r25
 5a6:	0a 94       	dec	r0
 5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <DIO_U8_Set_Pin_Direction+0x108>
 5aa:	80 95       	com	r24
 5ac:	84 23       	and	r24, r20
 5ae:	8c 93       	st	X, r24
 5b0:	57 c0       	rjmp	.+174    	; 0x660 <DIO_U8_Set_Pin_Direction+0x1c6>
				break;
			case GROUP_C:
				Assign_Bit(DIO_U8_DDRC,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
 5b2:	8b 81       	ldd	r24, Y+3	; 0x03
 5b4:	81 30       	cpi	r24, 0x01	; 1
 5b6:	a1 f4       	brne	.+40     	; 0x5e0 <DIO_U8_Set_Pin_Direction+0x146>
 5b8:	a4 e3       	ldi	r26, 0x34	; 52
 5ba:	b0 e0       	ldi	r27, 0x00	; 0
 5bc:	e4 e3       	ldi	r30, 0x34	; 52
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	80 81       	ld	r24, Z
 5c2:	48 2f       	mov	r20, r24
 5c4:	8a 81       	ldd	r24, Y+2	; 0x02
 5c6:	28 2f       	mov	r18, r24
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	02 2e       	mov	r0, r18
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_U8_Set_Pin_Direction+0x13c>
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	0a 94       	dec	r0
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_U8_Set_Pin_Direction+0x138>
 5da:	84 2b       	or	r24, r20
 5dc:	8c 93       	st	X, r24
 5de:	40 c0       	rjmp	.+128    	; 0x660 <DIO_U8_Set_Pin_Direction+0x1c6>
 5e0:	a4 e3       	ldi	r26, 0x34	; 52
 5e2:	b0 e0       	ldi	r27, 0x00	; 0
 5e4:	e4 e3       	ldi	r30, 0x34	; 52
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	80 81       	ld	r24, Z
 5ea:	48 2f       	mov	r20, r24
 5ec:	8a 81       	ldd	r24, Y+2	; 0x02
 5ee:	28 2f       	mov	r18, r24
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	02 2e       	mov	r0, r18
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <DIO_U8_Set_Pin_Direction+0x164>
 5fa:	88 0f       	add	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	0a 94       	dec	r0
 600:	e2 f7       	brpl	.-8      	; 0x5fa <DIO_U8_Set_Pin_Direction+0x160>
 602:	80 95       	com	r24
 604:	84 23       	and	r24, r20
 606:	8c 93       	st	X, r24
 608:	2b c0       	rjmp	.+86     	; 0x660 <DIO_U8_Set_Pin_Direction+0x1c6>
				break;
			case GROUP_D:
				Assign_Bit(DIO_U8_DDRD,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
 60a:	8b 81       	ldd	r24, Y+3	; 0x03
 60c:	81 30       	cpi	r24, 0x01	; 1
 60e:	a1 f4       	brne	.+40     	; 0x638 <DIO_U8_Set_Pin_Direction+0x19e>
 610:	a1 e3       	ldi	r26, 0x31	; 49
 612:	b0 e0       	ldi	r27, 0x00	; 0
 614:	e1 e3       	ldi	r30, 0x31	; 49
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	80 81       	ld	r24, Z
 61a:	48 2f       	mov	r20, r24
 61c:	8a 81       	ldd	r24, Y+2	; 0x02
 61e:	28 2f       	mov	r18, r24
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	02 2e       	mov	r0, r18
 628:	02 c0       	rjmp	.+4      	; 0x62e <DIO_U8_Set_Pin_Direction+0x194>
 62a:	88 0f       	add	r24, r24
 62c:	99 1f       	adc	r25, r25
 62e:	0a 94       	dec	r0
 630:	e2 f7       	brpl	.-8      	; 0x62a <DIO_U8_Set_Pin_Direction+0x190>
 632:	84 2b       	or	r24, r20
 634:	8c 93       	st	X, r24
 636:	14 c0       	rjmp	.+40     	; 0x660 <DIO_U8_Set_Pin_Direction+0x1c6>
 638:	a1 e3       	ldi	r26, 0x31	; 49
 63a:	b0 e0       	ldi	r27, 0x00	; 0
 63c:	e1 e3       	ldi	r30, 0x31	; 49
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	80 81       	ld	r24, Z
 642:	48 2f       	mov	r20, r24
 644:	8a 81       	ldd	r24, Y+2	; 0x02
 646:	28 2f       	mov	r18, r24
 648:	30 e0       	ldi	r19, 0x00	; 0
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	02 2e       	mov	r0, r18
 650:	02 c0       	rjmp	.+4      	; 0x656 <DIO_U8_Set_Pin_Direction+0x1bc>
 652:	88 0f       	add	r24, r24
 654:	99 1f       	adc	r25, r25
 656:	0a 94       	dec	r0
 658:	e2 f7       	brpl	.-8      	; 0x652 <DIO_U8_Set_Pin_Direction+0x1b8>
 65a:	80 95       	com	r24
 65c:	84 23       	and	r24, r20
 65e:	8c 93       	st	X, r24

	}
	else{
		return INVALID_PORT_ID;
	}
	return Success;
 660:	1c 82       	std	Y+4, r1	; 0x04
 662:	05 c0       	rjmp	.+10     	; 0x66e <DIO_U8_Set_Pin_Direction+0x1d4>
				Assign_Bit(DIO_U8_DDRD,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
				break;
			}
		}
		else{
			return INVALID_PIN_ID;
 664:	9f ef       	ldi	r25, 0xFF	; 255
 666:	9c 83       	std	Y+4, r25	; 0x04
 668:	02 c0       	rjmp	.+4      	; 0x66e <DIO_U8_Set_Pin_Direction+0x1d4>
		}

	}
	else{
		return INVALID_PORT_ID;
 66a:	25 ef       	ldi	r18, 0xF5	; 245
 66c:	2c 83       	std	Y+4, r18	; 0x04
 66e:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	return Success;

}
 670:	26 96       	adiw	r28, 0x06	; 6
 672:	0f b6       	in	r0, 0x3f	; 63
 674:	f8 94       	cli
 676:	de bf       	out	0x3e, r29	; 62
 678:	0f be       	out	0x3f, r0	; 63
 67a:	cd bf       	out	0x3d, r28	; 61
 67c:	cf 91       	pop	r28
 67e:	df 91       	pop	r29
 680:	08 95       	ret

00000682 <DIO_U8_Set_Port_Direction>:

u8 DIO_U8_Set_Port_Direction(u8 Copy_U8_Port_ID,u8 Copy_U8_Port_Dir){
 682:	df 93       	push	r29
 684:	cf 93       	push	r28
 686:	00 d0       	rcall	.+0      	; 0x688 <DIO_U8_Set_Port_Direction+0x6>
 688:	00 d0       	rcall	.+0      	; 0x68a <DIO_U8_Set_Port_Direction+0x8>
 68a:	0f 92       	push	r0
 68c:	cd b7       	in	r28, 0x3d	; 61
 68e:	de b7       	in	r29, 0x3e	; 62
 690:	89 83       	std	Y+1, r24	; 0x01
 692:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_U8_Port_ID <= GROUP_D) && (Copy_U8_Port_ID >= GROUP_A)){
 694:	89 81       	ldd	r24, Y+1	; 0x01
 696:	84 30       	cpi	r24, 0x04	; 4
 698:	a0 f5       	brcc	.+104    	; 0x702 <DIO_U8_Set_Port_Direction+0x80>
		switch(Copy_U8_Port_ID){
 69a:	89 81       	ldd	r24, Y+1	; 0x01
 69c:	28 2f       	mov	r18, r24
 69e:	30 e0       	ldi	r19, 0x00	; 0
 6a0:	3d 83       	std	Y+5, r19	; 0x05
 6a2:	2c 83       	std	Y+4, r18	; 0x04
 6a4:	8c 81       	ldd	r24, Y+4	; 0x04
 6a6:	9d 81       	ldd	r25, Y+5	; 0x05
 6a8:	81 30       	cpi	r24, 0x01	; 1
 6aa:	91 05       	cpc	r25, r1
 6ac:	d1 f0       	breq	.+52     	; 0x6e2 <DIO_U8_Set_Port_Direction+0x60>
 6ae:	2c 81       	ldd	r18, Y+4	; 0x04
 6b0:	3d 81       	ldd	r19, Y+5	; 0x05
 6b2:	22 30       	cpi	r18, 0x02	; 2
 6b4:	31 05       	cpc	r19, r1
 6b6:	2c f4       	brge	.+10     	; 0x6c2 <DIO_U8_Set_Port_Direction+0x40>
 6b8:	8c 81       	ldd	r24, Y+4	; 0x04
 6ba:	9d 81       	ldd	r25, Y+5	; 0x05
 6bc:	00 97       	sbiw	r24, 0x00	; 0
 6be:	61 f0       	breq	.+24     	; 0x6d8 <DIO_U8_Set_Port_Direction+0x56>
 6c0:	1e c0       	rjmp	.+60     	; 0x6fe <DIO_U8_Set_Port_Direction+0x7c>
 6c2:	2c 81       	ldd	r18, Y+4	; 0x04
 6c4:	3d 81       	ldd	r19, Y+5	; 0x05
 6c6:	22 30       	cpi	r18, 0x02	; 2
 6c8:	31 05       	cpc	r19, r1
 6ca:	81 f0       	breq	.+32     	; 0x6ec <DIO_U8_Set_Port_Direction+0x6a>
 6cc:	8c 81       	ldd	r24, Y+4	; 0x04
 6ce:	9d 81       	ldd	r25, Y+5	; 0x05
 6d0:	83 30       	cpi	r24, 0x03	; 3
 6d2:	91 05       	cpc	r25, r1
 6d4:	81 f0       	breq	.+32     	; 0x6f6 <DIO_U8_Set_Port_Direction+0x74>
 6d6:	13 c0       	rjmp	.+38     	; 0x6fe <DIO_U8_Set_Port_Direction+0x7c>
		case GROUP_A:
			DIO_U8_DDRA = Copy_U8_Port_Dir;
 6d8:	ea e3       	ldi	r30, 0x3A	; 58
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	8a 81       	ldd	r24, Y+2	; 0x02
 6de:	80 83       	st	Z, r24
 6e0:	0e c0       	rjmp	.+28     	; 0x6fe <DIO_U8_Set_Port_Direction+0x7c>
			break;
		case GROUP_B:
			DIO_U8_DDRB = Copy_U8_Port_Dir;
 6e2:	e7 e3       	ldi	r30, 0x37	; 55
 6e4:	f0 e0       	ldi	r31, 0x00	; 0
 6e6:	8a 81       	ldd	r24, Y+2	; 0x02
 6e8:	80 83       	st	Z, r24
 6ea:	09 c0       	rjmp	.+18     	; 0x6fe <DIO_U8_Set_Port_Direction+0x7c>
			break;
		case GROUP_C:
			DIO_U8_DDRC = Copy_U8_Port_Dir;
 6ec:	e4 e3       	ldi	r30, 0x34	; 52
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	8a 81       	ldd	r24, Y+2	; 0x02
 6f2:	80 83       	st	Z, r24
 6f4:	04 c0       	rjmp	.+8      	; 0x6fe <DIO_U8_Set_Port_Direction+0x7c>
			break;
		case GROUP_D:
			DIO_U8_DDRD = Copy_U8_Port_Dir;
 6f6:	e1 e3       	ldi	r30, 0x31	; 49
 6f8:	f0 e0       	ldi	r31, 0x00	; 0
 6fa:	8a 81       	ldd	r24, Y+2	; 0x02
 6fc:	80 83       	st	Z, r24
		}
	}
	else{
		return INVALID_PORT_ID;
	}
	return Success;
 6fe:	1b 82       	std	Y+3, r1	; 0x03
 700:	02 c0       	rjmp	.+4      	; 0x706 <DIO_U8_Set_Port_Direction+0x84>
			DIO_U8_DDRD = Copy_U8_Port_Dir;
			break;
		}
	}
	else{
		return INVALID_PORT_ID;
 702:	95 ef       	ldi	r25, 0xF5	; 245
 704:	9b 83       	std	Y+3, r25	; 0x03
 706:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	return Success;
}
 708:	0f 90       	pop	r0
 70a:	0f 90       	pop	r0
 70c:	0f 90       	pop	r0
 70e:	0f 90       	pop	r0
 710:	0f 90       	pop	r0
 712:	cf 91       	pop	r28
 714:	df 91       	pop	r29
 716:	08 95       	ret

00000718 <DIO_U8_Set_Port_Value>:

u8 DIO_U8_Set_Port_Value(u8 Copy_U8_Port_ID,u8 Copy_U8_Port_Value){   //lw 3aiz a4t8al 3la al value bta3t al port kolo;
 718:	df 93       	push	r29
 71a:	cf 93       	push	r28
 71c:	00 d0       	rcall	.+0      	; 0x71e <DIO_U8_Set_Port_Value+0x6>
 71e:	00 d0       	rcall	.+0      	; 0x720 <DIO_U8_Set_Port_Value+0x8>
 720:	0f 92       	push	r0
 722:	cd b7       	in	r28, 0x3d	; 61
 724:	de b7       	in	r29, 0x3e	; 62
 726:	89 83       	std	Y+1, r24	; 0x01
 728:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_U8_Port_ID <= GROUP_D) && (Copy_U8_Port_ID >= GROUP_A)){
 72a:	89 81       	ldd	r24, Y+1	; 0x01
 72c:	84 30       	cpi	r24, 0x04	; 4
 72e:	a0 f5       	brcc	.+104    	; 0x798 <DIO_U8_Set_Port_Value+0x80>
		switch(Copy_U8_Port_ID){
 730:	89 81       	ldd	r24, Y+1	; 0x01
 732:	28 2f       	mov	r18, r24
 734:	30 e0       	ldi	r19, 0x00	; 0
 736:	3d 83       	std	Y+5, r19	; 0x05
 738:	2c 83       	std	Y+4, r18	; 0x04
 73a:	8c 81       	ldd	r24, Y+4	; 0x04
 73c:	9d 81       	ldd	r25, Y+5	; 0x05
 73e:	81 30       	cpi	r24, 0x01	; 1
 740:	91 05       	cpc	r25, r1
 742:	d1 f0       	breq	.+52     	; 0x778 <DIO_U8_Set_Port_Value+0x60>
 744:	2c 81       	ldd	r18, Y+4	; 0x04
 746:	3d 81       	ldd	r19, Y+5	; 0x05
 748:	22 30       	cpi	r18, 0x02	; 2
 74a:	31 05       	cpc	r19, r1
 74c:	2c f4       	brge	.+10     	; 0x758 <DIO_U8_Set_Port_Value+0x40>
 74e:	8c 81       	ldd	r24, Y+4	; 0x04
 750:	9d 81       	ldd	r25, Y+5	; 0x05
 752:	00 97       	sbiw	r24, 0x00	; 0
 754:	61 f0       	breq	.+24     	; 0x76e <DIO_U8_Set_Port_Value+0x56>
 756:	1e c0       	rjmp	.+60     	; 0x794 <DIO_U8_Set_Port_Value+0x7c>
 758:	2c 81       	ldd	r18, Y+4	; 0x04
 75a:	3d 81       	ldd	r19, Y+5	; 0x05
 75c:	22 30       	cpi	r18, 0x02	; 2
 75e:	31 05       	cpc	r19, r1
 760:	81 f0       	breq	.+32     	; 0x782 <DIO_U8_Set_Port_Value+0x6a>
 762:	8c 81       	ldd	r24, Y+4	; 0x04
 764:	9d 81       	ldd	r25, Y+5	; 0x05
 766:	83 30       	cpi	r24, 0x03	; 3
 768:	91 05       	cpc	r25, r1
 76a:	81 f0       	breq	.+32     	; 0x78c <DIO_U8_Set_Port_Value+0x74>
 76c:	13 c0       	rjmp	.+38     	; 0x794 <DIO_U8_Set_Port_Value+0x7c>
		case GROUP_A:
			DIO_U8_PORTA = Copy_U8_Port_Value;
 76e:	eb e3       	ldi	r30, 0x3B	; 59
 770:	f0 e0       	ldi	r31, 0x00	; 0
 772:	8a 81       	ldd	r24, Y+2	; 0x02
 774:	80 83       	st	Z, r24
 776:	0e c0       	rjmp	.+28     	; 0x794 <DIO_U8_Set_Port_Value+0x7c>
			break;
		case GROUP_B:
			DIO_U8_PORTB = Copy_U8_Port_Value;
 778:	e8 e3       	ldi	r30, 0x38	; 56
 77a:	f0 e0       	ldi	r31, 0x00	; 0
 77c:	8a 81       	ldd	r24, Y+2	; 0x02
 77e:	80 83       	st	Z, r24
 780:	09 c0       	rjmp	.+18     	; 0x794 <DIO_U8_Set_Port_Value+0x7c>
			break;
		case GROUP_C:
			DIO_U8_PORTC = Copy_U8_Port_Value;
 782:	e5 e3       	ldi	r30, 0x35	; 53
 784:	f0 e0       	ldi	r31, 0x00	; 0
 786:	8a 81       	ldd	r24, Y+2	; 0x02
 788:	80 83       	st	Z, r24
 78a:	04 c0       	rjmp	.+8      	; 0x794 <DIO_U8_Set_Port_Value+0x7c>
			break;
		case GROUP_D:
			DIO_U8_PORTD = Copy_U8_Port_Value;
 78c:	e2 e3       	ldi	r30, 0x32	; 50
 78e:	f0 e0       	ldi	r31, 0x00	; 0
 790:	8a 81       	ldd	r24, Y+2	; 0x02
 792:	80 83       	st	Z, r24
	}
	else{
		return INVALID_PORT_ID;
	}

	return Success;
 794:	1b 82       	std	Y+3, r1	; 0x03
 796:	02 c0       	rjmp	.+4      	; 0x79c <DIO_U8_Set_Port_Value+0x84>
			DIO_U8_PORTD = Copy_U8_Port_Value;
			break;
		}
	}
	else{
		return INVALID_PORT_ID;
 798:	95 ef       	ldi	r25, 0xF5	; 245
 79a:	9b 83       	std	Y+3, r25	; 0x03
 79c:	8b 81       	ldd	r24, Y+3	; 0x03
	}

	return Success;
}
 79e:	0f 90       	pop	r0
 7a0:	0f 90       	pop	r0
 7a2:	0f 90       	pop	r0
 7a4:	0f 90       	pop	r0
 7a6:	0f 90       	pop	r0
 7a8:	cf 91       	pop	r28
 7aa:	df 91       	pop	r29
 7ac:	08 95       	ret

000007ae <DIO_U8_Get_Pin_Direction>:

u8 DIO_U8_Get_Pin_Direction(u8 Copy_U8_Port_ID, u8 Copy_U8_Pin_ID ){
 7ae:	df 93       	push	r29
 7b0:	cf 93       	push	r28
 7b2:	00 d0       	rcall	.+0      	; 0x7b4 <DIO_U8_Get_Pin_Direction+0x6>
 7b4:	00 d0       	rcall	.+0      	; 0x7b6 <DIO_U8_Get_Pin_Direction+0x8>
 7b6:	00 d0       	rcall	.+0      	; 0x7b8 <DIO_U8_Get_Pin_Direction+0xa>
 7b8:	cd b7       	in	r28, 0x3d	; 61
 7ba:	de b7       	in	r29, 0x3e	; 62
 7bc:	8a 83       	std	Y+2, r24	; 0x02
 7be:	6b 83       	std	Y+3, r22	; 0x03
	u8 Pin_direction;

	if ((Copy_U8_Port_ID <= GROUP_D) && (Copy_U8_Port_ID >= GROUP_A)){
 7c0:	8a 81       	ldd	r24, Y+2	; 0x02
 7c2:	84 30       	cpi	r24, 0x04	; 4
 7c4:	08 f0       	brcs	.+2      	; 0x7c8 <DIO_U8_Get_Pin_Direction+0x1a>
 7c6:	6a c0       	rjmp	.+212    	; 0x89c <__stack+0x3d>
		switch(Copy_U8_Port_ID){
 7c8:	8a 81       	ldd	r24, Y+2	; 0x02
 7ca:	28 2f       	mov	r18, r24
 7cc:	30 e0       	ldi	r19, 0x00	; 0
 7ce:	3e 83       	std	Y+6, r19	; 0x06
 7d0:	2d 83       	std	Y+5, r18	; 0x05
 7d2:	4d 81       	ldd	r20, Y+5	; 0x05
 7d4:	5e 81       	ldd	r21, Y+6	; 0x06
 7d6:	41 30       	cpi	r20, 0x01	; 1
 7d8:	51 05       	cpc	r21, r1
 7da:	41 f1       	breq	.+80     	; 0x82c <DIO_U8_Get_Pin_Direction+0x7e>
 7dc:	8d 81       	ldd	r24, Y+5	; 0x05
 7de:	9e 81       	ldd	r25, Y+6	; 0x06
 7e0:	82 30       	cpi	r24, 0x02	; 2
 7e2:	91 05       	cpc	r25, r1
 7e4:	34 f4       	brge	.+12     	; 0x7f2 <DIO_U8_Get_Pin_Direction+0x44>
 7e6:	2d 81       	ldd	r18, Y+5	; 0x05
 7e8:	3e 81       	ldd	r19, Y+6	; 0x06
 7ea:	21 15       	cp	r18, r1
 7ec:	31 05       	cpc	r19, r1
 7ee:	61 f0       	breq	.+24     	; 0x808 <DIO_U8_Get_Pin_Direction+0x5a>
 7f0:	52 c0       	rjmp	.+164    	; 0x896 <__stack+0x37>
 7f2:	4d 81       	ldd	r20, Y+5	; 0x05
 7f4:	5e 81       	ldd	r21, Y+6	; 0x06
 7f6:	42 30       	cpi	r20, 0x02	; 2
 7f8:	51 05       	cpc	r21, r1
 7fa:	51 f1       	breq	.+84     	; 0x850 <DIO_U8_Get_Pin_Direction+0xa2>
 7fc:	8d 81       	ldd	r24, Y+5	; 0x05
 7fe:	9e 81       	ldd	r25, Y+6	; 0x06
 800:	83 30       	cpi	r24, 0x03	; 3
 802:	91 05       	cpc	r25, r1
 804:	b9 f1       	breq	.+110    	; 0x874 <__stack+0x15>
 806:	47 c0       	rjmp	.+142    	; 0x896 <__stack+0x37>
		case GROUP_A:
			Pin_direction = Get_Bit(DIO_U8_DDRA,Copy_U8_Pin_ID);
 808:	ea e3       	ldi	r30, 0x3A	; 58
 80a:	f0 e0       	ldi	r31, 0x00	; 0
 80c:	80 81       	ld	r24, Z
 80e:	28 2f       	mov	r18, r24
 810:	30 e0       	ldi	r19, 0x00	; 0
 812:	8b 81       	ldd	r24, Y+3	; 0x03
 814:	88 2f       	mov	r24, r24
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	a9 01       	movw	r20, r18
 81a:	02 c0       	rjmp	.+4      	; 0x820 <DIO_U8_Get_Pin_Direction+0x72>
 81c:	55 95       	asr	r21
 81e:	47 95       	ror	r20
 820:	8a 95       	dec	r24
 822:	e2 f7       	brpl	.-8      	; 0x81c <DIO_U8_Get_Pin_Direction+0x6e>
 824:	ca 01       	movw	r24, r20
 826:	81 70       	andi	r24, 0x01	; 1
 828:	89 83       	std	Y+1, r24	; 0x01
 82a:	35 c0       	rjmp	.+106    	; 0x896 <__stack+0x37>
			break;
		case GROUP_B:
			Pin_direction = Get_Bit(DIO_U8_DDRB,Copy_U8_Pin_ID);
 82c:	e7 e3       	ldi	r30, 0x37	; 55
 82e:	f0 e0       	ldi	r31, 0x00	; 0
 830:	80 81       	ld	r24, Z
 832:	28 2f       	mov	r18, r24
 834:	30 e0       	ldi	r19, 0x00	; 0
 836:	8b 81       	ldd	r24, Y+3	; 0x03
 838:	88 2f       	mov	r24, r24
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	a9 01       	movw	r20, r18
 83e:	02 c0       	rjmp	.+4      	; 0x844 <DIO_U8_Get_Pin_Direction+0x96>
 840:	55 95       	asr	r21
 842:	47 95       	ror	r20
 844:	8a 95       	dec	r24
 846:	e2 f7       	brpl	.-8      	; 0x840 <DIO_U8_Get_Pin_Direction+0x92>
 848:	ca 01       	movw	r24, r20
 84a:	81 70       	andi	r24, 0x01	; 1
 84c:	89 83       	std	Y+1, r24	; 0x01
 84e:	23 c0       	rjmp	.+70     	; 0x896 <__stack+0x37>
			break;
		case GROUP_C:
			Pin_direction = Get_Bit(DIO_U8_DDRC,Copy_U8_Pin_ID);
 850:	e4 e3       	ldi	r30, 0x34	; 52
 852:	f0 e0       	ldi	r31, 0x00	; 0
 854:	80 81       	ld	r24, Z
 856:	28 2f       	mov	r18, r24
 858:	30 e0       	ldi	r19, 0x00	; 0
 85a:	8b 81       	ldd	r24, Y+3	; 0x03
 85c:	88 2f       	mov	r24, r24
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	a9 01       	movw	r20, r18
 862:	02 c0       	rjmp	.+4      	; 0x868 <__stack+0x9>
 864:	55 95       	asr	r21
 866:	47 95       	ror	r20
 868:	8a 95       	dec	r24
 86a:	e2 f7       	brpl	.-8      	; 0x864 <__stack+0x5>
 86c:	ca 01       	movw	r24, r20
 86e:	81 70       	andi	r24, 0x01	; 1
 870:	89 83       	std	Y+1, r24	; 0x01
 872:	11 c0       	rjmp	.+34     	; 0x896 <__stack+0x37>
			break;
		case GROUP_D:
			Pin_direction = Get_Bit(DIO_U8_DDRD,Copy_U8_Pin_ID);
 874:	e1 e3       	ldi	r30, 0x31	; 49
 876:	f0 e0       	ldi	r31, 0x00	; 0
 878:	80 81       	ld	r24, Z
 87a:	28 2f       	mov	r18, r24
 87c:	30 e0       	ldi	r19, 0x00	; 0
 87e:	8b 81       	ldd	r24, Y+3	; 0x03
 880:	88 2f       	mov	r24, r24
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	a9 01       	movw	r20, r18
 886:	02 c0       	rjmp	.+4      	; 0x88c <__stack+0x2d>
 888:	55 95       	asr	r21
 88a:	47 95       	ror	r20
 88c:	8a 95       	dec	r24
 88e:	e2 f7       	brpl	.-8      	; 0x888 <__stack+0x29>
 890:	ca 01       	movw	r24, r20
 892:	81 70       	andi	r24, 0x01	; 1
 894:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	else{
		return INVALID_PORT_ID;
	}
	return Pin_direction;
 896:	59 81       	ldd	r21, Y+1	; 0x01
 898:	5c 83       	std	Y+4, r21	; 0x04
 89a:	02 c0       	rjmp	.+4      	; 0x8a0 <__stack+0x41>
			Pin_direction = Get_Bit(DIO_U8_DDRD,Copy_U8_Pin_ID);
			break;
		}
	}
	else{
		return INVALID_PORT_ID;
 89c:	85 ef       	ldi	r24, 0xF5	; 245
 89e:	8c 83       	std	Y+4, r24	; 0x04
 8a0:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	return Pin_direction;
}
 8a2:	26 96       	adiw	r28, 0x06	; 6
 8a4:	0f b6       	in	r0, 0x3f	; 63
 8a6:	f8 94       	cli
 8a8:	de bf       	out	0x3e, r29	; 62
 8aa:	0f be       	out	0x3f, r0	; 63
 8ac:	cd bf       	out	0x3d, r28	; 61
 8ae:	cf 91       	pop	r28
 8b0:	df 91       	pop	r29
 8b2:	08 95       	ret

000008b4 <DIO_U8_Get_Port_Direction>:

u8 DIO_U8_Get_Port_Direction(u8 Copy_U8_Port_ID){
 8b4:	df 93       	push	r29
 8b6:	cf 93       	push	r28
 8b8:	00 d0       	rcall	.+0      	; 0x8ba <DIO_U8_Get_Port_Direction+0x6>
 8ba:	00 d0       	rcall	.+0      	; 0x8bc <DIO_U8_Get_Port_Direction+0x8>
 8bc:	0f 92       	push	r0
 8be:	cd b7       	in	r28, 0x3d	; 61
 8c0:	de b7       	in	r29, 0x3e	; 62
 8c2:	8a 83       	std	Y+2, r24	; 0x02
	u8 port_direction;
	if((Copy_U8_Port_ID <= GROUP_D) && (Copy_U8_Port_ID >= GROUP_A)){
 8c4:	8a 81       	ldd	r24, Y+2	; 0x02
 8c6:	84 30       	cpi	r24, 0x04	; 4
 8c8:	a8 f5       	brcc	.+106    	; 0x934 <DIO_U8_Get_Port_Direction+0x80>
		switch(Copy_U8_Port_ID){
 8ca:	8a 81       	ldd	r24, Y+2	; 0x02
 8cc:	28 2f       	mov	r18, r24
 8ce:	30 e0       	ldi	r19, 0x00	; 0
 8d0:	3d 83       	std	Y+5, r19	; 0x05
 8d2:	2c 83       	std	Y+4, r18	; 0x04
 8d4:	8c 81       	ldd	r24, Y+4	; 0x04
 8d6:	9d 81       	ldd	r25, Y+5	; 0x05
 8d8:	81 30       	cpi	r24, 0x01	; 1
 8da:	91 05       	cpc	r25, r1
 8dc:	d1 f0       	breq	.+52     	; 0x912 <DIO_U8_Get_Port_Direction+0x5e>
 8de:	2c 81       	ldd	r18, Y+4	; 0x04
 8e0:	3d 81       	ldd	r19, Y+5	; 0x05
 8e2:	22 30       	cpi	r18, 0x02	; 2
 8e4:	31 05       	cpc	r19, r1
 8e6:	2c f4       	brge	.+10     	; 0x8f2 <DIO_U8_Get_Port_Direction+0x3e>
 8e8:	8c 81       	ldd	r24, Y+4	; 0x04
 8ea:	9d 81       	ldd	r25, Y+5	; 0x05
 8ec:	00 97       	sbiw	r24, 0x00	; 0
 8ee:	61 f0       	breq	.+24     	; 0x908 <DIO_U8_Get_Port_Direction+0x54>
 8f0:	1e c0       	rjmp	.+60     	; 0x92e <DIO_U8_Get_Port_Direction+0x7a>
 8f2:	2c 81       	ldd	r18, Y+4	; 0x04
 8f4:	3d 81       	ldd	r19, Y+5	; 0x05
 8f6:	22 30       	cpi	r18, 0x02	; 2
 8f8:	31 05       	cpc	r19, r1
 8fa:	81 f0       	breq	.+32     	; 0x91c <DIO_U8_Get_Port_Direction+0x68>
 8fc:	8c 81       	ldd	r24, Y+4	; 0x04
 8fe:	9d 81       	ldd	r25, Y+5	; 0x05
 900:	83 30       	cpi	r24, 0x03	; 3
 902:	91 05       	cpc	r25, r1
 904:	81 f0       	breq	.+32     	; 0x926 <DIO_U8_Get_Port_Direction+0x72>
 906:	13 c0       	rjmp	.+38     	; 0x92e <DIO_U8_Get_Port_Direction+0x7a>
		case GROUP_A:
			port_direction = DIO_U8_DDRA;
 908:	ea e3       	ldi	r30, 0x3A	; 58
 90a:	f0 e0       	ldi	r31, 0x00	; 0
 90c:	80 81       	ld	r24, Z
 90e:	89 83       	std	Y+1, r24	; 0x01
 910:	0e c0       	rjmp	.+28     	; 0x92e <DIO_U8_Get_Port_Direction+0x7a>
			break;
		case GROUP_B:
			port_direction = DIO_U8_DDRB;
 912:	e7 e3       	ldi	r30, 0x37	; 55
 914:	f0 e0       	ldi	r31, 0x00	; 0
 916:	80 81       	ld	r24, Z
 918:	89 83       	std	Y+1, r24	; 0x01
 91a:	09 c0       	rjmp	.+18     	; 0x92e <DIO_U8_Get_Port_Direction+0x7a>
			break;
		case GROUP_C:
			port_direction = DIO_U8_DDRC;
 91c:	e4 e3       	ldi	r30, 0x34	; 52
 91e:	f0 e0       	ldi	r31, 0x00	; 0
 920:	80 81       	ld	r24, Z
 922:	89 83       	std	Y+1, r24	; 0x01
 924:	04 c0       	rjmp	.+8      	; 0x92e <DIO_U8_Get_Port_Direction+0x7a>
			break;
		case GROUP_D:
			port_direction = DIO_U8_DDRD;
 926:	e1 e3       	ldi	r30, 0x31	; 49
 928:	f0 e0       	ldi	r31, 0x00	; 0
 92a:	80 81       	ld	r24, Z
 92c:	89 83       	std	Y+1, r24	; 0x01
	}
	else{
		return INVALID_PORT_ID;
	}

	return port_direction;
 92e:	99 81       	ldd	r25, Y+1	; 0x01
 930:	9b 83       	std	Y+3, r25	; 0x03
 932:	02 c0       	rjmp	.+4      	; 0x938 <DIO_U8_Get_Port_Direction+0x84>
			break;

		}
	}
	else{
		return INVALID_PORT_ID;
 934:	25 ef       	ldi	r18, 0xF5	; 245
 936:	2b 83       	std	Y+3, r18	; 0x03
 938:	8b 81       	ldd	r24, Y+3	; 0x03
	}

	return port_direction;
}
 93a:	0f 90       	pop	r0
 93c:	0f 90       	pop	r0
 93e:	0f 90       	pop	r0
 940:	0f 90       	pop	r0
 942:	0f 90       	pop	r0
 944:	cf 91       	pop	r28
 946:	df 91       	pop	r29
 948:	08 95       	ret

0000094a <DIO_U8_Get_Port_Value>:


// get port value_U8_PINB = port_direction

u8 DIO_U8_Get_Port_Value(u8 Copy_U8_Port_ID,u8* Copy_U8_Port_Value){
 94a:	df 93       	push	r29
 94c:	cf 93       	push	r28
 94e:	00 d0       	rcall	.+0      	; 0x950 <DIO_U8_Get_Port_Value+0x6>
 950:	00 d0       	rcall	.+0      	; 0x952 <DIO_U8_Get_Port_Value+0x8>
 952:	00 d0       	rcall	.+0      	; 0x954 <DIO_U8_Get_Port_Value+0xa>
 954:	cd b7       	in	r28, 0x3d	; 61
 956:	de b7       	in	r29, 0x3e	; 62
 958:	89 83       	std	Y+1, r24	; 0x01
 95a:	7b 83       	std	Y+3, r23	; 0x03
 95c:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_U8_Port_ID <= GROUP_D) && (Copy_U8_Port_ID >= GROUP_A)){
 95e:	89 81       	ldd	r24, Y+1	; 0x01
 960:	84 30       	cpi	r24, 0x04	; 4
 962:	e0 f5       	brcc	.+120    	; 0x9dc <DIO_U8_Get_Port_Value+0x92>
		switch(Copy_U8_Port_ID){
 964:	89 81       	ldd	r24, Y+1	; 0x01
 966:	28 2f       	mov	r18, r24
 968:	30 e0       	ldi	r19, 0x00	; 0
 96a:	3e 83       	std	Y+6, r19	; 0x06
 96c:	2d 83       	std	Y+5, r18	; 0x05
 96e:	8d 81       	ldd	r24, Y+5	; 0x05
 970:	9e 81       	ldd	r25, Y+6	; 0x06
 972:	81 30       	cpi	r24, 0x01	; 1
 974:	91 05       	cpc	r25, r1
 976:	e1 f0       	breq	.+56     	; 0x9b0 <DIO_U8_Get_Port_Value+0x66>
 978:	2d 81       	ldd	r18, Y+5	; 0x05
 97a:	3e 81       	ldd	r19, Y+6	; 0x06
 97c:	22 30       	cpi	r18, 0x02	; 2
 97e:	31 05       	cpc	r19, r1
 980:	2c f4       	brge	.+10     	; 0x98c <DIO_U8_Get_Port_Value+0x42>
 982:	8d 81       	ldd	r24, Y+5	; 0x05
 984:	9e 81       	ldd	r25, Y+6	; 0x06
 986:	00 97       	sbiw	r24, 0x00	; 0
 988:	61 f0       	breq	.+24     	; 0x9a2 <DIO_U8_Get_Port_Value+0x58>
 98a:	26 c0       	rjmp	.+76     	; 0x9d8 <DIO_U8_Get_Port_Value+0x8e>
 98c:	2d 81       	ldd	r18, Y+5	; 0x05
 98e:	3e 81       	ldd	r19, Y+6	; 0x06
 990:	22 30       	cpi	r18, 0x02	; 2
 992:	31 05       	cpc	r19, r1
 994:	a1 f0       	breq	.+40     	; 0x9be <DIO_U8_Get_Port_Value+0x74>
 996:	8d 81       	ldd	r24, Y+5	; 0x05
 998:	9e 81       	ldd	r25, Y+6	; 0x06
 99a:	83 30       	cpi	r24, 0x03	; 3
 99c:	91 05       	cpc	r25, r1
 99e:	b1 f0       	breq	.+44     	; 0x9cc <DIO_U8_Get_Port_Value+0x82>
 9a0:	1b c0       	rjmp	.+54     	; 0x9d8 <DIO_U8_Get_Port_Value+0x8e>
			case GROUP_A:
				*Copy_U8_Port_Value = DIO_U8_PINA;
 9a2:	e9 e3       	ldi	r30, 0x39	; 57
 9a4:	f0 e0       	ldi	r31, 0x00	; 0
 9a6:	80 81       	ld	r24, Z
 9a8:	ea 81       	ldd	r30, Y+2	; 0x02
 9aa:	fb 81       	ldd	r31, Y+3	; 0x03
 9ac:	80 83       	st	Z, r24
 9ae:	14 c0       	rjmp	.+40     	; 0x9d8 <DIO_U8_Get_Port_Value+0x8e>
				break;
			case GROUP_B:
				*Copy_U8_Port_Value = DIO_U8_PINB;
 9b0:	e6 e3       	ldi	r30, 0x36	; 54
 9b2:	f0 e0       	ldi	r31, 0x00	; 0
 9b4:	80 81       	ld	r24, Z
 9b6:	ea 81       	ldd	r30, Y+2	; 0x02
 9b8:	fb 81       	ldd	r31, Y+3	; 0x03
 9ba:	80 83       	st	Z, r24
 9bc:	0d c0       	rjmp	.+26     	; 0x9d8 <DIO_U8_Get_Port_Value+0x8e>
				break;
			case GROUP_C:
				*Copy_U8_Port_Value = DIO_U8_PINC;
 9be:	e3 e3       	ldi	r30, 0x33	; 51
 9c0:	f0 e0       	ldi	r31, 0x00	; 0
 9c2:	80 81       	ld	r24, Z
 9c4:	ea 81       	ldd	r30, Y+2	; 0x02
 9c6:	fb 81       	ldd	r31, Y+3	; 0x03
 9c8:	80 83       	st	Z, r24
 9ca:	06 c0       	rjmp	.+12     	; 0x9d8 <DIO_U8_Get_Port_Value+0x8e>
				break;
			case GROUP_D:
				*Copy_U8_Port_Value = DIO_U8_PIND;
 9cc:	e0 e3       	ldi	r30, 0x30	; 48
 9ce:	f0 e0       	ldi	r31, 0x00	; 0
 9d0:	80 81       	ld	r24, Z
 9d2:	ea 81       	ldd	r30, Y+2	; 0x02
 9d4:	fb 81       	ldd	r31, Y+3	; 0x03
 9d6:	80 83       	st	Z, r24

	}
	else{
		return INVALID_PORT_ID;
	}
	return 0;
 9d8:	1c 82       	std	Y+4, r1	; 0x04
 9da:	02 c0       	rjmp	.+4      	; 0x9e0 <DIO_U8_Get_Port_Value+0x96>
				break;
		}

	}
	else{
		return INVALID_PORT_ID;
 9dc:	95 ef       	ldi	r25, 0xF5	; 245
 9de:	9c 83       	std	Y+4, r25	; 0x04
 9e0:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	return 0;
}
 9e2:	26 96       	adiw	r28, 0x06	; 6
 9e4:	0f b6       	in	r0, 0x3f	; 63
 9e6:	f8 94       	cli
 9e8:	de bf       	out	0x3e, r29	; 62
 9ea:	0f be       	out	0x3f, r0	; 63
 9ec:	cd bf       	out	0x3d, r28	; 61
 9ee:	cf 91       	pop	r28
 9f0:	df 91       	pop	r29
 9f2:	08 95       	ret

000009f4 <__vector_1>:
#include "EXTI_Interface.h"


void(*AVoidCallBack[3])(void);

void __vector_1(void){
 9f4:	1f 92       	push	r1
 9f6:	0f 92       	push	r0
 9f8:	0f b6       	in	r0, 0x3f	; 63
 9fa:	0f 92       	push	r0
 9fc:	11 24       	eor	r1, r1
 9fe:	2f 93       	push	r18
 a00:	3f 93       	push	r19
 a02:	4f 93       	push	r20
 a04:	5f 93       	push	r21
 a06:	6f 93       	push	r22
 a08:	7f 93       	push	r23
 a0a:	8f 93       	push	r24
 a0c:	9f 93       	push	r25
 a0e:	af 93       	push	r26
 a10:	bf 93       	push	r27
 a12:	ef 93       	push	r30
 a14:	ff 93       	push	r31
 a16:	df 93       	push	r29
 a18:	cf 93       	push	r28
 a1a:	cd b7       	in	r28, 0x3d	; 61
 a1c:	de b7       	in	r29, 0x3e	; 62
	if(AVoidCallBack[1]!= NULL){
 a1e:	80 91 62 00 	lds	r24, 0x0062
 a22:	90 91 63 00 	lds	r25, 0x0063
 a26:	00 97       	sbiw	r24, 0x00	; 0
 a28:	29 f0       	breq	.+10     	; 0xa34 <__vector_1+0x40>
		AVoidCallBack[1]();
 a2a:	e0 91 62 00 	lds	r30, 0x0062
 a2e:	f0 91 63 00 	lds	r31, 0x0063
 a32:	09 95       	icall
	}
}
 a34:	cf 91       	pop	r28
 a36:	df 91       	pop	r29
 a38:	ff 91       	pop	r31
 a3a:	ef 91       	pop	r30
 a3c:	bf 91       	pop	r27
 a3e:	af 91       	pop	r26
 a40:	9f 91       	pop	r25
 a42:	8f 91       	pop	r24
 a44:	7f 91       	pop	r23
 a46:	6f 91       	pop	r22
 a48:	5f 91       	pop	r21
 a4a:	4f 91       	pop	r20
 a4c:	3f 91       	pop	r19
 a4e:	2f 91       	pop	r18
 a50:	0f 90       	pop	r0
 a52:	0f be       	out	0x3f, r0	; 63
 a54:	0f 90       	pop	r0
 a56:	1f 90       	pop	r1
 a58:	18 95       	reti

00000a5a <__vector_2>:

void __vector_2(void){
 a5a:	1f 92       	push	r1
 a5c:	0f 92       	push	r0
 a5e:	0f b6       	in	r0, 0x3f	; 63
 a60:	0f 92       	push	r0
 a62:	11 24       	eor	r1, r1
 a64:	2f 93       	push	r18
 a66:	3f 93       	push	r19
 a68:	4f 93       	push	r20
 a6a:	5f 93       	push	r21
 a6c:	6f 93       	push	r22
 a6e:	7f 93       	push	r23
 a70:	8f 93       	push	r24
 a72:	9f 93       	push	r25
 a74:	af 93       	push	r26
 a76:	bf 93       	push	r27
 a78:	ef 93       	push	r30
 a7a:	ff 93       	push	r31
 a7c:	df 93       	push	r29
 a7e:	cf 93       	push	r28
 a80:	cd b7       	in	r28, 0x3d	; 61
 a82:	de b7       	in	r29, 0x3e	; 62
	if(AVoidCallBack[2]!= NULL){
 a84:	80 91 64 00 	lds	r24, 0x0064
 a88:	90 91 65 00 	lds	r25, 0x0065
 a8c:	00 97       	sbiw	r24, 0x00	; 0
 a8e:	29 f0       	breq	.+10     	; 0xa9a <__vector_2+0x40>
		AVoidCallBack[2]();
 a90:	e0 91 64 00 	lds	r30, 0x0064
 a94:	f0 91 65 00 	lds	r31, 0x0065
 a98:	09 95       	icall
	}
}
 a9a:	cf 91       	pop	r28
 a9c:	df 91       	pop	r29
 a9e:	ff 91       	pop	r31
 aa0:	ef 91       	pop	r30
 aa2:	bf 91       	pop	r27
 aa4:	af 91       	pop	r26
 aa6:	9f 91       	pop	r25
 aa8:	8f 91       	pop	r24
 aaa:	7f 91       	pop	r23
 aac:	6f 91       	pop	r22
 aae:	5f 91       	pop	r21
 ab0:	4f 91       	pop	r20
 ab2:	3f 91       	pop	r19
 ab4:	2f 91       	pop	r18
 ab6:	0f 90       	pop	r0
 ab8:	0f be       	out	0x3f, r0	; 63
 aba:	0f 90       	pop	r0
 abc:	1f 90       	pop	r1
 abe:	18 95       	reti

00000ac0 <__vector_3>:

void __vector_3(void){
 ac0:	1f 92       	push	r1
 ac2:	0f 92       	push	r0
 ac4:	0f b6       	in	r0, 0x3f	; 63
 ac6:	0f 92       	push	r0
 ac8:	11 24       	eor	r1, r1
 aca:	2f 93       	push	r18
 acc:	3f 93       	push	r19
 ace:	4f 93       	push	r20
 ad0:	5f 93       	push	r21
 ad2:	6f 93       	push	r22
 ad4:	7f 93       	push	r23
 ad6:	8f 93       	push	r24
 ad8:	9f 93       	push	r25
 ada:	af 93       	push	r26
 adc:	bf 93       	push	r27
 ade:	ef 93       	push	r30
 ae0:	ff 93       	push	r31
 ae2:	df 93       	push	r29
 ae4:	cf 93       	push	r28
 ae6:	cd b7       	in	r28, 0x3d	; 61
 ae8:	de b7       	in	r29, 0x3e	; 62
	if(AVoidCallBack[0]!= NULL){
 aea:	80 91 60 00 	lds	r24, 0x0060
 aee:	90 91 61 00 	lds	r25, 0x0061
 af2:	00 97       	sbiw	r24, 0x00	; 0
 af4:	29 f0       	breq	.+10     	; 0xb00 <__vector_3+0x40>
		AVoidCallBack[0]();
 af6:	e0 91 60 00 	lds	r30, 0x0060
 afa:	f0 91 61 00 	lds	r31, 0x0061
 afe:	09 95       	icall
	}
}
 b00:	cf 91       	pop	r28
 b02:	df 91       	pop	r29
 b04:	ff 91       	pop	r31
 b06:	ef 91       	pop	r30
 b08:	bf 91       	pop	r27
 b0a:	af 91       	pop	r26
 b0c:	9f 91       	pop	r25
 b0e:	8f 91       	pop	r24
 b10:	7f 91       	pop	r23
 b12:	6f 91       	pop	r22
 b14:	5f 91       	pop	r21
 b16:	4f 91       	pop	r20
 b18:	3f 91       	pop	r19
 b1a:	2f 91       	pop	r18
 b1c:	0f 90       	pop	r0
 b1e:	0f be       	out	0x3f, r0	; 63
 b20:	0f 90       	pop	r0
 b22:	1f 90       	pop	r1
 b24:	18 95       	reti

00000b26 <EXTI_Void_Global_Enable_Disable>:

void EXTI_Void_Global_Enable_Disable(u8 Copy_u8_Ein_Dis){
 b26:	df 93       	push	r29
 b28:	cf 93       	push	r28
 b2a:	00 d0       	rcall	.+0      	; 0xb2c <EXTI_Void_Global_Enable_Disable+0x6>
 b2c:	0f 92       	push	r0
 b2e:	cd b7       	in	r28, 0x3d	; 61
 b30:	de b7       	in	r29, 0x3e	; 62
 b32:	89 83       	std	Y+1, r24	; 0x01


		switch(Copy_u8_Ein_Dis){
 b34:	89 81       	ldd	r24, Y+1	; 0x01
 b36:	28 2f       	mov	r18, r24
 b38:	30 e0       	ldi	r19, 0x00	; 0
 b3a:	3b 83       	std	Y+3, r19	; 0x03
 b3c:	2a 83       	std	Y+2, r18	; 0x02
 b3e:	8a 81       	ldd	r24, Y+2	; 0x02
 b40:	9b 81       	ldd	r25, Y+3	; 0x03
 b42:	00 97       	sbiw	r24, 0x00	; 0
 b44:	69 f0       	breq	.+26     	; 0xb60 <EXTI_Void_Global_Enable_Disable+0x3a>
 b46:	2a 81       	ldd	r18, Y+2	; 0x02
 b48:	3b 81       	ldd	r19, Y+3	; 0x03
 b4a:	21 30       	cpi	r18, 0x01	; 1
 b4c:	31 05       	cpc	r19, r1
 b4e:	79 f4       	brne	.+30     	; 0xb6e <EXTI_Void_Global_Enable_Disable+0x48>
		case EXTI_U8_Global_Enable:
			Set_Bit(EXTI_U8_SREG,EXTI_U8_Global_Int_PIN);
 b50:	af e5       	ldi	r26, 0x5F	; 95
 b52:	b0 e0       	ldi	r27, 0x00	; 0
 b54:	ef e5       	ldi	r30, 0x5F	; 95
 b56:	f0 e0       	ldi	r31, 0x00	; 0
 b58:	80 81       	ld	r24, Z
 b5a:	80 68       	ori	r24, 0x80	; 128
 b5c:	8c 93       	st	X, r24
 b5e:	07 c0       	rjmp	.+14     	; 0xb6e <EXTI_Void_Global_Enable_Disable+0x48>
			break;
		case EXTI_U8_Global_Disable:
			Clear_Bit(EXTI_U8_SREG,EXTI_U8_Global_Int_PIN);
 b60:	af e5       	ldi	r26, 0x5F	; 95
 b62:	b0 e0       	ldi	r27, 0x00	; 0
 b64:	ef e5       	ldi	r30, 0x5F	; 95
 b66:	f0 e0       	ldi	r31, 0x00	; 0
 b68:	80 81       	ld	r24, Z
 b6a:	8f 77       	andi	r24, 0x7F	; 127
 b6c:	8c 93       	st	X, r24
			break;
		}

}
 b6e:	0f 90       	pop	r0
 b70:	0f 90       	pop	r0
 b72:	0f 90       	pop	r0
 b74:	cf 91       	pop	r28
 b76:	df 91       	pop	r29
 b78:	08 95       	ret

00000b7a <EXTI_Void_Ein_Dis>:

void EXTI_Void_Ein_Dis(u8 Copy_U8_INT_Index, u8 Copy_U8_Ein_Dis){
 b7a:	df 93       	push	r29
 b7c:	cf 93       	push	r28
 b7e:	00 d0       	rcall	.+0      	; 0xb80 <EXTI_Void_Ein_Dis+0x6>
 b80:	cd b7       	in	r28, 0x3d	; 61
 b82:	de b7       	in	r29, 0x3e	; 62
 b84:	89 83       	std	Y+1, r24	; 0x01
 b86:	6a 83       	std	Y+2, r22	; 0x02
	Assign_Bit(EXTI_U8_GICR,Copy_U8_INT_Index,Copy_U8_Ein_Dis);
 b88:	8a 81       	ldd	r24, Y+2	; 0x02
 b8a:	81 30       	cpi	r24, 0x01	; 1
 b8c:	a1 f4       	brne	.+40     	; 0xbb6 <EXTI_Void_Ein_Dis+0x3c>
 b8e:	ab e5       	ldi	r26, 0x5B	; 91
 b90:	b0 e0       	ldi	r27, 0x00	; 0
 b92:	eb e5       	ldi	r30, 0x5B	; 91
 b94:	f0 e0       	ldi	r31, 0x00	; 0
 b96:	80 81       	ld	r24, Z
 b98:	48 2f       	mov	r20, r24
 b9a:	89 81       	ldd	r24, Y+1	; 0x01
 b9c:	28 2f       	mov	r18, r24
 b9e:	30 e0       	ldi	r19, 0x00	; 0
 ba0:	81 e0       	ldi	r24, 0x01	; 1
 ba2:	90 e0       	ldi	r25, 0x00	; 0
 ba4:	02 2e       	mov	r0, r18
 ba6:	02 c0       	rjmp	.+4      	; 0xbac <EXTI_Void_Ein_Dis+0x32>
 ba8:	88 0f       	add	r24, r24
 baa:	99 1f       	adc	r25, r25
 bac:	0a 94       	dec	r0
 bae:	e2 f7       	brpl	.-8      	; 0xba8 <EXTI_Void_Ein_Dis+0x2e>
 bb0:	84 2b       	or	r24, r20
 bb2:	8c 93       	st	X, r24
 bb4:	14 c0       	rjmp	.+40     	; 0xbde <EXTI_Void_Ein_Dis+0x64>
 bb6:	ab e5       	ldi	r26, 0x5B	; 91
 bb8:	b0 e0       	ldi	r27, 0x00	; 0
 bba:	eb e5       	ldi	r30, 0x5B	; 91
 bbc:	f0 e0       	ldi	r31, 0x00	; 0
 bbe:	80 81       	ld	r24, Z
 bc0:	48 2f       	mov	r20, r24
 bc2:	89 81       	ldd	r24, Y+1	; 0x01
 bc4:	28 2f       	mov	r18, r24
 bc6:	30 e0       	ldi	r19, 0x00	; 0
 bc8:	81 e0       	ldi	r24, 0x01	; 1
 bca:	90 e0       	ldi	r25, 0x00	; 0
 bcc:	02 2e       	mov	r0, r18
 bce:	02 c0       	rjmp	.+4      	; 0xbd4 <EXTI_Void_Ein_Dis+0x5a>
 bd0:	88 0f       	add	r24, r24
 bd2:	99 1f       	adc	r25, r25
 bd4:	0a 94       	dec	r0
 bd6:	e2 f7       	brpl	.-8      	; 0xbd0 <EXTI_Void_Ein_Dis+0x56>
 bd8:	80 95       	com	r24
 bda:	84 23       	and	r24, r20
 bdc:	8c 93       	st	X, r24
}
 bde:	0f 90       	pop	r0
 be0:	0f 90       	pop	r0
 be2:	cf 91       	pop	r28
 be4:	df 91       	pop	r29
 be6:	08 95       	ret

00000be8 <EXTI_U8_Set_Level>:

void EXTI_U8_Set_Level (u8 Copy_U8_Int_Index, u8 Copy_U8_Int_Level){
 be8:	df 93       	push	r29
 bea:	cf 93       	push	r28
 bec:	00 d0       	rcall	.+0      	; 0xbee <EXTI_U8_Set_Level+0x6>
 bee:	00 d0       	rcall	.+0      	; 0xbf0 <EXTI_U8_Set_Level+0x8>
 bf0:	cd b7       	in	r28, 0x3d	; 61
 bf2:	de b7       	in	r29, 0x3e	; 62
 bf4:	89 83       	std	Y+1, r24	; 0x01
 bf6:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8_Int_Index){
 bf8:	89 81       	ldd	r24, Y+1	; 0x01
 bfa:	28 2f       	mov	r18, r24
 bfc:	30 e0       	ldi	r19, 0x00	; 0
 bfe:	3c 83       	std	Y+4, r19	; 0x04
 c00:	2b 83       	std	Y+3, r18	; 0x03
 c02:	8b 81       	ldd	r24, Y+3	; 0x03
 c04:	9c 81       	ldd	r25, Y+4	; 0x04
 c06:	86 30       	cpi	r24, 0x06	; 6
 c08:	91 05       	cpc	r25, r1
 c0a:	61 f0       	breq	.+24     	; 0xc24 <EXTI_U8_Set_Level+0x3c>
 c0c:	2b 81       	ldd	r18, Y+3	; 0x03
 c0e:	3c 81       	ldd	r19, Y+4	; 0x04
 c10:	27 30       	cpi	r18, 0x07	; 7
 c12:	31 05       	cpc	r19, r1
 c14:	a9 f1       	breq	.+106    	; 0xc80 <EXTI_U8_Set_Level+0x98>
 c16:	8b 81       	ldd	r24, Y+3	; 0x03
 c18:	9c 81       	ldd	r25, Y+4	; 0x04
 c1a:	85 30       	cpi	r24, 0x05	; 5
 c1c:	91 05       	cpc	r25, r1
 c1e:	09 f4       	brne	.+2      	; 0xc22 <EXTI_U8_Set_Level+0x3a>
 c20:	5d c0       	rjmp	.+186    	; 0xcdc <EXTI_U8_Set_Level+0xf4>
 c22:	72 c0       	rjmp	.+228    	; 0xd08 <EXTI_U8_Set_Level+0x120>
	case EXTI_U8_INT0:
		Assign_Bit(EXTI_U8_MCUCR, EXTI_U8_INT0_Set_LVL_Bit_0, Get_Bit(Copy_U8_Int_Level,BIT0));
 c24:	8a 81       	ldd	r24, Y+2	; 0x02
 c26:	88 2f       	mov	r24, r24
 c28:	90 e0       	ldi	r25, 0x00	; 0
 c2a:	81 70       	andi	r24, 0x01	; 1
 c2c:	90 70       	andi	r25, 0x00	; 0
 c2e:	88 23       	and	r24, r24
 c30:	41 f0       	breq	.+16     	; 0xc42 <EXTI_U8_Set_Level+0x5a>
 c32:	a5 e5       	ldi	r26, 0x55	; 85
 c34:	b0 e0       	ldi	r27, 0x00	; 0
 c36:	e5 e5       	ldi	r30, 0x55	; 85
 c38:	f0 e0       	ldi	r31, 0x00	; 0
 c3a:	80 81       	ld	r24, Z
 c3c:	81 60       	ori	r24, 0x01	; 1
 c3e:	8c 93       	st	X, r24
 c40:	07 c0       	rjmp	.+14     	; 0xc50 <EXTI_U8_Set_Level+0x68>
 c42:	a5 e5       	ldi	r26, 0x55	; 85
 c44:	b0 e0       	ldi	r27, 0x00	; 0
 c46:	e5 e5       	ldi	r30, 0x55	; 85
 c48:	f0 e0       	ldi	r31, 0x00	; 0
 c4a:	80 81       	ld	r24, Z
 c4c:	8e 7f       	andi	r24, 0xFE	; 254
 c4e:	8c 93       	st	X, r24
		Assign_Bit(EXTI_U8_MCUCR, EXTI_U8_INT0_Set_LVL_Bit_1, Get_Bit(Copy_U8_Int_Level,BIT1));
 c50:	8a 81       	ldd	r24, Y+2	; 0x02
 c52:	86 95       	lsr	r24
 c54:	88 2f       	mov	r24, r24
 c56:	90 e0       	ldi	r25, 0x00	; 0
 c58:	81 70       	andi	r24, 0x01	; 1
 c5a:	90 70       	andi	r25, 0x00	; 0
 c5c:	88 23       	and	r24, r24
 c5e:	41 f0       	breq	.+16     	; 0xc70 <EXTI_U8_Set_Level+0x88>
 c60:	a5 e5       	ldi	r26, 0x55	; 85
 c62:	b0 e0       	ldi	r27, 0x00	; 0
 c64:	e5 e5       	ldi	r30, 0x55	; 85
 c66:	f0 e0       	ldi	r31, 0x00	; 0
 c68:	80 81       	ld	r24, Z
 c6a:	82 60       	ori	r24, 0x02	; 2
 c6c:	8c 93       	st	X, r24
 c6e:	4c c0       	rjmp	.+152    	; 0xd08 <EXTI_U8_Set_Level+0x120>
 c70:	a5 e5       	ldi	r26, 0x55	; 85
 c72:	b0 e0       	ldi	r27, 0x00	; 0
 c74:	e5 e5       	ldi	r30, 0x55	; 85
 c76:	f0 e0       	ldi	r31, 0x00	; 0
 c78:	80 81       	ld	r24, Z
 c7a:	8d 7f       	andi	r24, 0xFD	; 253
 c7c:	8c 93       	st	X, r24
 c7e:	44 c0       	rjmp	.+136    	; 0xd08 <EXTI_U8_Set_Level+0x120>
		break;
	case EXTI_U8_INT1:
		Assign_Bit(EXTI_U8_MCUCR, EXTI_U8_INT1_Set_LVL_Bit_2, Get_Bit(Copy_U8_Int_Level,BIT0));
 c80:	8a 81       	ldd	r24, Y+2	; 0x02
 c82:	88 2f       	mov	r24, r24
 c84:	90 e0       	ldi	r25, 0x00	; 0
 c86:	81 70       	andi	r24, 0x01	; 1
 c88:	90 70       	andi	r25, 0x00	; 0
 c8a:	88 23       	and	r24, r24
 c8c:	41 f0       	breq	.+16     	; 0xc9e <EXTI_U8_Set_Level+0xb6>
 c8e:	a5 e5       	ldi	r26, 0x55	; 85
 c90:	b0 e0       	ldi	r27, 0x00	; 0
 c92:	e5 e5       	ldi	r30, 0x55	; 85
 c94:	f0 e0       	ldi	r31, 0x00	; 0
 c96:	80 81       	ld	r24, Z
 c98:	84 60       	ori	r24, 0x04	; 4
 c9a:	8c 93       	st	X, r24
 c9c:	07 c0       	rjmp	.+14     	; 0xcac <EXTI_U8_Set_Level+0xc4>
 c9e:	a5 e5       	ldi	r26, 0x55	; 85
 ca0:	b0 e0       	ldi	r27, 0x00	; 0
 ca2:	e5 e5       	ldi	r30, 0x55	; 85
 ca4:	f0 e0       	ldi	r31, 0x00	; 0
 ca6:	80 81       	ld	r24, Z
 ca8:	8b 7f       	andi	r24, 0xFB	; 251
 caa:	8c 93       	st	X, r24
		Assign_Bit(EXTI_U8_MCUCR, EXTI_U8_INT1_Set_LVL_Bit_3, Get_Bit(Copy_U8_Int_Level,BIT1));
 cac:	8a 81       	ldd	r24, Y+2	; 0x02
 cae:	86 95       	lsr	r24
 cb0:	88 2f       	mov	r24, r24
 cb2:	90 e0       	ldi	r25, 0x00	; 0
 cb4:	81 70       	andi	r24, 0x01	; 1
 cb6:	90 70       	andi	r25, 0x00	; 0
 cb8:	88 23       	and	r24, r24
 cba:	41 f0       	breq	.+16     	; 0xccc <EXTI_U8_Set_Level+0xe4>
 cbc:	a5 e5       	ldi	r26, 0x55	; 85
 cbe:	b0 e0       	ldi	r27, 0x00	; 0
 cc0:	e5 e5       	ldi	r30, 0x55	; 85
 cc2:	f0 e0       	ldi	r31, 0x00	; 0
 cc4:	80 81       	ld	r24, Z
 cc6:	88 60       	ori	r24, 0x08	; 8
 cc8:	8c 93       	st	X, r24
 cca:	1e c0       	rjmp	.+60     	; 0xd08 <EXTI_U8_Set_Level+0x120>
 ccc:	a5 e5       	ldi	r26, 0x55	; 85
 cce:	b0 e0       	ldi	r27, 0x00	; 0
 cd0:	e5 e5       	ldi	r30, 0x55	; 85
 cd2:	f0 e0       	ldi	r31, 0x00	; 0
 cd4:	80 81       	ld	r24, Z
 cd6:	87 7f       	andi	r24, 0xF7	; 247
 cd8:	8c 93       	st	X, r24
 cda:	16 c0       	rjmp	.+44     	; 0xd08 <EXTI_U8_Set_Level+0x120>
		break;
	case EXTI_U8_INT2:
		Assign_Bit(EXTI_U8_MCUCSR, EXTI_U8_INT2_Set_LVL_Bit_6, Get_Bit(Copy_U8_Int_Level,BIT0));
 cdc:	8a 81       	ldd	r24, Y+2	; 0x02
 cde:	88 2f       	mov	r24, r24
 ce0:	90 e0       	ldi	r25, 0x00	; 0
 ce2:	81 70       	andi	r24, 0x01	; 1
 ce4:	90 70       	andi	r25, 0x00	; 0
 ce6:	88 23       	and	r24, r24
 ce8:	41 f0       	breq	.+16     	; 0xcfa <EXTI_U8_Set_Level+0x112>
 cea:	a4 e5       	ldi	r26, 0x54	; 84
 cec:	b0 e0       	ldi	r27, 0x00	; 0
 cee:	e4 e5       	ldi	r30, 0x54	; 84
 cf0:	f0 e0       	ldi	r31, 0x00	; 0
 cf2:	80 81       	ld	r24, Z
 cf4:	80 64       	ori	r24, 0x40	; 64
 cf6:	8c 93       	st	X, r24
 cf8:	07 c0       	rjmp	.+14     	; 0xd08 <EXTI_U8_Set_Level+0x120>
 cfa:	a4 e5       	ldi	r26, 0x54	; 84
 cfc:	b0 e0       	ldi	r27, 0x00	; 0
 cfe:	e4 e5       	ldi	r30, 0x54	; 84
 d00:	f0 e0       	ldi	r31, 0x00	; 0
 d02:	80 81       	ld	r24, Z
 d04:	8f 7b       	andi	r24, 0xBF	; 191
 d06:	8c 93       	st	X, r24
		break;

	}
}
 d08:	0f 90       	pop	r0
 d0a:	0f 90       	pop	r0
 d0c:	0f 90       	pop	r0
 d0e:	0f 90       	pop	r0
 d10:	cf 91       	pop	r28
 d12:	df 91       	pop	r29
 d14:	08 95       	ret

00000d16 <EXTI_Void_Set_Call_Back>:


void EXTI_Void_Set_Call_Back(u8 Copy_U8_Int_index, void (*PVOID_CallBack)(void)){
 d16:	df 93       	push	r29
 d18:	cf 93       	push	r28
 d1a:	00 d0       	rcall	.+0      	; 0xd1c <EXTI_Void_Set_Call_Back+0x6>
 d1c:	0f 92       	push	r0
 d1e:	cd b7       	in	r28, 0x3d	; 61
 d20:	de b7       	in	r29, 0x3e	; 62
 d22:	89 83       	std	Y+1, r24	; 0x01
 d24:	7b 83       	std	Y+3, r23	; 0x03
 d26:	6a 83       	std	Y+2, r22	; 0x02
	AVoidCallBack[Copy_U8_Int_index-mapping]= PVOID_CallBack;
 d28:	89 81       	ldd	r24, Y+1	; 0x01
 d2a:	88 2f       	mov	r24, r24
 d2c:	90 e0       	ldi	r25, 0x00	; 0
 d2e:	05 97       	sbiw	r24, 0x05	; 5
 d30:	88 0f       	add	r24, r24
 d32:	99 1f       	adc	r25, r25
 d34:	fc 01       	movw	r30, r24
 d36:	e0 5a       	subi	r30, 0xA0	; 160
 d38:	ff 4f       	sbci	r31, 0xFF	; 255
 d3a:	8a 81       	ldd	r24, Y+2	; 0x02
 d3c:	9b 81       	ldd	r25, Y+3	; 0x03
 d3e:	91 83       	std	Z+1, r25	; 0x01
 d40:	80 83       	st	Z, r24
}
 d42:	0f 90       	pop	r0
 d44:	0f 90       	pop	r0
 d46:	0f 90       	pop	r0
 d48:	cf 91       	pop	r28
 d4a:	df 91       	pop	r29
 d4c:	08 95       	ret

00000d4e <main>:
#include "TIMER_0_CM_Interface.h"
#include "TIMER_0_CM_Private.h"
#include "ADC_Interface.h"


int main(){
 d4e:	0f 93       	push	r16
 d50:	1f 93       	push	r17
 d52:	df 93       	push	r29
 d54:	cf 93       	push	r28
 d56:	cd b7       	in	r28, 0x3d	; 61
 d58:	de b7       	in	r29, 0x3e	; 62
	ADC_Void_Init();
 d5a:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_Void_Init>
	DIO_U8_Set_Pin_Direction(GROUP_A,PIN0,INPUT);
 d5e:	80 e0       	ldi	r24, 0x00	; 0
 d60:	60 e0       	ldi	r22, 0x00	; 0
 d62:	40 e0       	ldi	r20, 0x00	; 0
 d64:	0e 94 4d 02 	call	0x49a	; 0x49a <DIO_U8_Set_Pin_Direction>
	DIO_U8_Set_Pin_Direction(GROUP_B,PIN3,OUTPUT);
 d68:	81 e0       	ldi	r24, 0x01	; 1
 d6a:	63 e0       	ldi	r22, 0x03	; 3
 d6c:	41 e0       	ldi	r20, 0x01	; 1
 d6e:	0e 94 4d 02 	call	0x49a	; 0x49a <DIO_U8_Set_Pin_Direction>

	//TIMER0_U8_OCR0=200;
	TIMER0_U8_TCCR0 = 0B01111010; //Fast pwm module
 d72:	e3 e5       	ldi	r30, 0x53	; 83
 d74:	f0 e0       	ldi	r31, 0x00	; 0
 d76:	8a e7       	ldi	r24, 0x7A	; 122
 d78:	80 83       	st	Z, r24
								  //PRESCALAR = CLR/8
								  //SET OCR ON COMPUTE
								  //CLEAR ON TOP

	while(1){
		TIMER0_U8_OCR0 = ADC_U8_Read_channel(channel_0) / 4;
 d7a:	0c e5       	ldi	r16, 0x5C	; 92
 d7c:	10 e0       	ldi	r17, 0x00	; 0
 d7e:	80 e0       	ldi	r24, 0x00	; 0
 d80:	0e 94 76 00 	call	0xec	; 0xec <ADC_U8_Read_channel>
 d84:	96 95       	lsr	r25
 d86:	87 95       	ror	r24
 d88:	96 95       	lsr	r25
 d8a:	87 95       	ror	r24
 d8c:	f8 01       	movw	r30, r16
 d8e:	80 83       	st	Z, r24
 d90:	f4 cf       	rjmp	.-24     	; 0xd7a <main+0x2c>

00000d92 <_exit>:
 d92:	f8 94       	cli

00000d94 <__stop_program>:
 d94:	ff cf       	rjmp	.-2      	; 0xd94 <__stop_program>
