
Watch_Dog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000020f8  0000216c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000014ac  00000000  00000000  00002174  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bc8  00000000  00000000  00003620  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  000041e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00004348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  000044d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  0000651c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  0000761d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  000085a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  00008720  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  000089e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009270  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ef       	ldi	r30, 0xF8	; 248
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <main>
      7a:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 43 10 	jmp	0x2086	; 0x2086 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 4f 10 	jmp	0x209e	; 0x209e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 4f 10 	jmp	0x209e	; 0x209e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 43 10 	jmp	0x2086	; 0x2086 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 4b 10 	jmp	0x2096	; 0x2096 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 67 10 	jmp	0x20ce	; 0x20ce <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 4f 10 	jmp	0x209e	; 0x209e <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 4f 10 	jmp	0x209e	; 0x209e <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 4f 10 	jmp	0x209e	; 0x209e <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 6f 10 	jmp	0x20de	; 0x20de <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO_U8_SetPinValue>:
#include "STD_Types.h"
#include "bit_calc.h"
#include "DIO_Private.h"
#include "DIO_Interface.h"

u8 DIO_U8_SetPinValue(u8 copy_U8_Port_ID,u8 copy_U8_Pin_ID, u8 copy_U8_Pin_Val){
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	00 d0       	rcall	.+0      	; 0xc94 <DIO_U8_SetPinValue+0x6>
     c94:	00 d0       	rcall	.+0      	; 0xc96 <DIO_U8_SetPinValue+0x8>
     c96:	00 d0       	rcall	.+0      	; 0xc98 <DIO_U8_SetPinValue+0xa>
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	89 83       	std	Y+1, r24	; 0x01
     c9e:	6a 83       	std	Y+2, r22	; 0x02
     ca0:	4b 83       	std	Y+3, r20	; 0x03

	if((copy_U8_Pin_ID>=PIN0) && (copy_U8_Pin_ID <= PIN7) ){
     ca2:	8a 81       	ldd	r24, Y+2	; 0x02
     ca4:	88 30       	cpi	r24, 0x08	; 8
     ca6:	08 f0       	brcs	.+2      	; 0xcaa <DIO_U8_SetPinValue+0x1c>
     ca8:	de c0       	rjmp	.+444    	; 0xe66 <DIO_U8_SetPinValue+0x1d8>
		if((copy_U8_Pin_Val == LOW) || (copy_U8_Pin_Val ==HIGH) ){
     caa:	8b 81       	ldd	r24, Y+3	; 0x03
     cac:	88 23       	and	r24, r24
     cae:	21 f0       	breq	.+8      	; 0xcb8 <DIO_U8_SetPinValue+0x2a>
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	81 30       	cpi	r24, 0x01	; 1
     cb4:	09 f0       	breq	.+2      	; 0xcb8 <DIO_U8_SetPinValue+0x2a>
     cb6:	d4 c0       	rjmp	.+424    	; 0xe60 <DIO_U8_SetPinValue+0x1d2>
			switch(copy_U8_Port_ID){
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	3e 83       	std	Y+6, r19	; 0x06
     cc0:	2d 83       	std	Y+5, r18	; 0x05
     cc2:	8d 81       	ldd	r24, Y+5	; 0x05
     cc4:	9e 81       	ldd	r25, Y+6	; 0x06
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	91 05       	cpc	r25, r1
     cca:	09 f4       	brne	.+2      	; 0xcce <DIO_U8_SetPinValue+0x40>
     ccc:	43 c0       	rjmp	.+134    	; 0xd54 <DIO_U8_SetPinValue+0xc6>
     cce:	2d 81       	ldd	r18, Y+5	; 0x05
     cd0:	3e 81       	ldd	r19, Y+6	; 0x06
     cd2:	22 30       	cpi	r18, 0x02	; 2
     cd4:	31 05       	cpc	r19, r1
     cd6:	2c f4       	brge	.+10     	; 0xce2 <DIO_U8_SetPinValue+0x54>
     cd8:	8d 81       	ldd	r24, Y+5	; 0x05
     cda:	9e 81       	ldd	r25, Y+6	; 0x06
     cdc:	00 97       	sbiw	r24, 0x00	; 0
     cde:	71 f0       	breq	.+28     	; 0xcfc <DIO_U8_SetPinValue+0x6e>
     ce0:	bc c0       	rjmp	.+376    	; 0xe5a <DIO_U8_SetPinValue+0x1cc>
     ce2:	2d 81       	ldd	r18, Y+5	; 0x05
     ce4:	3e 81       	ldd	r19, Y+6	; 0x06
     ce6:	22 30       	cpi	r18, 0x02	; 2
     ce8:	31 05       	cpc	r19, r1
     cea:	09 f4       	brne	.+2      	; 0xcee <DIO_U8_SetPinValue+0x60>
     cec:	5f c0       	rjmp	.+190    	; 0xdac <DIO_U8_SetPinValue+0x11e>
     cee:	8d 81       	ldd	r24, Y+5	; 0x05
     cf0:	9e 81       	ldd	r25, Y+6	; 0x06
     cf2:	83 30       	cpi	r24, 0x03	; 3
     cf4:	91 05       	cpc	r25, r1
     cf6:	09 f4       	brne	.+2      	; 0xcfa <DIO_U8_SetPinValue+0x6c>
     cf8:	85 c0       	rjmp	.+266    	; 0xe04 <DIO_U8_SetPinValue+0x176>
     cfa:	af c0       	rjmp	.+350    	; 0xe5a <DIO_U8_SetPinValue+0x1cc>
				case Group_A:
					Assign_Bit(DIO_U8_PORTA,copy_U8_Pin_ID,copy_U8_Pin_Val);
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	81 30       	cpi	r24, 0x01	; 1
     d00:	a1 f4       	brne	.+40     	; 0xd2a <DIO_U8_SetPinValue+0x9c>
     d02:	ab e3       	ldi	r26, 0x3B	; 59
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	eb e3       	ldi	r30, 0x3B	; 59
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	48 2f       	mov	r20, r24
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	28 2f       	mov	r18, r24
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	02 2e       	mov	r0, r18
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <DIO_U8_SetPinValue+0x92>
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	0a 94       	dec	r0
     d22:	e2 f7       	brpl	.-8      	; 0xd1c <DIO_U8_SetPinValue+0x8e>
     d24:	84 2b       	or	r24, r20
     d26:	8c 93       	st	X, r24
     d28:	98 c0       	rjmp	.+304    	; 0xe5a <DIO_U8_SetPinValue+0x1cc>
     d2a:	ab e3       	ldi	r26, 0x3B	; 59
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	eb e3       	ldi	r30, 0x3B	; 59
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	48 2f       	mov	r20, r24
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	28 2f       	mov	r18, r24
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	02 2e       	mov	r0, r18
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <DIO_U8_SetPinValue+0xba>
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	0a 94       	dec	r0
     d4a:	e2 f7       	brpl	.-8      	; 0xd44 <DIO_U8_SetPinValue+0xb6>
     d4c:	80 95       	com	r24
     d4e:	84 23       	and	r24, r20
     d50:	8c 93       	st	X, r24
     d52:	83 c0       	rjmp	.+262    	; 0xe5a <DIO_U8_SetPinValue+0x1cc>
					break;
				case Group_B:
					Assign_Bit(DIO_U8_PORTB,copy_U8_Pin_ID,copy_U8_Pin_Val);
     d54:	8b 81       	ldd	r24, Y+3	; 0x03
     d56:	81 30       	cpi	r24, 0x01	; 1
     d58:	a1 f4       	brne	.+40     	; 0xd82 <DIO_U8_SetPinValue+0xf4>
     d5a:	a8 e3       	ldi	r26, 0x38	; 56
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	e8 e3       	ldi	r30, 0x38	; 56
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	48 2f       	mov	r20, r24
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	02 2e       	mov	r0, r18
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <DIO_U8_SetPinValue+0xea>
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	0a 94       	dec	r0
     d7a:	e2 f7       	brpl	.-8      	; 0xd74 <DIO_U8_SetPinValue+0xe6>
     d7c:	84 2b       	or	r24, r20
     d7e:	8c 93       	st	X, r24
     d80:	6c c0       	rjmp	.+216    	; 0xe5a <DIO_U8_SetPinValue+0x1cc>
     d82:	a8 e3       	ldi	r26, 0x38	; 56
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e8 e3       	ldi	r30, 0x38	; 56
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	48 2f       	mov	r20, r24
     d8e:	8a 81       	ldd	r24, Y+2	; 0x02
     d90:	28 2f       	mov	r18, r24
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	02 2e       	mov	r0, r18
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <DIO_U8_SetPinValue+0x112>
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	0a 94       	dec	r0
     da2:	e2 f7       	brpl	.-8      	; 0xd9c <DIO_U8_SetPinValue+0x10e>
     da4:	80 95       	com	r24
     da6:	84 23       	and	r24, r20
     da8:	8c 93       	st	X, r24
     daa:	57 c0       	rjmp	.+174    	; 0xe5a <DIO_U8_SetPinValue+0x1cc>
					break;
				case Group_C:
					Assign_Bit(DIO_U8_PORTC,copy_U8_Pin_ID,copy_U8_Pin_Val);
     dac:	8b 81       	ldd	r24, Y+3	; 0x03
     dae:	81 30       	cpi	r24, 0x01	; 1
     db0:	a1 f4       	brne	.+40     	; 0xdda <DIO_U8_SetPinValue+0x14c>
     db2:	a5 e3       	ldi	r26, 0x35	; 53
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	e5 e3       	ldi	r30, 0x35	; 53
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <DIO_U8_SetPinValue+0x142>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <DIO_U8_SetPinValue+0x13e>
     dd4:	84 2b       	or	r24, r20
     dd6:	8c 93       	st	X, r24
     dd8:	40 c0       	rjmp	.+128    	; 0xe5a <DIO_U8_SetPinValue+0x1cc>
     dda:	a5 e3       	ldi	r26, 0x35	; 53
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e5 e3       	ldi	r30, 0x35	; 53
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	48 2f       	mov	r20, r24
     de6:	8a 81       	ldd	r24, Y+2	; 0x02
     de8:	28 2f       	mov	r18, r24
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	02 2e       	mov	r0, r18
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <DIO_U8_SetPinValue+0x16a>
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	0a 94       	dec	r0
     dfa:	e2 f7       	brpl	.-8      	; 0xdf4 <DIO_U8_SetPinValue+0x166>
     dfc:	80 95       	com	r24
     dfe:	84 23       	and	r24, r20
     e00:	8c 93       	st	X, r24
     e02:	2b c0       	rjmp	.+86     	; 0xe5a <DIO_U8_SetPinValue+0x1cc>
					break;
				case Group_D:
					Assign_Bit(DIO_U8_PORTD,copy_U8_Pin_ID,copy_U8_Pin_Val);
     e04:	8b 81       	ldd	r24, Y+3	; 0x03
     e06:	81 30       	cpi	r24, 0x01	; 1
     e08:	a1 f4       	brne	.+40     	; 0xe32 <DIO_U8_SetPinValue+0x1a4>
     e0a:	a2 e3       	ldi	r26, 0x32	; 50
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e2 e3       	ldi	r30, 0x32	; 50
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <DIO_U8_SetPinValue+0x19a>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <DIO_U8_SetPinValue+0x196>
     e2c:	84 2b       	or	r24, r20
     e2e:	8c 93       	st	X, r24
     e30:	14 c0       	rjmp	.+40     	; 0xe5a <DIO_U8_SetPinValue+0x1cc>
     e32:	a2 e3       	ldi	r26, 0x32	; 50
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e2 e3       	ldi	r30, 0x32	; 50
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	48 2f       	mov	r20, r24
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	28 2f       	mov	r18, r24
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	02 2e       	mov	r0, r18
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <DIO_U8_SetPinValue+0x1c2>
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	0a 94       	dec	r0
     e52:	e2 f7       	brpl	.-8      	; 0xe4c <DIO_U8_SetPinValue+0x1be>
     e54:	80 95       	com	r24
     e56:	84 23       	and	r24, r20
     e58:	8c 93       	st	X, r24
					break;
			}
			return 1;
     e5a:	91 e0       	ldi	r25, 0x01	; 1
     e5c:	9c 83       	std	Y+4, r25	; 0x04
     e5e:	05 c0       	rjmp	.+10     	; 0xe6a <DIO_U8_SetPinValue+0x1dc>
		}
		else{
			return Invalid_Pin_Value;
     e60:	2f ef       	ldi	r18, 0xFF	; 255
     e62:	2c 83       	std	Y+4, r18	; 0x04
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <DIO_U8_SetPinValue+0x1dc>
		}
	}
		else {
			return Invalid_Pin_ID;
     e66:	3f ef       	ldi	r19, 0xFF	; 255
     e68:	3c 83       	std	Y+4, r19	; 0x04
     e6a:	8c 81       	ldd	r24, Y+4	; 0x04
		}
}
     e6c:	26 96       	adiw	r28, 0x06	; 6
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	f8 94       	cli
     e72:	de bf       	out	0x3e, r29	; 62
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	cd bf       	out	0x3d, r28	; 61
     e78:	cf 91       	pop	r28
     e7a:	df 91       	pop	r29
     e7c:	08 95       	ret

00000e7e <DIO_U8_GetPinValue>:

u8 DIO_U8_GetPinValue(u8 Copy_U8_Port_ID,u8 Copy_U8_Pin_ID){
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	00 d0       	rcall	.+0      	; 0xe84 <DIO_U8_GetPinValue+0x6>
     e84:	00 d0       	rcall	.+0      	; 0xe86 <DIO_U8_GetPinValue+0x8>
     e86:	00 d0       	rcall	.+0      	; 0xe88 <DIO_U8_GetPinValue+0xa>
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
     e8c:	8a 83       	std	Y+2, r24	; 0x02
     e8e:	6b 83       	std	Y+3, r22	; 0x03

	// set a local variable for result.
	u8 loc_Result;

	//handler for the function call (port and pin in valid range check)
	if((Copy_U8_Port_ID <= Group_D) && (Copy_U8_Pin_ID <= PIN7)){
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	84 30       	cpi	r24, 0x04	; 4
     e94:	08 f0       	brcs	.+2      	; 0xe98 <DIO_U8_GetPinValue+0x1a>
     e96:	6e c0       	rjmp	.+220    	; 0xf74 <DIO_U8_GetPinValue+0xf6>
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	88 30       	cpi	r24, 0x08	; 8
     e9c:	08 f0       	brcs	.+2      	; 0xea0 <DIO_U8_GetPinValue+0x22>
     e9e:	6a c0       	rjmp	.+212    	; 0xf74 <DIO_U8_GetPinValue+0xf6>

		switch (Copy_U8_Port_ID) {
     ea0:	8a 81       	ldd	r24, Y+2	; 0x02
     ea2:	28 2f       	mov	r18, r24
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	3e 83       	std	Y+6, r19	; 0x06
     ea8:	2d 83       	std	Y+5, r18	; 0x05
     eaa:	4d 81       	ldd	r20, Y+5	; 0x05
     eac:	5e 81       	ldd	r21, Y+6	; 0x06
     eae:	41 30       	cpi	r20, 0x01	; 1
     eb0:	51 05       	cpc	r21, r1
     eb2:	41 f1       	breq	.+80     	; 0xf04 <DIO_U8_GetPinValue+0x86>
     eb4:	8d 81       	ldd	r24, Y+5	; 0x05
     eb6:	9e 81       	ldd	r25, Y+6	; 0x06
     eb8:	82 30       	cpi	r24, 0x02	; 2
     eba:	91 05       	cpc	r25, r1
     ebc:	34 f4       	brge	.+12     	; 0xeca <DIO_U8_GetPinValue+0x4c>
     ebe:	2d 81       	ldd	r18, Y+5	; 0x05
     ec0:	3e 81       	ldd	r19, Y+6	; 0x06
     ec2:	21 15       	cp	r18, r1
     ec4:	31 05       	cpc	r19, r1
     ec6:	61 f0       	breq	.+24     	; 0xee0 <DIO_U8_GetPinValue+0x62>
     ec8:	52 c0       	rjmp	.+164    	; 0xf6e <DIO_U8_GetPinValue+0xf0>
     eca:	4d 81       	ldd	r20, Y+5	; 0x05
     ecc:	5e 81       	ldd	r21, Y+6	; 0x06
     ece:	42 30       	cpi	r20, 0x02	; 2
     ed0:	51 05       	cpc	r21, r1
     ed2:	51 f1       	breq	.+84     	; 0xf28 <DIO_U8_GetPinValue+0xaa>
     ed4:	8d 81       	ldd	r24, Y+5	; 0x05
     ed6:	9e 81       	ldd	r25, Y+6	; 0x06
     ed8:	83 30       	cpi	r24, 0x03	; 3
     eda:	91 05       	cpc	r25, r1
     edc:	b9 f1       	breq	.+110    	; 0xf4c <DIO_U8_GetPinValue+0xce>
     ede:	47 c0       	rjmp	.+142    	; 0xf6e <DIO_U8_GetPinValue+0xf0>
			case Group_A:
				loc_Result = Get_Bit(DIO_U8_PINA,Copy_U8_Pin_ID);
     ee0:	e9 e3       	ldi	r30, 0x39	; 57
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	8b 81       	ldd	r24, Y+3	; 0x03
     eec:	88 2f       	mov	r24, r24
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	a9 01       	movw	r20, r18
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <DIO_U8_GetPinValue+0x7a>
     ef4:	55 95       	asr	r21
     ef6:	47 95       	ror	r20
     ef8:	8a 95       	dec	r24
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <DIO_U8_GetPinValue+0x76>
     efc:	ca 01       	movw	r24, r20
     efe:	81 70       	andi	r24, 0x01	; 1
     f00:	89 83       	std	Y+1, r24	; 0x01
     f02:	35 c0       	rjmp	.+106    	; 0xf6e <DIO_U8_GetPinValue+0xf0>
				break;
			case Group_B:
				loc_Result = Get_Bit(DIO_U8_PINB,Copy_U8_Pin_ID);
     f04:	e6 e3       	ldi	r30, 0x36	; 54
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	88 2f       	mov	r24, r24
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	a9 01       	movw	r20, r18
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <DIO_U8_GetPinValue+0x9e>
     f18:	55 95       	asr	r21
     f1a:	47 95       	ror	r20
     f1c:	8a 95       	dec	r24
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <DIO_U8_GetPinValue+0x9a>
     f20:	ca 01       	movw	r24, r20
     f22:	81 70       	andi	r24, 0x01	; 1
     f24:	89 83       	std	Y+1, r24	; 0x01
     f26:	23 c0       	rjmp	.+70     	; 0xf6e <DIO_U8_GetPinValue+0xf0>
				break;
			case Group_C:
				loc_Result = Get_Bit(DIO_U8_PINC,Copy_U8_Pin_ID);
     f28:	e3 e3       	ldi	r30, 0x33	; 51
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	8b 81       	ldd	r24, Y+3	; 0x03
     f34:	88 2f       	mov	r24, r24
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	a9 01       	movw	r20, r18
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <DIO_U8_GetPinValue+0xc2>
     f3c:	55 95       	asr	r21
     f3e:	47 95       	ror	r20
     f40:	8a 95       	dec	r24
     f42:	e2 f7       	brpl	.-8      	; 0xf3c <DIO_U8_GetPinValue+0xbe>
     f44:	ca 01       	movw	r24, r20
     f46:	81 70       	andi	r24, 0x01	; 1
     f48:	89 83       	std	Y+1, r24	; 0x01
     f4a:	11 c0       	rjmp	.+34     	; 0xf6e <DIO_U8_GetPinValue+0xf0>
				break;
			case Group_D:
				loc_Result = Get_Bit(DIO_U8_PIND,Copy_U8_Pin_ID);
     f4c:	e0 e3       	ldi	r30, 0x30	; 48
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	88 2f       	mov	r24, r24
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	a9 01       	movw	r20, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_U8_GetPinValue+0xe6>
     f60:	55 95       	asr	r21
     f62:	47 95       	ror	r20
     f64:	8a 95       	dec	r24
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_U8_GetPinValue+0xe2>
     f68:	ca 01       	movw	r24, r20
     f6a:	81 70       	andi	r24, 0x01	; 1
     f6c:	89 83       	std	Y+1, r24	; 0x01
		}
	}else{
		//set var to 0xFF in case of error in func input
		return Invalid_Pin_ID;
	}
	return loc_Result;
     f6e:	59 81       	ldd	r21, Y+1	; 0x01
     f70:	5c 83       	std	Y+4, r21	; 0x04
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <DIO_U8_GetPinValue+0xfa>
				loc_Result = Get_Bit(DIO_U8_PIND,Copy_U8_Pin_ID);
				break;
		}
	}else{
		//set var to 0xFF in case of error in func input
		return Invalid_Pin_ID;
     f74:	8f ef       	ldi	r24, 0xFF	; 255
     f76:	8c 83       	std	Y+4, r24	; 0x04
     f78:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	return loc_Result;

}
     f7a:	26 96       	adiw	r28, 0x06	; 6
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	de bf       	out	0x3e, r29	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	cd bf       	out	0x3d, r28	; 61
     f86:	cf 91       	pop	r28
     f88:	df 91       	pop	r29
     f8a:	08 95       	ret

00000f8c <DIO_U8_SetPinDirection>:

void DIO_U8_SetPinDirection(u8 Copy_U8_Port_ID,u8 Copy_U8_Pin_ID,u8 Copy_U8_Pin_Dir){
     f8c:	df 93       	push	r29
     f8e:	cf 93       	push	r28
     f90:	00 d0       	rcall	.+0      	; 0xf92 <DIO_U8_SetPinDirection+0x6>
     f92:	00 d0       	rcall	.+0      	; 0xf94 <DIO_U8_SetPinDirection+0x8>
     f94:	0f 92       	push	r0
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
     f9a:	89 83       	std	Y+1, r24	; 0x01
     f9c:	6a 83       	std	Y+2, r22	; 0x02
     f9e:	4b 83       	std	Y+3, r20	; 0x03
	// handler to check if the port id and pin id in the correct range
	if(Copy_U8_Port_ID <= Group_D && Copy_U8_Pin_ID <= PIN7){
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	84 30       	cpi	r24, 0x04	; 4
     fa4:	08 f0       	brcs	.+2      	; 0xfa8 <DIO_U8_SetPinDirection+0x1c>
     fa6:	d5 c0       	rjmp	.+426    	; 0x1152 <DIO_U8_SetPinDirection+0x1c6>
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	88 30       	cpi	r24, 0x08	; 8
     fac:	08 f0       	brcs	.+2      	; 0xfb0 <DIO_U8_SetPinDirection+0x24>
     fae:	d1 c0       	rjmp	.+418    	; 0x1152 <DIO_U8_SetPinDirection+0x1c6>

		switch(Copy_U8_Port_ID){
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	3d 83       	std	Y+5, r19	; 0x05
     fb8:	2c 83       	std	Y+4, r18	; 0x04
     fba:	8c 81       	ldd	r24, Y+4	; 0x04
     fbc:	9d 81       	ldd	r25, Y+5	; 0x05
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	91 05       	cpc	r25, r1
     fc2:	09 f4       	brne	.+2      	; 0xfc6 <DIO_U8_SetPinDirection+0x3a>
     fc4:	43 c0       	rjmp	.+134    	; 0x104c <DIO_U8_SetPinDirection+0xc0>
     fc6:	2c 81       	ldd	r18, Y+4	; 0x04
     fc8:	3d 81       	ldd	r19, Y+5	; 0x05
     fca:	22 30       	cpi	r18, 0x02	; 2
     fcc:	31 05       	cpc	r19, r1
     fce:	2c f4       	brge	.+10     	; 0xfda <DIO_U8_SetPinDirection+0x4e>
     fd0:	8c 81       	ldd	r24, Y+4	; 0x04
     fd2:	9d 81       	ldd	r25, Y+5	; 0x05
     fd4:	00 97       	sbiw	r24, 0x00	; 0
     fd6:	71 f0       	breq	.+28     	; 0xff4 <DIO_U8_SetPinDirection+0x68>
     fd8:	bc c0       	rjmp	.+376    	; 0x1152 <DIO_U8_SetPinDirection+0x1c6>
     fda:	2c 81       	ldd	r18, Y+4	; 0x04
     fdc:	3d 81       	ldd	r19, Y+5	; 0x05
     fde:	22 30       	cpi	r18, 0x02	; 2
     fe0:	31 05       	cpc	r19, r1
     fe2:	09 f4       	brne	.+2      	; 0xfe6 <DIO_U8_SetPinDirection+0x5a>
     fe4:	5f c0       	rjmp	.+190    	; 0x10a4 <DIO_U8_SetPinDirection+0x118>
     fe6:	8c 81       	ldd	r24, Y+4	; 0x04
     fe8:	9d 81       	ldd	r25, Y+5	; 0x05
     fea:	83 30       	cpi	r24, 0x03	; 3
     fec:	91 05       	cpc	r25, r1
     fee:	09 f4       	brne	.+2      	; 0xff2 <DIO_U8_SetPinDirection+0x66>
     ff0:	85 c0       	rjmp	.+266    	; 0x10fc <DIO_U8_SetPinDirection+0x170>
     ff2:	af c0       	rjmp	.+350    	; 0x1152 <DIO_U8_SetPinDirection+0x1c6>

		case Group_A:
			Assign_Bit(DIO_U8_DDRA,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	81 30       	cpi	r24, 0x01	; 1
     ff8:	a1 f4       	brne	.+40     	; 0x1022 <DIO_U8_SetPinDirection+0x96>
     ffa:	aa e3       	ldi	r26, 0x3A	; 58
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	ea e3       	ldi	r30, 0x3A	; 58
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	48 2f       	mov	r20, r24
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	02 2e       	mov	r0, r18
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <DIO_U8_SetPinDirection+0x8c>
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	0a 94       	dec	r0
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <DIO_U8_SetPinDirection+0x88>
    101c:	84 2b       	or	r24, r20
    101e:	8c 93       	st	X, r24
    1020:	98 c0       	rjmp	.+304    	; 0x1152 <DIO_U8_SetPinDirection+0x1c6>
    1022:	aa e3       	ldi	r26, 0x3A	; 58
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	ea e3       	ldi	r30, 0x3A	; 58
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	48 2f       	mov	r20, r24
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	02 2e       	mov	r0, r18
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <DIO_U8_SetPinDirection+0xb4>
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	0a 94       	dec	r0
    1042:	e2 f7       	brpl	.-8      	; 0x103c <DIO_U8_SetPinDirection+0xb0>
    1044:	80 95       	com	r24
    1046:	84 23       	and	r24, r20
    1048:	8c 93       	st	X, r24
    104a:	83 c0       	rjmp	.+262    	; 0x1152 <DIO_U8_SetPinDirection+0x1c6>
			break;
		case Group_B:
			Assign_Bit(DIO_U8_DDRB,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	81 30       	cpi	r24, 0x01	; 1
    1050:	a1 f4       	brne	.+40     	; 0x107a <DIO_U8_SetPinDirection+0xee>
    1052:	a7 e3       	ldi	r26, 0x37	; 55
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e7 e3       	ldi	r30, 0x37	; 55
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	48 2f       	mov	r20, r24
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	02 2e       	mov	r0, r18
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <DIO_U8_SetPinDirection+0xe4>
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	0a 94       	dec	r0
    1072:	e2 f7       	brpl	.-8      	; 0x106c <DIO_U8_SetPinDirection+0xe0>
    1074:	84 2b       	or	r24, r20
    1076:	8c 93       	st	X, r24
    1078:	6c c0       	rjmp	.+216    	; 0x1152 <DIO_U8_SetPinDirection+0x1c6>
    107a:	a7 e3       	ldi	r26, 0x37	; 55
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e7 e3       	ldi	r30, 0x37	; 55
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	48 2f       	mov	r20, r24
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	02 2e       	mov	r0, r18
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <DIO_U8_SetPinDirection+0x10c>
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	0a 94       	dec	r0
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <DIO_U8_SetPinDirection+0x108>
    109c:	80 95       	com	r24
    109e:	84 23       	and	r24, r20
    10a0:	8c 93       	st	X, r24
    10a2:	57 c0       	rjmp	.+174    	; 0x1152 <DIO_U8_SetPinDirection+0x1c6>
			break;
		case Group_C:
			Assign_Bit(DIO_U8_DDRC,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	81 30       	cpi	r24, 0x01	; 1
    10a8:	a1 f4       	brne	.+40     	; 0x10d2 <DIO_U8_SetPinDirection+0x146>
    10aa:	a4 e3       	ldi	r26, 0x34	; 52
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e4 e3       	ldi	r30, 0x34	; 52
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	48 2f       	mov	r20, r24
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	02 2e       	mov	r0, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <DIO_U8_SetPinDirection+0x13c>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	0a 94       	dec	r0
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <DIO_U8_SetPinDirection+0x138>
    10cc:	84 2b       	or	r24, r20
    10ce:	8c 93       	st	X, r24
    10d0:	40 c0       	rjmp	.+128    	; 0x1152 <DIO_U8_SetPinDirection+0x1c6>
    10d2:	a4 e3       	ldi	r26, 0x34	; 52
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e4 e3       	ldi	r30, 0x34	; 52
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	48 2f       	mov	r20, r24
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	02 2e       	mov	r0, r18
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <DIO_U8_SetPinDirection+0x164>
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	0a 94       	dec	r0
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <DIO_U8_SetPinDirection+0x160>
    10f4:	80 95       	com	r24
    10f6:	84 23       	and	r24, r20
    10f8:	8c 93       	st	X, r24
    10fa:	2b c0       	rjmp	.+86     	; 0x1152 <DIO_U8_SetPinDirection+0x1c6>
			break;
		case Group_D:
			Assign_Bit(DIO_U8_DDRD,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	a1 f4       	brne	.+40     	; 0x112a <DIO_U8_SetPinDirection+0x19e>
    1102:	a1 e3       	ldi	r26, 0x31	; 49
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e1 e3       	ldi	r30, 0x31	; 49
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	48 2f       	mov	r20, r24
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	02 2e       	mov	r0, r18
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <DIO_U8_SetPinDirection+0x194>
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	0a 94       	dec	r0
    1122:	e2 f7       	brpl	.-8      	; 0x111c <DIO_U8_SetPinDirection+0x190>
    1124:	84 2b       	or	r24, r20
    1126:	8c 93       	st	X, r24
    1128:	14 c0       	rjmp	.+40     	; 0x1152 <DIO_U8_SetPinDirection+0x1c6>
    112a:	a1 e3       	ldi	r26, 0x31	; 49
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e1 e3       	ldi	r30, 0x31	; 49
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	48 2f       	mov	r20, r24
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	02 2e       	mov	r0, r18
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <DIO_U8_SetPinDirection+0x1bc>
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	0a 94       	dec	r0
    114a:	e2 f7       	brpl	.-8      	; 0x1144 <DIO_U8_SetPinDirection+0x1b8>
    114c:	80 95       	com	r24
    114e:	84 23       	and	r24, r20
    1150:	8c 93       	st	X, r24
		}
	}else{
		//do nothing wrong function parameters were given.
	}

}
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	08 95       	ret

00001162 <DIO_U8_SetPortDirection>:

void DIO_U8_SetPortDirection(u8 Copy_U8_Port_ID,u8 Copy_u8_Port_Dir){
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	00 d0       	rcall	.+0      	; 0x1168 <DIO_U8_SetPortDirection+0x6>
    1168:	00 d0       	rcall	.+0      	; 0x116a <DIO_U8_SetPortDirection+0x8>
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	89 83       	std	Y+1, r24	; 0x01
    1170:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_U8_Port_ID){
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	3c 83       	std	Y+4, r19	; 0x04
    117a:	2b 83       	std	Y+3, r18	; 0x03
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	9c 81       	ldd	r25, Y+4	; 0x04
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	91 05       	cpc	r25, r1
    1184:	d1 f0       	breq	.+52     	; 0x11ba <DIO_U8_SetPortDirection+0x58>
    1186:	2b 81       	ldd	r18, Y+3	; 0x03
    1188:	3c 81       	ldd	r19, Y+4	; 0x04
    118a:	22 30       	cpi	r18, 0x02	; 2
    118c:	31 05       	cpc	r19, r1
    118e:	2c f4       	brge	.+10     	; 0x119a <DIO_U8_SetPortDirection+0x38>
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	9c 81       	ldd	r25, Y+4	; 0x04
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	61 f0       	breq	.+24     	; 0x11b0 <DIO_U8_SetPortDirection+0x4e>
    1198:	1e c0       	rjmp	.+60     	; 0x11d6 <DIO_U8_SetPortDirection+0x74>
    119a:	2b 81       	ldd	r18, Y+3	; 0x03
    119c:	3c 81       	ldd	r19, Y+4	; 0x04
    119e:	22 30       	cpi	r18, 0x02	; 2
    11a0:	31 05       	cpc	r19, r1
    11a2:	81 f0       	breq	.+32     	; 0x11c4 <DIO_U8_SetPortDirection+0x62>
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	9c 81       	ldd	r25, Y+4	; 0x04
    11a8:	83 30       	cpi	r24, 0x03	; 3
    11aa:	91 05       	cpc	r25, r1
    11ac:	81 f0       	breq	.+32     	; 0x11ce <DIO_U8_SetPortDirection+0x6c>
    11ae:	13 c0       	rjmp	.+38     	; 0x11d6 <DIO_U8_SetPortDirection+0x74>

	case Group_A:
		DIO_U8_DDRA = Copy_u8_Port_Dir;
    11b0:	ea e3       	ldi	r30, 0x3A	; 58
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	80 83       	st	Z, r24
    11b8:	0e c0       	rjmp	.+28     	; 0x11d6 <DIO_U8_SetPortDirection+0x74>
		break;
	case Group_B:
			DIO_U8_DDRB = Copy_u8_Port_Dir;
    11ba:	e7 e3       	ldi	r30, 0x37	; 55
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	80 83       	st	Z, r24
    11c2:	09 c0       	rjmp	.+18     	; 0x11d6 <DIO_U8_SetPortDirection+0x74>
		break;
	case Group_C:
			DIO_U8_DDRC = Copy_u8_Port_Dir;
    11c4:	e4 e3       	ldi	r30, 0x34	; 52
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	80 83       	st	Z, r24
    11cc:	04 c0       	rjmp	.+8      	; 0x11d6 <DIO_U8_SetPortDirection+0x74>
		break;
	case Group_D:
			DIO_U8_DDRD = Copy_u8_Port_Dir;
    11ce:	e1 e3       	ldi	r30, 0x31	; 49
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	80 83       	st	Z, r24
		//wrong function parameters were given.
		break;

	}

}
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	08 95       	ret

000011e4 <DIO_U8_SetPortValue>:

void DIO_U8_SetPortValue(u8 Copy_U8_Port_ID , u8 Copy_U8_Port_Val){
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	00 d0       	rcall	.+0      	; 0x11ea <DIO_U8_SetPortValue+0x6>
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <DIO_U8_SetPortValue+0x8>
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	89 83       	std	Y+1, r24	; 0x01
    11f2:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_U8_Port_ID){
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	3c 83       	std	Y+4, r19	; 0x04
    11fc:	2b 83       	std	Y+3, r18	; 0x03
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	9c 81       	ldd	r25, Y+4	; 0x04
    1202:	81 30       	cpi	r24, 0x01	; 1
    1204:	91 05       	cpc	r25, r1
    1206:	d1 f0       	breq	.+52     	; 0x123c <DIO_U8_SetPortValue+0x58>
    1208:	2b 81       	ldd	r18, Y+3	; 0x03
    120a:	3c 81       	ldd	r19, Y+4	; 0x04
    120c:	22 30       	cpi	r18, 0x02	; 2
    120e:	31 05       	cpc	r19, r1
    1210:	2c f4       	brge	.+10     	; 0x121c <DIO_U8_SetPortValue+0x38>
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	9c 81       	ldd	r25, Y+4	; 0x04
    1216:	00 97       	sbiw	r24, 0x00	; 0
    1218:	61 f0       	breq	.+24     	; 0x1232 <DIO_U8_SetPortValue+0x4e>
    121a:	1e c0       	rjmp	.+60     	; 0x1258 <DIO_U8_SetPortValue+0x74>
    121c:	2b 81       	ldd	r18, Y+3	; 0x03
    121e:	3c 81       	ldd	r19, Y+4	; 0x04
    1220:	22 30       	cpi	r18, 0x02	; 2
    1222:	31 05       	cpc	r19, r1
    1224:	81 f0       	breq	.+32     	; 0x1246 <DIO_U8_SetPortValue+0x62>
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	9c 81       	ldd	r25, Y+4	; 0x04
    122a:	83 30       	cpi	r24, 0x03	; 3
    122c:	91 05       	cpc	r25, r1
    122e:	81 f0       	breq	.+32     	; 0x1250 <DIO_U8_SetPortValue+0x6c>
    1230:	13 c0       	rjmp	.+38     	; 0x1258 <DIO_U8_SetPortValue+0x74>

		case Group_A:
			DIO_U8_PORTA = Copy_U8_Port_Val;
    1232:	eb e3       	ldi	r30, 0x3B	; 59
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	80 83       	st	Z, r24
    123a:	0e c0       	rjmp	.+28     	; 0x1258 <DIO_U8_SetPortValue+0x74>
			break;
		case Group_B:
				DIO_U8_PORTB = Copy_U8_Port_Val;
    123c:	e8 e3       	ldi	r30, 0x38	; 56
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	80 83       	st	Z, r24
    1244:	09 c0       	rjmp	.+18     	; 0x1258 <DIO_U8_SetPortValue+0x74>
			break;
		case Group_C:
				DIO_U8_PORTC = Copy_U8_Port_Val;
    1246:	e5 e3       	ldi	r30, 0x35	; 53
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	80 83       	st	Z, r24
    124e:	04 c0       	rjmp	.+8      	; 0x1258 <DIO_U8_SetPortValue+0x74>
			break;
		case Group_D:
				DIO_U8_PORTD = Copy_U8_Port_Val;
    1250:	e2 e3       	ldi	r30, 0x32	; 50
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	80 83       	st	Z, r24
			break;

		}


}
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <DIO_U8_GetPortValue>:
u8 DIO_U8_GetPortValue(u8 Copy_U8_Port_ID){
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	00 d0       	rcall	.+0      	; 0x126c <DIO_U8_GetPortValue+0x6>
    126c:	00 d0       	rcall	.+0      	; 0x126e <DIO_U8_GetPortValue+0x8>
    126e:	0f 92       	push	r0
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	8a 83       	std	Y+2, r24	; 0x02
	u8 Port_Val;
	switch(Copy_U8_Port_ID){
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	3d 83       	std	Y+5, r19	; 0x05
    127e:	2c 83       	std	Y+4, r18	; 0x04
    1280:	8c 81       	ldd	r24, Y+4	; 0x04
    1282:	9d 81       	ldd	r25, Y+5	; 0x05
    1284:	81 30       	cpi	r24, 0x01	; 1
    1286:	91 05       	cpc	r25, r1
    1288:	d1 f0       	breq	.+52     	; 0x12be <DIO_U8_GetPortValue+0x58>
    128a:	2c 81       	ldd	r18, Y+4	; 0x04
    128c:	3d 81       	ldd	r19, Y+5	; 0x05
    128e:	22 30       	cpi	r18, 0x02	; 2
    1290:	31 05       	cpc	r19, r1
    1292:	2c f4       	brge	.+10     	; 0x129e <DIO_U8_GetPortValue+0x38>
    1294:	8c 81       	ldd	r24, Y+4	; 0x04
    1296:	9d 81       	ldd	r25, Y+5	; 0x05
    1298:	00 97       	sbiw	r24, 0x00	; 0
    129a:	61 f0       	breq	.+24     	; 0x12b4 <DIO_U8_GetPortValue+0x4e>
    129c:	1f c0       	rjmp	.+62     	; 0x12dc <DIO_U8_GetPortValue+0x76>
    129e:	2c 81       	ldd	r18, Y+4	; 0x04
    12a0:	3d 81       	ldd	r19, Y+5	; 0x05
    12a2:	22 30       	cpi	r18, 0x02	; 2
    12a4:	31 05       	cpc	r19, r1
    12a6:	81 f0       	breq	.+32     	; 0x12c8 <DIO_U8_GetPortValue+0x62>
    12a8:	8c 81       	ldd	r24, Y+4	; 0x04
    12aa:	9d 81       	ldd	r25, Y+5	; 0x05
    12ac:	83 30       	cpi	r24, 0x03	; 3
    12ae:	91 05       	cpc	r25, r1
    12b0:	81 f0       	breq	.+32     	; 0x12d2 <DIO_U8_GetPortValue+0x6c>
    12b2:	14 c0       	rjmp	.+40     	; 0x12dc <DIO_U8_GetPortValue+0x76>
	case Group_A:
		Port_Val = DIO_U8_PINA;
    12b4:	e9 e3       	ldi	r30, 0x39	; 57
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	89 83       	std	Y+1, r24	; 0x01
    12bc:	12 c0       	rjmp	.+36     	; 0x12e2 <DIO_U8_GetPortValue+0x7c>
		break;
	case Group_B:
		Port_Val = DIO_U8_PINB;
    12be:	e6 e3       	ldi	r30, 0x36	; 54
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	89 83       	std	Y+1, r24	; 0x01
    12c6:	0d c0       	rjmp	.+26     	; 0x12e2 <DIO_U8_GetPortValue+0x7c>
		break;
	case Group_C:
		Port_Val = DIO_U8_PINC;
    12c8:	e3 e3       	ldi	r30, 0x33	; 51
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	89 83       	std	Y+1, r24	; 0x01
    12d0:	08 c0       	rjmp	.+16     	; 0x12e2 <DIO_U8_GetPortValue+0x7c>
		break;
	case Group_D:
		Port_Val = DIO_U8_PIND;
    12d2:	e0 e3       	ldi	r30, 0x30	; 48
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	89 83       	std	Y+1, r24	; 0x01
    12da:	03 c0       	rjmp	.+6      	; 0x12e2 <DIO_U8_GetPortValue+0x7c>
		break;
	default:
		return Invalid_Port_ID;
    12dc:	9f ef       	ldi	r25, 0xFF	; 255
    12de:	9b 83       	std	Y+3, r25	; 0x03
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <DIO_U8_GetPortValue+0x80>
	}
	return Port_Val;
    12e2:	29 81       	ldd	r18, Y+1	; 0x01
    12e4:	2b 83       	std	Y+3, r18	; 0x03
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03

}
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	08 95       	ret

000012f8 <LCD_Void_Write_Cmd>:
#include "DIO_Interface.h"
#include "DIO_Private.h"

#include "util/delay.h"

void LCD_Void_Write_Cmd(u8 Copy_U8_Cmd){
    12f8:	df 93       	push	r29
    12fa:	cf 93       	push	r28
    12fc:	0f 92       	push	r0
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
    1302:	89 83       	std	Y+1, r24	; 0x01
	DIO_U8_SetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,LOW);
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	60 e0       	ldi	r22, 0x00	; 0
    1308:	40 e0       	ldi	r20, 0x00	; 0
    130a:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_U8_SetPinValue>
	LCD_Void_Write(Copy_U8_Cmd);
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	0e 94 1b 0b 	call	0x1636	; 0x1636 <LCD_Void_Write>
}
    1314:	0f 90       	pop	r0
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret

0000131c <LCD_Void_Write_Data>:

void LCD_Void_Write_Data(u8 Copy_U8_Data){
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	0f 92       	push	r0
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
    1326:	89 83       	std	Y+1, r24	; 0x01
	DIO_U8_SetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,HIGH);
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	60 e0       	ldi	r22, 0x00	; 0
    132c:	41 e0       	ldi	r20, 0x01	; 1
    132e:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_U8_SetPinValue>
	LCD_Void_Write(Copy_U8_Data);
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	0e 94 1b 0b 	call	0x1636	; 0x1636 <LCD_Void_Write>
}
    1338:	0f 90       	pop	r0
    133a:	cf 91       	pop	r28
    133c:	df 91       	pop	r29
    133e:	08 95       	ret

00001340 <LCD_Void_Write_String>:
void LCD_Void_Write_String(u8 *Copy_PU8_Data,u8 Copy_U8_XPos,u8 Copy_U8_YPOS){
    1340:	df 93       	push	r29
    1342:	cf 93       	push	r28
    1344:	00 d0       	rcall	.+0      	; 0x1346 <LCD_Void_Write_String+0x6>
    1346:	00 d0       	rcall	.+0      	; 0x1348 <LCD_Void_Write_String+0x8>
    1348:	0f 92       	push	r0
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	9b 83       	std	Y+3, r25	; 0x03
    1350:	8a 83       	std	Y+2, r24	; 0x02
    1352:	6c 83       	std	Y+4, r22	; 0x04
    1354:	4d 83       	std	Y+5, r20	; 0x05
	u8 LOCAL_U8_DDRAM_ADDRESS;
	LOCAL_U8_DDRAM_ADDRESS = Copy_U8_XPos + (Copy_U8_YPOS * 64);
    1356:	8d 81       	ldd	r24, Y+5	; 0x05
    1358:	88 2f       	mov	r24, r24
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	00 24       	eor	r0, r0
    135e:	96 95       	lsr	r25
    1360:	87 95       	ror	r24
    1362:	07 94       	ror	r0
    1364:	96 95       	lsr	r25
    1366:	87 95       	ror	r24
    1368:	07 94       	ror	r0
    136a:	98 2f       	mov	r25, r24
    136c:	80 2d       	mov	r24, r0
    136e:	98 2f       	mov	r25, r24
    1370:	8c 81       	ldd	r24, Y+4	; 0x04
    1372:	89 0f       	add	r24, r25
    1374:	89 83       	std	Y+1, r24	; 0x01
	LOCAL_U8_DDRAM_ADDRESS |= 0b10000000;
    1376:	89 81       	ldd	r24, Y+1	; 0x01
    1378:	80 68       	ori	r24, 0x80	; 128
    137a:	89 83       	std	Y+1, r24	; 0x01
	LCD_Void_Write_Cmd(LOCAL_U8_DDRAM_ADDRESS);
    137c:	89 81       	ldd	r24, Y+1	; 0x01
    137e:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <LCD_Void_Write_Cmd>
    1382:	0a c0       	rjmp	.+20     	; 0x1398 <LCD_Void_Write_String+0x58>

	while(*Copy_PU8_Data != '\0'){
		LCD_Void_Write_Data(*Copy_PU8_Data);
    1384:	ea 81       	ldd	r30, Y+2	; 0x02
    1386:	fb 81       	ldd	r31, Y+3	; 0x03
    1388:	80 81       	ld	r24, Z
    138a:	0e 94 8e 09 	call	0x131c	; 0x131c <LCD_Void_Write_Data>
		Copy_PU8_Data ++;
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	9b 81       	ldd	r25, Y+3	; 0x03
    1392:	01 96       	adiw	r24, 0x01	; 1
    1394:	9b 83       	std	Y+3, r25	; 0x03
    1396:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOCAL_U8_DDRAM_ADDRESS;
	LOCAL_U8_DDRAM_ADDRESS = Copy_U8_XPos + (Copy_U8_YPOS * 64);
	LOCAL_U8_DDRAM_ADDRESS |= 0b10000000;
	LCD_Void_Write_Cmd(LOCAL_U8_DDRAM_ADDRESS);

	while(*Copy_PU8_Data != '\0'){
    1398:	ea 81       	ldd	r30, Y+2	; 0x02
    139a:	fb 81       	ldd	r31, Y+3	; 0x03
    139c:	80 81       	ld	r24, Z
    139e:	88 23       	and	r24, r24
    13a0:	89 f7       	brne	.-30     	; 0x1384 <LCD_Void_Write_String+0x44>
		LCD_Void_Write_Data(*Copy_PU8_Data);
		Copy_PU8_Data ++;
	}
}
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	08 95       	ret

000013b2 <LCD_Void_Write_Number>:
void LCD_Void_Write_Number(u32 Copy_U32_Num){
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	6a 97       	sbiw	r28, 0x1a	; 26
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	de bf       	out	0x3e, r29	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	cd bf       	out	0x3d, r28	; 61
    13c6:	6f 8b       	std	Y+23, r22	; 0x17
    13c8:	78 8f       	std	Y+24, r23	; 0x18
    13ca:	89 8f       	std	Y+25, r24	; 0x19
    13cc:	9a 8f       	std	Y+26, r25	; 0x1a
	u8 rem;
	u8 i = 0;
    13ce:	19 82       	std	Y+1, r1	; 0x01
    13d0:	30 c0       	rjmp	.+96     	; 0x1432 <LCD_Void_Write_Number+0x80>
	u8 str[20];
	while(Copy_U32_Num != 0){
		rem = Copy_U32_Num % 10;
    13d2:	8f 89       	ldd	r24, Y+23	; 0x17
    13d4:	98 8d       	ldd	r25, Y+24	; 0x18
    13d6:	a9 8d       	ldd	r26, Y+25	; 0x19
    13d8:	ba 8d       	ldd	r27, Y+26	; 0x1a
    13da:	2a e0       	ldi	r18, 0x0A	; 10
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	40 e0       	ldi	r20, 0x00	; 0
    13e0:	50 e0       	ldi	r21, 0x00	; 0
    13e2:	bc 01       	movw	r22, r24
    13e4:	cd 01       	movw	r24, r26
    13e6:	0e 94 21 10 	call	0x2042	; 0x2042 <__udivmodsi4>
    13ea:	dc 01       	movw	r26, r24
    13ec:	cb 01       	movw	r24, r22
    13ee:	8a 83       	std	Y+2, r24	; 0x02
		str[i]= rem + '0';
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	48 2f       	mov	r20, r24
    13fa:	40 5d       	subi	r20, 0xD0	; 208
    13fc:	ce 01       	movw	r24, r28
    13fe:	03 96       	adiw	r24, 0x03	; 3
    1400:	fc 01       	movw	r30, r24
    1402:	e2 0f       	add	r30, r18
    1404:	f3 1f       	adc	r31, r19
    1406:	40 83       	st	Z, r20
		i++;
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	8f 5f       	subi	r24, 0xFF	; 255
    140c:	89 83       	std	Y+1, r24	; 0x01
		Copy_U32_Num = Copy_U32_Num/10;
    140e:	8f 89       	ldd	r24, Y+23	; 0x17
    1410:	98 8d       	ldd	r25, Y+24	; 0x18
    1412:	a9 8d       	ldd	r26, Y+25	; 0x19
    1414:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1416:	2a e0       	ldi	r18, 0x0A	; 10
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	40 e0       	ldi	r20, 0x00	; 0
    141c:	50 e0       	ldi	r21, 0x00	; 0
    141e:	bc 01       	movw	r22, r24
    1420:	cd 01       	movw	r24, r26
    1422:	0e 94 21 10 	call	0x2042	; 0x2042 <__udivmodsi4>
    1426:	da 01       	movw	r26, r20
    1428:	c9 01       	movw	r24, r18
    142a:	8f 8b       	std	Y+23, r24	; 0x17
    142c:	98 8f       	std	Y+24, r25	; 0x18
    142e:	a9 8f       	std	Y+25, r26	; 0x19
    1430:	ba 8f       	std	Y+26, r27	; 0x1a
}
void LCD_Void_Write_Number(u32 Copy_U32_Num){
	u8 rem;
	u8 i = 0;
	u8 str[20];
	while(Copy_U32_Num != 0){
    1432:	8f 89       	ldd	r24, Y+23	; 0x17
    1434:	98 8d       	ldd	r25, Y+24	; 0x18
    1436:	a9 8d       	ldd	r26, Y+25	; 0x19
    1438:	ba 8d       	ldd	r27, Y+26	; 0x1a
    143a:	00 97       	sbiw	r24, 0x00	; 0
    143c:	a1 05       	cpc	r26, r1
    143e:	b1 05       	cpc	r27, r1
    1440:	41 f6       	brne	.-112    	; 0x13d2 <LCD_Void_Write_Number+0x20>
		rem = Copy_U32_Num % 10;
		str[i]= rem + '0';
		i++;
		Copy_U32_Num = Copy_U32_Num/10;
	}
	str[i] = '\0';
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	ce 01       	movw	r24, r28
    144a:	03 96       	adiw	r24, 0x03	; 3
    144c:	fc 01       	movw	r30, r24
    144e:	e2 0f       	add	r30, r18
    1450:	f3 1f       	adc	r31, r19
    1452:	10 82       	st	Z, r1
	reverse(str,i);
    1454:	ce 01       	movw	r24, r28
    1456:	03 96       	adiw	r24, 0x03	; 3
    1458:	69 81       	ldd	r22, Y+1	; 0x01
    145a:	0e 94 c6 0a 	call	0x158c	; 0x158c <reverse>
	LCD_Void_Write_String(str,0,0);
    145e:	ce 01       	movw	r24, r28
    1460:	03 96       	adiw	r24, 0x03	; 3
    1462:	60 e0       	ldi	r22, 0x00	; 0
    1464:	40 e0       	ldi	r20, 0x00	; 0
    1466:	0e 94 a0 09 	call	0x1340	; 0x1340 <LCD_Void_Write_String>
}
    146a:	6a 96       	adiw	r28, 0x1a	; 26
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	f8 94       	cli
    1470:	de bf       	out	0x3e, r29	; 62
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	cd bf       	out	0x3d, r28	; 61
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <LCD_Void_Clear_Display>:
void LCD_Void_Clear_Display(){
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	2e 97       	sbiw	r28, 0x0e	; 14
    1486:	0f b6       	in	r0, 0x3f	; 63
    1488:	f8 94       	cli
    148a:	de bf       	out	0x3e, r29	; 62
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	cd bf       	out	0x3d, r28	; 61
	LCD_Void_Write_Cmd(Init_Display_Clear);  //display clear
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <LCD_Void_Write_Cmd>
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	a0 e0       	ldi	r26, 0x00	; 0
    149c:	b0 e4       	ldi	r27, 0x40	; 64
    149e:	8b 87       	std	Y+11, r24	; 0x0b
    14a0:	9c 87       	std	Y+12, r25	; 0x0c
    14a2:	ad 87       	std	Y+13, r26	; 0x0d
    14a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    14a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    14aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	4a ef       	ldi	r20, 0xFA	; 250
    14b4:	54 e4       	ldi	r21, 0x44	; 68
    14b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14ba:	dc 01       	movw	r26, r24
    14bc:	cb 01       	movw	r24, r22
    14be:	8f 83       	std	Y+7, r24	; 0x07
    14c0:	98 87       	std	Y+8, r25	; 0x08
    14c2:	a9 87       	std	Y+9, r26	; 0x09
    14c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14c6:	6f 81       	ldd	r22, Y+7	; 0x07
    14c8:	78 85       	ldd	r23, Y+8	; 0x08
    14ca:	89 85       	ldd	r24, Y+9	; 0x09
    14cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	40 e8       	ldi	r20, 0x80	; 128
    14d4:	5f e3       	ldi	r21, 0x3F	; 63
    14d6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    14da:	88 23       	and	r24, r24
    14dc:	2c f4       	brge	.+10     	; 0x14e8 <LCD_Void_Clear_Display+0x6c>
		__ticks = 1;
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	9e 83       	std	Y+6, r25	; 0x06
    14e4:	8d 83       	std	Y+5, r24	; 0x05
    14e6:	3f c0       	rjmp	.+126    	; 0x1566 <LCD_Void_Clear_Display+0xea>
	else if (__tmp > 65535)
    14e8:	6f 81       	ldd	r22, Y+7	; 0x07
    14ea:	78 85       	ldd	r23, Y+8	; 0x08
    14ec:	89 85       	ldd	r24, Y+9	; 0x09
    14ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	3f ef       	ldi	r19, 0xFF	; 255
    14f4:	4f e7       	ldi	r20, 0x7F	; 127
    14f6:	57 e4       	ldi	r21, 0x47	; 71
    14f8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    14fc:	18 16       	cp	r1, r24
    14fe:	4c f5       	brge	.+82     	; 0x1552 <LCD_Void_Clear_Display+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1500:	6b 85       	ldd	r22, Y+11	; 0x0b
    1502:	7c 85       	ldd	r23, Y+12	; 0x0c
    1504:	8d 85       	ldd	r24, Y+13	; 0x0d
    1506:	9e 85       	ldd	r25, Y+14	; 0x0e
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	40 e2       	ldi	r20, 0x20	; 32
    150e:	51 e4       	ldi	r21, 0x41	; 65
    1510:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1514:	dc 01       	movw	r26, r24
    1516:	cb 01       	movw	r24, r22
    1518:	bc 01       	movw	r22, r24
    151a:	cd 01       	movw	r24, r26
    151c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	9e 83       	std	Y+6, r25	; 0x06
    1526:	8d 83       	std	Y+5, r24	; 0x05
    1528:	0f c0       	rjmp	.+30     	; 0x1548 <LCD_Void_Clear_Display+0xcc>
    152a:	88 ec       	ldi	r24, 0xC8	; 200
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	9c 83       	std	Y+4, r25	; 0x04
    1530:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	9c 81       	ldd	r25, Y+4	; 0x04
    1536:	01 97       	sbiw	r24, 0x01	; 1
    1538:	f1 f7       	brne	.-4      	; 0x1536 <LCD_Void_Clear_Display+0xba>
    153a:	9c 83       	std	Y+4, r25	; 0x04
    153c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    153e:	8d 81       	ldd	r24, Y+5	; 0x05
    1540:	9e 81       	ldd	r25, Y+6	; 0x06
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	9e 83       	std	Y+6, r25	; 0x06
    1546:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1548:	8d 81       	ldd	r24, Y+5	; 0x05
    154a:	9e 81       	ldd	r25, Y+6	; 0x06
    154c:	00 97       	sbiw	r24, 0x00	; 0
    154e:	69 f7       	brne	.-38     	; 0x152a <LCD_Void_Clear_Display+0xae>
    1550:	14 c0       	rjmp	.+40     	; 0x157a <LCD_Void_Clear_Display+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1552:	6f 81       	ldd	r22, Y+7	; 0x07
    1554:	78 85       	ldd	r23, Y+8	; 0x08
    1556:	89 85       	ldd	r24, Y+9	; 0x09
    1558:	9a 85       	ldd	r25, Y+10	; 0x0a
    155a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	9e 83       	std	Y+6, r25	; 0x06
    1564:	8d 83       	std	Y+5, r24	; 0x05
    1566:	8d 81       	ldd	r24, Y+5	; 0x05
    1568:	9e 81       	ldd	r25, Y+6	; 0x06
    156a:	9a 83       	std	Y+2, r25	; 0x02
    156c:	89 83       	std	Y+1, r24	; 0x01
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	9a 81       	ldd	r25, Y+2	; 0x02
    1572:	01 97       	sbiw	r24, 0x01	; 1
    1574:	f1 f7       	brne	.-4      	; 0x1572 <LCD_Void_Clear_Display+0xf6>
    1576:	9a 83       	std	Y+2, r25	; 0x02
    1578:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    157a:	2e 96       	adiw	r28, 0x0e	; 14
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	f8 94       	cli
    1580:	de bf       	out	0x3e, r29	; 62
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	cd bf       	out	0x3d, r28	; 61
    1586:	cf 91       	pop	r28
    1588:	df 91       	pop	r29
    158a:	08 95       	ret

0000158c <reverse>:

void reverse(u8 *ptr,u8 lenght){
    158c:	df 93       	push	r29
    158e:	cf 93       	push	r28
    1590:	00 d0       	rcall	.+0      	; 0x1592 <reverse+0x6>
    1592:	00 d0       	rcall	.+0      	; 0x1594 <reverse+0x8>
    1594:	0f 92       	push	r0
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	9c 83       	std	Y+4, r25	; 0x04
    159c:	8b 83       	std	Y+3, r24	; 0x03
    159e:	6d 83       	std	Y+5, r22	; 0x05
	u8 start = 0;
    15a0:	1a 82       	std	Y+2, r1	; 0x02
	u8 end = lenght - 1;
    15a2:	8d 81       	ldd	r24, Y+5	; 0x05
    15a4:	81 50       	subi	r24, 0x01	; 1
    15a6:	89 83       	std	Y+1, r24	; 0x01
    15a8:	19 c0       	rjmp	.+50     	; 0x15dc <reverse+0x50>
	while(start < end){
		swap(&ptr[start],&ptr[end]);
    15aa:	8a 81       	ldd	r24, Y+2	; 0x02
    15ac:	28 2f       	mov	r18, r24
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	9c 81       	ldd	r25, Y+4	; 0x04
    15b4:	ac 01       	movw	r20, r24
    15b6:	42 0f       	add	r20, r18
    15b8:	53 1f       	adc	r21, r19
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	28 2f       	mov	r18, r24
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	9c 81       	ldd	r25, Y+4	; 0x04
    15c4:	28 0f       	add	r18, r24
    15c6:	39 1f       	adc	r19, r25
    15c8:	ca 01       	movw	r24, r20
    15ca:	b9 01       	movw	r22, r18
    15cc:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <swap>
		start ++;
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	8f 5f       	subi	r24, 0xFF	; 255
    15d4:	8a 83       	std	Y+2, r24	; 0x02
		end --;
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	81 50       	subi	r24, 0x01	; 1
    15da:	89 83       	std	Y+1, r24	; 0x01
}

void reverse(u8 *ptr,u8 lenght){
	u8 start = 0;
	u8 end = lenght - 1;
	while(start < end){
    15dc:	9a 81       	ldd	r25, Y+2	; 0x02
    15de:	89 81       	ldd	r24, Y+1	; 0x01
    15e0:	98 17       	cp	r25, r24
    15e2:	18 f3       	brcs	.-58     	; 0x15aa <reverse+0x1e>
		swap(&ptr[start],&ptr[end]);
		start ++;
		end --;
	}
}
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	cf 91       	pop	r28
    15f0:	df 91       	pop	r29
    15f2:	08 95       	ret

000015f4 <swap>:
void swap(u8 *a,u8 *b){
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	00 d0       	rcall	.+0      	; 0x15fa <swap+0x6>
    15fa:	00 d0       	rcall	.+0      	; 0x15fc <swap+0x8>
    15fc:	0f 92       	push	r0
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	9b 83       	std	Y+3, r25	; 0x03
    1604:	8a 83       	std	Y+2, r24	; 0x02
    1606:	7d 83       	std	Y+5, r23	; 0x05
    1608:	6c 83       	std	Y+4, r22	; 0x04
	u8 z = *a;
    160a:	ea 81       	ldd	r30, Y+2	; 0x02
    160c:	fb 81       	ldd	r31, Y+3	; 0x03
    160e:	80 81       	ld	r24, Z
    1610:	89 83       	std	Y+1, r24	; 0x01
	*a = *b;
    1612:	ec 81       	ldd	r30, Y+4	; 0x04
    1614:	fd 81       	ldd	r31, Y+5	; 0x05
    1616:	80 81       	ld	r24, Z
    1618:	ea 81       	ldd	r30, Y+2	; 0x02
    161a:	fb 81       	ldd	r31, Y+3	; 0x03
    161c:	80 83       	st	Z, r24
	*b = z;
    161e:	ec 81       	ldd	r30, Y+4	; 0x04
    1620:	fd 81       	ldd	r31, Y+5	; 0x05
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	80 83       	st	Z, r24
}
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <LCD_Void_Write>:

void LCD_Void_Write(u8 Copy_U8_Value){
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	69 97       	sbiw	r28, 0x19	; 25
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	89 8f       	std	Y+25, r24	; 0x19
	DIO_U8_SetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RW_PIN,LOW);
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	61 e0       	ldi	r22, 0x01	; 1
    1650:	40 e0       	ldi	r20, 0x00	; 0
    1652:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_U8_SetPinValue>
	DIO_U8_SetPinValue(LCD_U8_DATA_PORT,LCD_U8_DATA_PIN0,Get_Bit(Copy_U8_Value,BIT0));
    1656:	89 8d       	ldd	r24, Y+25	; 0x19
    1658:	98 2f       	mov	r25, r24
    165a:	91 70       	andi	r25, 0x01	; 1
    165c:	82 e0       	ldi	r24, 0x02	; 2
    165e:	60 e0       	ldi	r22, 0x00	; 0
    1660:	49 2f       	mov	r20, r25
    1662:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_U8_SetPinValue>
	DIO_U8_SetPinValue(LCD_U8_DATA_PORT,LCD_U8_DATA_PIN1,Get_Bit(Copy_U8_Value,BIT1));
    1666:	89 8d       	ldd	r24, Y+25	; 0x19
    1668:	86 95       	lsr	r24
    166a:	98 2f       	mov	r25, r24
    166c:	91 70       	andi	r25, 0x01	; 1
    166e:	82 e0       	ldi	r24, 0x02	; 2
    1670:	61 e0       	ldi	r22, 0x01	; 1
    1672:	49 2f       	mov	r20, r25
    1674:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_U8_SetPinValue>
	DIO_U8_SetPinValue(LCD_U8_DATA_PORT,LCD_U8_DATA_PIN2,Get_Bit(Copy_U8_Value,BIT2));
    1678:	89 8d       	ldd	r24, Y+25	; 0x19
    167a:	86 95       	lsr	r24
    167c:	86 95       	lsr	r24
    167e:	98 2f       	mov	r25, r24
    1680:	91 70       	andi	r25, 0x01	; 1
    1682:	82 e0       	ldi	r24, 0x02	; 2
    1684:	62 e0       	ldi	r22, 0x02	; 2
    1686:	49 2f       	mov	r20, r25
    1688:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_U8_SetPinValue>
	DIO_U8_SetPinValue(LCD_U8_DATA_PORT,LCD_U8_DATA_PIN3,Get_Bit(Copy_U8_Value,BIT3));
    168c:	89 8d       	ldd	r24, Y+25	; 0x19
    168e:	86 95       	lsr	r24
    1690:	86 95       	lsr	r24
    1692:	86 95       	lsr	r24
    1694:	98 2f       	mov	r25, r24
    1696:	91 70       	andi	r25, 0x01	; 1
    1698:	82 e0       	ldi	r24, 0x02	; 2
    169a:	63 e0       	ldi	r22, 0x03	; 3
    169c:	49 2f       	mov	r20, r25
    169e:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_U8_SetPinValue>
	DIO_U8_SetPinValue(LCD_U8_DATA_PORT,LCD_U8_DATA_PIN4,Get_Bit(Copy_U8_Value,BIT4));
    16a2:	89 8d       	ldd	r24, Y+25	; 0x19
    16a4:	82 95       	swap	r24
    16a6:	8f 70       	andi	r24, 0x0F	; 15
    16a8:	98 2f       	mov	r25, r24
    16aa:	91 70       	andi	r25, 0x01	; 1
    16ac:	82 e0       	ldi	r24, 0x02	; 2
    16ae:	64 e0       	ldi	r22, 0x04	; 4
    16b0:	49 2f       	mov	r20, r25
    16b2:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_U8_SetPinValue>
	DIO_U8_SetPinValue(LCD_U8_DATA_PORT,LCD_U8_DATA_PIN5,Get_Bit(Copy_U8_Value,BIT5));
    16b6:	89 8d       	ldd	r24, Y+25	; 0x19
    16b8:	82 95       	swap	r24
    16ba:	86 95       	lsr	r24
    16bc:	87 70       	andi	r24, 0x07	; 7
    16be:	98 2f       	mov	r25, r24
    16c0:	91 70       	andi	r25, 0x01	; 1
    16c2:	82 e0       	ldi	r24, 0x02	; 2
    16c4:	65 e0       	ldi	r22, 0x05	; 5
    16c6:	49 2f       	mov	r20, r25
    16c8:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_U8_SetPinValue>
	DIO_U8_SetPinValue(LCD_U8_DATA_PORT,LCD_U8_DATA_PIN6,Get_Bit(Copy_U8_Value,BIT6));
    16cc:	89 8d       	ldd	r24, Y+25	; 0x19
    16ce:	82 95       	swap	r24
    16d0:	86 95       	lsr	r24
    16d2:	86 95       	lsr	r24
    16d4:	83 70       	andi	r24, 0x03	; 3
    16d6:	98 2f       	mov	r25, r24
    16d8:	91 70       	andi	r25, 0x01	; 1
    16da:	82 e0       	ldi	r24, 0x02	; 2
    16dc:	66 e0       	ldi	r22, 0x06	; 6
    16de:	49 2f       	mov	r20, r25
    16e0:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_U8_SetPinValue>
	DIO_U8_SetPinValue(LCD_U8_DATA_PORT,LCD_U8_DATA_PIN7,Get_Bit(Copy_U8_Value,BIT7));
    16e4:	89 8d       	ldd	r24, Y+25	; 0x19
    16e6:	98 2f       	mov	r25, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	99 27       	eor	r25, r25
    16ec:	99 1f       	adc	r25, r25
    16ee:	82 e0       	ldi	r24, 0x02	; 2
    16f0:	67 e0       	ldi	r22, 0x07	; 7
    16f2:	49 2f       	mov	r20, r25
    16f4:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_U8_SetPinValue>

	DIO_U8_SetPinValue(LCD_U8_CTRL_PORT,LCD_U8_ENABLE_PIN,HIGH);
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	62 e0       	ldi	r22, 0x02	; 2
    16fc:	41 e0       	ldi	r20, 0x01	; 1
    16fe:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_U8_SetPinValue>
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	a0 e8       	ldi	r26, 0x80	; 128
    1708:	bf e3       	ldi	r27, 0x3F	; 63
    170a:	8d 8b       	std	Y+21, r24	; 0x15
    170c:	9e 8b       	std	Y+22, r25	; 0x16
    170e:	af 8b       	std	Y+23, r26	; 0x17
    1710:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1712:	6d 89       	ldd	r22, Y+21	; 0x15
    1714:	7e 89       	ldd	r23, Y+22	; 0x16
    1716:	8f 89       	ldd	r24, Y+23	; 0x17
    1718:	98 8d       	ldd	r25, Y+24	; 0x18
    171a:	2b ea       	ldi	r18, 0xAB	; 171
    171c:	3a ea       	ldi	r19, 0xAA	; 170
    171e:	4a e2       	ldi	r20, 0x2A	; 42
    1720:	50 e4       	ldi	r21, 0x40	; 64
    1722:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	89 8b       	std	Y+17, r24	; 0x11
    172c:	9a 8b       	std	Y+18, r25	; 0x12
    172e:	ab 8b       	std	Y+19, r26	; 0x13
    1730:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1732:	69 89       	ldd	r22, Y+17	; 0x11
    1734:	7a 89       	ldd	r23, Y+18	; 0x12
    1736:	8b 89       	ldd	r24, Y+19	; 0x13
    1738:	9c 89       	ldd	r25, Y+20	; 0x14
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	40 e8       	ldi	r20, 0x80	; 128
    1740:	5f e3       	ldi	r21, 0x3F	; 63
    1742:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1746:	88 23       	and	r24, r24
    1748:	1c f4       	brge	.+6      	; 0x1750 <LCD_Void_Write+0x11a>
		__ticks = 1;
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	88 8b       	std	Y+16, r24	; 0x10
    174e:	91 c0       	rjmp	.+290    	; 0x1872 <LCD_Void_Write+0x23c>
	else if (__tmp > 255)
    1750:	69 89       	ldd	r22, Y+17	; 0x11
    1752:	7a 89       	ldd	r23, Y+18	; 0x12
    1754:	8b 89       	ldd	r24, Y+19	; 0x13
    1756:	9c 89       	ldd	r25, Y+20	; 0x14
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	4f e7       	ldi	r20, 0x7F	; 127
    175e:	53 e4       	ldi	r21, 0x43	; 67
    1760:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1764:	18 16       	cp	r1, r24
    1766:	0c f0       	brlt	.+2      	; 0x176a <LCD_Void_Write+0x134>
    1768:	7b c0       	rjmp	.+246    	; 0x1860 <LCD_Void_Write+0x22a>
	{
		_delay_ms(__us / 1000.0);
    176a:	6d 89       	ldd	r22, Y+21	; 0x15
    176c:	7e 89       	ldd	r23, Y+22	; 0x16
    176e:	8f 89       	ldd	r24, Y+23	; 0x17
    1770:	98 8d       	ldd	r25, Y+24	; 0x18
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	4a e7       	ldi	r20, 0x7A	; 122
    1778:	54 e4       	ldi	r21, 0x44	; 68
    177a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    177e:	dc 01       	movw	r26, r24
    1780:	cb 01       	movw	r24, r22
    1782:	8c 87       	std	Y+12, r24	; 0x0c
    1784:	9d 87       	std	Y+13, r25	; 0x0d
    1786:	ae 87       	std	Y+14, r26	; 0x0e
    1788:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    178a:	6c 85       	ldd	r22, Y+12	; 0x0c
    178c:	7d 85       	ldd	r23, Y+13	; 0x0d
    178e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1790:	9f 85       	ldd	r25, Y+15	; 0x0f
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	4a ef       	ldi	r20, 0xFA	; 250
    1798:	54 e4       	ldi	r21, 0x44	; 68
    179a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	88 87       	std	Y+8, r24	; 0x08
    17a4:	99 87       	std	Y+9, r25	; 0x09
    17a6:	aa 87       	std	Y+10, r26	; 0x0a
    17a8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    17aa:	68 85       	ldd	r22, Y+8	; 0x08
    17ac:	79 85       	ldd	r23, Y+9	; 0x09
    17ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    17b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	40 e8       	ldi	r20, 0x80	; 128
    17b8:	5f e3       	ldi	r21, 0x3F	; 63
    17ba:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17be:	88 23       	and	r24, r24
    17c0:	2c f4       	brge	.+10     	; 0x17cc <LCD_Void_Write+0x196>
		__ticks = 1;
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	9f 83       	std	Y+7, r25	; 0x07
    17c8:	8e 83       	std	Y+6, r24	; 0x06
    17ca:	3f c0       	rjmp	.+126    	; 0x184a <LCD_Void_Write+0x214>
	else if (__tmp > 65535)
    17cc:	68 85       	ldd	r22, Y+8	; 0x08
    17ce:	79 85       	ldd	r23, Y+9	; 0x09
    17d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    17d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	3f ef       	ldi	r19, 0xFF	; 255
    17d8:	4f e7       	ldi	r20, 0x7F	; 127
    17da:	57 e4       	ldi	r21, 0x47	; 71
    17dc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17e0:	18 16       	cp	r1, r24
    17e2:	4c f5       	brge	.+82     	; 0x1836 <LCD_Void_Write+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e4:	6c 85       	ldd	r22, Y+12	; 0x0c
    17e6:	7d 85       	ldd	r23, Y+13	; 0x0d
    17e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    17ea:	9f 85       	ldd	r25, Y+15	; 0x0f
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	40 e2       	ldi	r20, 0x20	; 32
    17f2:	51 e4       	ldi	r21, 0x41	; 65
    17f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	bc 01       	movw	r22, r24
    17fe:	cd 01       	movw	r24, r26
    1800:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	9f 83       	std	Y+7, r25	; 0x07
    180a:	8e 83       	std	Y+6, r24	; 0x06
    180c:	0f c0       	rjmp	.+30     	; 0x182c <LCD_Void_Write+0x1f6>
    180e:	88 ec       	ldi	r24, 0xC8	; 200
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	9d 83       	std	Y+5, r25	; 0x05
    1814:	8c 83       	std	Y+4, r24	; 0x04
    1816:	8c 81       	ldd	r24, Y+4	; 0x04
    1818:	9d 81       	ldd	r25, Y+5	; 0x05
    181a:	01 97       	sbiw	r24, 0x01	; 1
    181c:	f1 f7       	brne	.-4      	; 0x181a <LCD_Void_Write+0x1e4>
    181e:	9d 83       	std	Y+5, r25	; 0x05
    1820:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1822:	8e 81       	ldd	r24, Y+6	; 0x06
    1824:	9f 81       	ldd	r25, Y+7	; 0x07
    1826:	01 97       	sbiw	r24, 0x01	; 1
    1828:	9f 83       	std	Y+7, r25	; 0x07
    182a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    182c:	8e 81       	ldd	r24, Y+6	; 0x06
    182e:	9f 81       	ldd	r25, Y+7	; 0x07
    1830:	00 97       	sbiw	r24, 0x00	; 0
    1832:	69 f7       	brne	.-38     	; 0x180e <LCD_Void_Write+0x1d8>
    1834:	24 c0       	rjmp	.+72     	; 0x187e <LCD_Void_Write+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1836:	68 85       	ldd	r22, Y+8	; 0x08
    1838:	79 85       	ldd	r23, Y+9	; 0x09
    183a:	8a 85       	ldd	r24, Y+10	; 0x0a
    183c:	9b 85       	ldd	r25, Y+11	; 0x0b
    183e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	9f 83       	std	Y+7, r25	; 0x07
    1848:	8e 83       	std	Y+6, r24	; 0x06
    184a:	8e 81       	ldd	r24, Y+6	; 0x06
    184c:	9f 81       	ldd	r25, Y+7	; 0x07
    184e:	9b 83       	std	Y+3, r25	; 0x03
    1850:	8a 83       	std	Y+2, r24	; 0x02
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	9b 81       	ldd	r25, Y+3	; 0x03
    1856:	01 97       	sbiw	r24, 0x01	; 1
    1858:	f1 f7       	brne	.-4      	; 0x1856 <LCD_Void_Write+0x220>
    185a:	9b 83       	std	Y+3, r25	; 0x03
    185c:	8a 83       	std	Y+2, r24	; 0x02
    185e:	0f c0       	rjmp	.+30     	; 0x187e <LCD_Void_Write+0x248>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1860:	69 89       	ldd	r22, Y+17	; 0x11
    1862:	7a 89       	ldd	r23, Y+18	; 0x12
    1864:	8b 89       	ldd	r24, Y+19	; 0x13
    1866:	9c 89       	ldd	r25, Y+20	; 0x14
    1868:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	88 8b       	std	Y+16, r24	; 0x10
    1872:	88 89       	ldd	r24, Y+16	; 0x10
    1874:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	8a 95       	dec	r24
    187a:	f1 f7       	brne	.-4      	; 0x1878 <LCD_Void_Write+0x242>
    187c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_U8_SetPinValue(LCD_U8_CTRL_PORT,LCD_U8_ENABLE_PIN,LOW);
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	62 e0       	ldi	r22, 0x02	; 2
    1882:	40 e0       	ldi	r20, 0x00	; 0
    1884:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_U8_SetPinValue>

}
    1888:	69 96       	adiw	r28, 0x19	; 25
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	de bf       	out	0x3e, r29	; 62
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	cd bf       	out	0x3d, r28	; 61
    1894:	cf 91       	pop	r28
    1896:	df 91       	pop	r29
    1898:	08 95       	ret

0000189a <LCD_VOID_Init_8Bit>:

void LCD_VOID_Init_8Bit(){
    189a:	0f 93       	push	r16
    189c:	1f 93       	push	r17
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
    18a6:	c6 55       	subi	r28, 0x56	; 86
    18a8:	d0 40       	sbci	r29, 0x00	; 0
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	f8 94       	cli
    18ae:	de bf       	out	0x3e, r29	; 62
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	cd bf       	out	0x3d, r28	; 61
	DIO_U8_SetPortDirection(LCD_U8_DATA_PORT,Max_Port_Value);
    18b4:	82 e0       	ldi	r24, 0x02	; 2
    18b6:	6f ef       	ldi	r22, 0xFF	; 255
    18b8:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_U8_SetPortDirection>
	DIO_U8_SetPinDirection(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,OUTPUT);
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	60 e0       	ldi	r22, 0x00	; 0
    18c0:	41 e0       	ldi	r20, 0x01	; 1
    18c2:	0e 94 c6 07 	call	0xf8c	; 0xf8c <DIO_U8_SetPinDirection>
	DIO_U8_SetPinDirection(LCD_U8_CTRL_PORT,LCD_U8_RW_PIN,OUTPUT);
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	61 e0       	ldi	r22, 0x01	; 1
    18ca:	41 e0       	ldi	r20, 0x01	; 1
    18cc:	0e 94 c6 07 	call	0xf8c	; 0xf8c <DIO_U8_SetPinDirection>
	DIO_U8_SetPinDirection(LCD_U8_CTRL_PORT,LCD_U8_ENABLE_PIN,OUTPUT);
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	62 e0       	ldi	r22, 0x02	; 2
    18d4:	41 e0       	ldi	r20, 0x01	; 1
    18d6:	0e 94 c6 07 	call	0xf8c	; 0xf8c <DIO_U8_SetPinDirection>
    18da:	fe 01       	movw	r30, r28
    18dc:	ed 5a       	subi	r30, 0xAD	; 173
    18de:	ff 4f       	sbci	r31, 0xFF	; 255
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	a8 e4       	ldi	r26, 0x48	; 72
    18e6:	b2 e4       	ldi	r27, 0x42	; 66
    18e8:	80 83       	st	Z, r24
    18ea:	91 83       	std	Z+1, r25	; 0x01
    18ec:	a2 83       	std	Z+2, r26	; 0x02
    18ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f0:	8e 01       	movw	r16, r28
    18f2:	01 5b       	subi	r16, 0xB1	; 177
    18f4:	1f 4f       	sbci	r17, 0xFF	; 255
    18f6:	fe 01       	movw	r30, r28
    18f8:	ed 5a       	subi	r30, 0xAD	; 173
    18fa:	ff 4f       	sbci	r31, 0xFF	; 255
    18fc:	60 81       	ld	r22, Z
    18fe:	71 81       	ldd	r23, Z+1	; 0x01
    1900:	82 81       	ldd	r24, Z+2	; 0x02
    1902:	93 81       	ldd	r25, Z+3	; 0x03
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	4a ef       	ldi	r20, 0xFA	; 250
    190a:	54 e4       	ldi	r21, 0x44	; 68
    190c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	f8 01       	movw	r30, r16
    1916:	80 83       	st	Z, r24
    1918:	91 83       	std	Z+1, r25	; 0x01
    191a:	a2 83       	std	Z+2, r26	; 0x02
    191c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    191e:	fe 01       	movw	r30, r28
    1920:	e1 5b       	subi	r30, 0xB1	; 177
    1922:	ff 4f       	sbci	r31, 0xFF	; 255
    1924:	60 81       	ld	r22, Z
    1926:	71 81       	ldd	r23, Z+1	; 0x01
    1928:	82 81       	ldd	r24, Z+2	; 0x02
    192a:	93 81       	ldd	r25, Z+3	; 0x03
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	40 e8       	ldi	r20, 0x80	; 128
    1932:	5f e3       	ldi	r21, 0x3F	; 63
    1934:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1938:	88 23       	and	r24, r24
    193a:	44 f4       	brge	.+16     	; 0x194c <LCD_VOID_Init_8Bit+0xb2>
		__ticks = 1;
    193c:	fe 01       	movw	r30, r28
    193e:	e3 5b       	subi	r30, 0xB3	; 179
    1940:	ff 4f       	sbci	r31, 0xFF	; 255
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	91 83       	std	Z+1, r25	; 0x01
    1948:	80 83       	st	Z, r24
    194a:	64 c0       	rjmp	.+200    	; 0x1a14 <LCD_VOID_Init_8Bit+0x17a>
	else if (__tmp > 65535)
    194c:	fe 01       	movw	r30, r28
    194e:	e1 5b       	subi	r30, 0xB1	; 177
    1950:	ff 4f       	sbci	r31, 0xFF	; 255
    1952:	60 81       	ld	r22, Z
    1954:	71 81       	ldd	r23, Z+1	; 0x01
    1956:	82 81       	ldd	r24, Z+2	; 0x02
    1958:	93 81       	ldd	r25, Z+3	; 0x03
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	3f ef       	ldi	r19, 0xFF	; 255
    195e:	4f e7       	ldi	r20, 0x7F	; 127
    1960:	57 e4       	ldi	r21, 0x47	; 71
    1962:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1966:	18 16       	cp	r1, r24
    1968:	0c f0       	brlt	.+2      	; 0x196c <LCD_VOID_Init_8Bit+0xd2>
    196a:	43 c0       	rjmp	.+134    	; 0x19f2 <LCD_VOID_Init_8Bit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196c:	fe 01       	movw	r30, r28
    196e:	ed 5a       	subi	r30, 0xAD	; 173
    1970:	ff 4f       	sbci	r31, 0xFF	; 255
    1972:	60 81       	ld	r22, Z
    1974:	71 81       	ldd	r23, Z+1	; 0x01
    1976:	82 81       	ldd	r24, Z+2	; 0x02
    1978:	93 81       	ldd	r25, Z+3	; 0x03
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	40 e2       	ldi	r20, 0x20	; 32
    1980:	51 e4       	ldi	r21, 0x41	; 65
    1982:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	8e 01       	movw	r16, r28
    198c:	03 5b       	subi	r16, 0xB3	; 179
    198e:	1f 4f       	sbci	r17, 0xFF	; 255
    1990:	bc 01       	movw	r22, r24
    1992:	cd 01       	movw	r24, r26
    1994:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	f8 01       	movw	r30, r16
    199e:	91 83       	std	Z+1, r25	; 0x01
    19a0:	80 83       	st	Z, r24
    19a2:	1f c0       	rjmp	.+62     	; 0x19e2 <LCD_VOID_Init_8Bit+0x148>
    19a4:	fe 01       	movw	r30, r28
    19a6:	e5 5b       	subi	r30, 0xB5	; 181
    19a8:	ff 4f       	sbci	r31, 0xFF	; 255
    19aa:	88 ec       	ldi	r24, 0xC8	; 200
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	91 83       	std	Z+1, r25	; 0x01
    19b0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19b2:	fe 01       	movw	r30, r28
    19b4:	e5 5b       	subi	r30, 0xB5	; 181
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	80 81       	ld	r24, Z
    19ba:	91 81       	ldd	r25, Z+1	; 0x01
    19bc:	01 97       	sbiw	r24, 0x01	; 1
    19be:	f1 f7       	brne	.-4      	; 0x19bc <LCD_VOID_Init_8Bit+0x122>
    19c0:	fe 01       	movw	r30, r28
    19c2:	e5 5b       	subi	r30, 0xB5	; 181
    19c4:	ff 4f       	sbci	r31, 0xFF	; 255
    19c6:	91 83       	std	Z+1, r25	; 0x01
    19c8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ca:	de 01       	movw	r26, r28
    19cc:	a3 5b       	subi	r26, 0xB3	; 179
    19ce:	bf 4f       	sbci	r27, 0xFF	; 255
    19d0:	fe 01       	movw	r30, r28
    19d2:	e3 5b       	subi	r30, 0xB3	; 179
    19d4:	ff 4f       	sbci	r31, 0xFF	; 255
    19d6:	80 81       	ld	r24, Z
    19d8:	91 81       	ldd	r25, Z+1	; 0x01
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	11 96       	adiw	r26, 0x01	; 1
    19de:	9c 93       	st	X, r25
    19e0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e2:	fe 01       	movw	r30, r28
    19e4:	e3 5b       	subi	r30, 0xB3	; 179
    19e6:	ff 4f       	sbci	r31, 0xFF	; 255
    19e8:	80 81       	ld	r24, Z
    19ea:	91 81       	ldd	r25, Z+1	; 0x01
    19ec:	00 97       	sbiw	r24, 0x00	; 0
    19ee:	d1 f6       	brne	.-76     	; 0x19a4 <LCD_VOID_Init_8Bit+0x10a>
    19f0:	27 c0       	rjmp	.+78     	; 0x1a40 <LCD_VOID_Init_8Bit+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f2:	8e 01       	movw	r16, r28
    19f4:	03 5b       	subi	r16, 0xB3	; 179
    19f6:	1f 4f       	sbci	r17, 0xFF	; 255
    19f8:	fe 01       	movw	r30, r28
    19fa:	e1 5b       	subi	r30, 0xB1	; 177
    19fc:	ff 4f       	sbci	r31, 0xFF	; 255
    19fe:	60 81       	ld	r22, Z
    1a00:	71 81       	ldd	r23, Z+1	; 0x01
    1a02:	82 81       	ldd	r24, Z+2	; 0x02
    1a04:	93 81       	ldd	r25, Z+3	; 0x03
    1a06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	f8 01       	movw	r30, r16
    1a10:	91 83       	std	Z+1, r25	; 0x01
    1a12:	80 83       	st	Z, r24
    1a14:	de 01       	movw	r26, r28
    1a16:	a7 5b       	subi	r26, 0xB7	; 183
    1a18:	bf 4f       	sbci	r27, 0xFF	; 255
    1a1a:	fe 01       	movw	r30, r28
    1a1c:	e3 5b       	subi	r30, 0xB3	; 179
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	80 81       	ld	r24, Z
    1a22:	91 81       	ldd	r25, Z+1	; 0x01
    1a24:	8d 93       	st	X+, r24
    1a26:	9c 93       	st	X, r25
    1a28:	fe 01       	movw	r30, r28
    1a2a:	e7 5b       	subi	r30, 0xB7	; 183
    1a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2e:	80 81       	ld	r24, Z
    1a30:	91 81       	ldd	r25, Z+1	; 0x01
    1a32:	01 97       	sbiw	r24, 0x01	; 1
    1a34:	f1 f7       	brne	.-4      	; 0x1a32 <LCD_VOID_Init_8Bit+0x198>
    1a36:	fe 01       	movw	r30, r28
    1a38:	e7 5b       	subi	r30, 0xB7	; 183
    1a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3c:	91 83       	std	Z+1, r25	; 0x01
    1a3e:	80 83       	st	Z, r24

	_delay_ms(50);

	LCD_Void_Write_Cmd(Init_Function_set);
    1a40:	88 e3       	ldi	r24, 0x38	; 56
    1a42:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <LCD_Void_Write_Cmd>
    1a46:	fe 01       	movw	r30, r28
    1a48:	eb 5b       	subi	r30, 0xBB	; 187
    1a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	a8 e4       	ldi	r26, 0x48	; 72
    1a52:	b2 e4       	ldi	r27, 0x42	; 66
    1a54:	80 83       	st	Z, r24
    1a56:	91 83       	std	Z+1, r25	; 0x01
    1a58:	a2 83       	std	Z+2, r26	; 0x02
    1a5a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a5c:	8e 01       	movw	r16, r28
    1a5e:	0f 5b       	subi	r16, 0xBF	; 191
    1a60:	1f 4f       	sbci	r17, 0xFF	; 255
    1a62:	fe 01       	movw	r30, r28
    1a64:	eb 5b       	subi	r30, 0xBB	; 187
    1a66:	ff 4f       	sbci	r31, 0xFF	; 255
    1a68:	60 81       	ld	r22, Z
    1a6a:	71 81       	ldd	r23, Z+1	; 0x01
    1a6c:	82 81       	ldd	r24, Z+2	; 0x02
    1a6e:	93 81       	ldd	r25, Z+3	; 0x03
    1a70:	2b ea       	ldi	r18, 0xAB	; 171
    1a72:	3a ea       	ldi	r19, 0xAA	; 170
    1a74:	4a e2       	ldi	r20, 0x2A	; 42
    1a76:	50 e4       	ldi	r21, 0x40	; 64
    1a78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	f8 01       	movw	r30, r16
    1a82:	80 83       	st	Z, r24
    1a84:	91 83       	std	Z+1, r25	; 0x01
    1a86:	a2 83       	std	Z+2, r26	; 0x02
    1a88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a8a:	fe 01       	movw	r30, r28
    1a8c:	ef 5b       	subi	r30, 0xBF	; 191
    1a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a90:	60 81       	ld	r22, Z
    1a92:	71 81       	ldd	r23, Z+1	; 0x01
    1a94:	82 81       	ldd	r24, Z+2	; 0x02
    1a96:	93 81       	ldd	r25, Z+3	; 0x03
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	40 e8       	ldi	r20, 0x80	; 128
    1a9e:	5f e3       	ldi	r21, 0x3F	; 63
    1aa0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1aa4:	88 23       	and	r24, r24
    1aa6:	34 f4       	brge	.+12     	; 0x1ab4 <LCD_VOID_Init_8Bit+0x21a>
		__ticks = 1;
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	fe 01       	movw	r30, r28
    1aac:	e0 5c       	subi	r30, 0xC0	; 192
    1aae:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab0:	80 83       	st	Z, r24
    1ab2:	9d c0       	rjmp	.+314    	; 0x1bee <LCD_VOID_Init_8Bit+0x354>
	else if (__tmp > 255)
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	ef 5b       	subi	r30, 0xBF	; 191
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	60 81       	ld	r22, Z
    1abc:	71 81       	ldd	r23, Z+1	; 0x01
    1abe:	82 81       	ldd	r24, Z+2	; 0x02
    1ac0:	93 81       	ldd	r25, Z+3	; 0x03
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	4f e7       	ldi	r20, 0x7F	; 127
    1ac8:	53 e4       	ldi	r21, 0x43	; 67
    1aca:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ace:	18 16       	cp	r1, r24
    1ad0:	0c f0       	brlt	.+2      	; 0x1ad4 <LCD_VOID_Init_8Bit+0x23a>
    1ad2:	7e c0       	rjmp	.+252    	; 0x1bd0 <LCD_VOID_Init_8Bit+0x336>
	{
		_delay_ms(__us / 1000.0);
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	eb 5b       	subi	r30, 0xBB	; 187
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	60 81       	ld	r22, Z
    1adc:	71 81       	ldd	r23, Z+1	; 0x01
    1ade:	82 81       	ldd	r24, Z+2	; 0x02
    1ae0:	93 81       	ldd	r25, Z+3	; 0x03
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	4a e7       	ldi	r20, 0x7A	; 122
    1ae8:	54 e4       	ldi	r21, 0x44	; 68
    1aea:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	8c af       	std	Y+60, r24	; 0x3c
    1af4:	9d af       	std	Y+61, r25	; 0x3d
    1af6:	ae af       	std	Y+62, r26	; 0x3e
    1af8:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1afa:	6c ad       	ldd	r22, Y+60	; 0x3c
    1afc:	7d ad       	ldd	r23, Y+61	; 0x3d
    1afe:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b00:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	4a ef       	ldi	r20, 0xFA	; 250
    1b08:	54 e4       	ldi	r21, 0x44	; 68
    1b0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	88 af       	std	Y+56, r24	; 0x38
    1b14:	99 af       	std	Y+57, r25	; 0x39
    1b16:	aa af       	std	Y+58, r26	; 0x3a
    1b18:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1b1a:	68 ad       	ldd	r22, Y+56	; 0x38
    1b1c:	79 ad       	ldd	r23, Y+57	; 0x39
    1b1e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1b20:	9b ad       	ldd	r25, Y+59	; 0x3b
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	40 e8       	ldi	r20, 0x80	; 128
    1b28:	5f e3       	ldi	r21, 0x3F	; 63
    1b2a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b2e:	88 23       	and	r24, r24
    1b30:	2c f4       	brge	.+10     	; 0x1b3c <LCD_VOID_Init_8Bit+0x2a2>
		__ticks = 1;
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	9f ab       	std	Y+55, r25	; 0x37
    1b38:	8e ab       	std	Y+54, r24	; 0x36
    1b3a:	3f c0       	rjmp	.+126    	; 0x1bba <LCD_VOID_Init_8Bit+0x320>
	else if (__tmp > 65535)
    1b3c:	68 ad       	ldd	r22, Y+56	; 0x38
    1b3e:	79 ad       	ldd	r23, Y+57	; 0x39
    1b40:	8a ad       	ldd	r24, Y+58	; 0x3a
    1b42:	9b ad       	ldd	r25, Y+59	; 0x3b
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	3f ef       	ldi	r19, 0xFF	; 255
    1b48:	4f e7       	ldi	r20, 0x7F	; 127
    1b4a:	57 e4       	ldi	r21, 0x47	; 71
    1b4c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b50:	18 16       	cp	r1, r24
    1b52:	4c f5       	brge	.+82     	; 0x1ba6 <LCD_VOID_Init_8Bit+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b54:	6c ad       	ldd	r22, Y+60	; 0x3c
    1b56:	7d ad       	ldd	r23, Y+61	; 0x3d
    1b58:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b5a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	40 e2       	ldi	r20, 0x20	; 32
    1b62:	51 e4       	ldi	r21, 0x41	; 65
    1b64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	bc 01       	movw	r22, r24
    1b6e:	cd 01       	movw	r24, r26
    1b70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	9f ab       	std	Y+55, r25	; 0x37
    1b7a:	8e ab       	std	Y+54, r24	; 0x36
    1b7c:	0f c0       	rjmp	.+30     	; 0x1b9c <LCD_VOID_Init_8Bit+0x302>
    1b7e:	88 ec       	ldi	r24, 0xC8	; 200
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	9d ab       	std	Y+53, r25	; 0x35
    1b84:	8c ab       	std	Y+52, r24	; 0x34
    1b86:	8c a9       	ldd	r24, Y+52	; 0x34
    1b88:	9d a9       	ldd	r25, Y+53	; 0x35
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	f1 f7       	brne	.-4      	; 0x1b8a <LCD_VOID_Init_8Bit+0x2f0>
    1b8e:	9d ab       	std	Y+53, r25	; 0x35
    1b90:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b92:	8e a9       	ldd	r24, Y+54	; 0x36
    1b94:	9f a9       	ldd	r25, Y+55	; 0x37
    1b96:	01 97       	sbiw	r24, 0x01	; 1
    1b98:	9f ab       	std	Y+55, r25	; 0x37
    1b9a:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b9c:	8e a9       	ldd	r24, Y+54	; 0x36
    1b9e:	9f a9       	ldd	r25, Y+55	; 0x37
    1ba0:	00 97       	sbiw	r24, 0x00	; 0
    1ba2:	69 f7       	brne	.-38     	; 0x1b7e <LCD_VOID_Init_8Bit+0x2e4>
    1ba4:	2d c0       	rjmp	.+90     	; 0x1c00 <LCD_VOID_Init_8Bit+0x366>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba6:	68 ad       	ldd	r22, Y+56	; 0x38
    1ba8:	79 ad       	ldd	r23, Y+57	; 0x39
    1baa:	8a ad       	ldd	r24, Y+58	; 0x3a
    1bac:	9b ad       	ldd	r25, Y+59	; 0x3b
    1bae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	9f ab       	std	Y+55, r25	; 0x37
    1bb8:	8e ab       	std	Y+54, r24	; 0x36
    1bba:	8e a9       	ldd	r24, Y+54	; 0x36
    1bbc:	9f a9       	ldd	r25, Y+55	; 0x37
    1bbe:	9b ab       	std	Y+51, r25	; 0x33
    1bc0:	8a ab       	std	Y+50, r24	; 0x32
    1bc2:	8a a9       	ldd	r24, Y+50	; 0x32
    1bc4:	9b a9       	ldd	r25, Y+51	; 0x33
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	f1 f7       	brne	.-4      	; 0x1bc6 <LCD_VOID_Init_8Bit+0x32c>
    1bca:	9b ab       	std	Y+51, r25	; 0x33
    1bcc:	8a ab       	std	Y+50, r24	; 0x32
    1bce:	18 c0       	rjmp	.+48     	; 0x1c00 <LCD_VOID_Init_8Bit+0x366>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bd0:	fe 01       	movw	r30, r28
    1bd2:	ef 5b       	subi	r30, 0xBF	; 191
    1bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd6:	60 81       	ld	r22, Z
    1bd8:	71 81       	ldd	r23, Z+1	; 0x01
    1bda:	82 81       	ldd	r24, Z+2	; 0x02
    1bdc:	93 81       	ldd	r25, Z+3	; 0x03
    1bde:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	fe 01       	movw	r30, r28
    1be8:	e0 5c       	subi	r30, 0xC0	; 192
    1bea:	ff 4f       	sbci	r31, 0xFF	; 255
    1bec:	80 83       	st	Z, r24
    1bee:	fe 01       	movw	r30, r28
    1bf0:	e0 5c       	subi	r30, 0xC0	; 192
    1bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf4:	80 81       	ld	r24, Z
    1bf6:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bf8:	89 a9       	ldd	r24, Y+49	; 0x31
    1bfa:	8a 95       	dec	r24
    1bfc:	f1 f7       	brne	.-4      	; 0x1bfa <LCD_VOID_Init_8Bit+0x360>
    1bfe:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(50);

	LCD_Void_Write_Cmd(Init_Display_OnOff);
    1c00:	8c e0       	ldi	r24, 0x0C	; 12
    1c02:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <LCD_Void_Write_Cmd>
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	a8 e4       	ldi	r26, 0x48	; 72
    1c0c:	b2 e4       	ldi	r27, 0x42	; 66
    1c0e:	8d a7       	std	Y+45, r24	; 0x2d
    1c10:	9e a7       	std	Y+46, r25	; 0x2e
    1c12:	af a7       	std	Y+47, r26	; 0x2f
    1c14:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c16:	6d a5       	ldd	r22, Y+45	; 0x2d
    1c18:	7e a5       	ldd	r23, Y+46	; 0x2e
    1c1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c1c:	98 a9       	ldd	r25, Y+48	; 0x30
    1c1e:	2b ea       	ldi	r18, 0xAB	; 171
    1c20:	3a ea       	ldi	r19, 0xAA	; 170
    1c22:	4a e2       	ldi	r20, 0x2A	; 42
    1c24:	50 e4       	ldi	r21, 0x40	; 64
    1c26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	89 a7       	std	Y+41, r24	; 0x29
    1c30:	9a a7       	std	Y+42, r25	; 0x2a
    1c32:	ab a7       	std	Y+43, r26	; 0x2b
    1c34:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1c36:	69 a5       	ldd	r22, Y+41	; 0x29
    1c38:	7a a5       	ldd	r23, Y+42	; 0x2a
    1c3a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c3c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	40 e8       	ldi	r20, 0x80	; 128
    1c44:	5f e3       	ldi	r21, 0x3F	; 63
    1c46:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c4a:	88 23       	and	r24, r24
    1c4c:	1c f4       	brge	.+6      	; 0x1c54 <LCD_VOID_Init_8Bit+0x3ba>
		__ticks = 1;
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	88 a7       	std	Y+40, r24	; 0x28
    1c52:	91 c0       	rjmp	.+290    	; 0x1d76 <LCD_VOID_Init_8Bit+0x4dc>
	else if (__tmp > 255)
    1c54:	69 a5       	ldd	r22, Y+41	; 0x29
    1c56:	7a a5       	ldd	r23, Y+42	; 0x2a
    1c58:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c5a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	4f e7       	ldi	r20, 0x7F	; 127
    1c62:	53 e4       	ldi	r21, 0x43	; 67
    1c64:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c68:	18 16       	cp	r1, r24
    1c6a:	0c f0       	brlt	.+2      	; 0x1c6e <LCD_VOID_Init_8Bit+0x3d4>
    1c6c:	7b c0       	rjmp	.+246    	; 0x1d64 <LCD_VOID_Init_8Bit+0x4ca>
	{
		_delay_ms(__us / 1000.0);
    1c6e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1c70:	7e a5       	ldd	r23, Y+46	; 0x2e
    1c72:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c74:	98 a9       	ldd	r25, Y+48	; 0x30
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	4a e7       	ldi	r20, 0x7A	; 122
    1c7c:	54 e4       	ldi	r21, 0x44	; 68
    1c7e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	8c a3       	std	Y+36, r24	; 0x24
    1c88:	9d a3       	std	Y+37, r25	; 0x25
    1c8a:	ae a3       	std	Y+38, r26	; 0x26
    1c8c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c8e:	6c a1       	ldd	r22, Y+36	; 0x24
    1c90:	7d a1       	ldd	r23, Y+37	; 0x25
    1c92:	8e a1       	ldd	r24, Y+38	; 0x26
    1c94:	9f a1       	ldd	r25, Y+39	; 0x27
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	4a ef       	ldi	r20, 0xFA	; 250
    1c9c:	54 e4       	ldi	r21, 0x44	; 68
    1c9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	88 a3       	std	Y+32, r24	; 0x20
    1ca8:	99 a3       	std	Y+33, r25	; 0x21
    1caa:	aa a3       	std	Y+34, r26	; 0x22
    1cac:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1cae:	68 a1       	ldd	r22, Y+32	; 0x20
    1cb0:	79 a1       	ldd	r23, Y+33	; 0x21
    1cb2:	8a a1       	ldd	r24, Y+34	; 0x22
    1cb4:	9b a1       	ldd	r25, Y+35	; 0x23
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e8       	ldi	r20, 0x80	; 128
    1cbc:	5f e3       	ldi	r21, 0x3F	; 63
    1cbe:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1cc2:	88 23       	and	r24, r24
    1cc4:	2c f4       	brge	.+10     	; 0x1cd0 <LCD_VOID_Init_8Bit+0x436>
		__ticks = 1;
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	9f 8f       	std	Y+31, r25	; 0x1f
    1ccc:	8e 8f       	std	Y+30, r24	; 0x1e
    1cce:	3f c0       	rjmp	.+126    	; 0x1d4e <LCD_VOID_Init_8Bit+0x4b4>
	else if (__tmp > 65535)
    1cd0:	68 a1       	ldd	r22, Y+32	; 0x20
    1cd2:	79 a1       	ldd	r23, Y+33	; 0x21
    1cd4:	8a a1       	ldd	r24, Y+34	; 0x22
    1cd6:	9b a1       	ldd	r25, Y+35	; 0x23
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	3f ef       	ldi	r19, 0xFF	; 255
    1cdc:	4f e7       	ldi	r20, 0x7F	; 127
    1cde:	57 e4       	ldi	r21, 0x47	; 71
    1ce0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ce4:	18 16       	cp	r1, r24
    1ce6:	4c f5       	brge	.+82     	; 0x1d3a <LCD_VOID_Init_8Bit+0x4a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce8:	6c a1       	ldd	r22, Y+36	; 0x24
    1cea:	7d a1       	ldd	r23, Y+37	; 0x25
    1cec:	8e a1       	ldd	r24, Y+38	; 0x26
    1cee:	9f a1       	ldd	r25, Y+39	; 0x27
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	40 e2       	ldi	r20, 0x20	; 32
    1cf6:	51 e4       	ldi	r21, 0x41	; 65
    1cf8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	bc 01       	movw	r22, r24
    1d02:	cd 01       	movw	r24, r26
    1d04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	9f 8f       	std	Y+31, r25	; 0x1f
    1d0e:	8e 8f       	std	Y+30, r24	; 0x1e
    1d10:	0f c0       	rjmp	.+30     	; 0x1d30 <LCD_VOID_Init_8Bit+0x496>
    1d12:	88 ec       	ldi	r24, 0xC8	; 200
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	9d 8f       	std	Y+29, r25	; 0x1d
    1d18:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d1a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d1c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	f1 f7       	brne	.-4      	; 0x1d1e <LCD_VOID_Init_8Bit+0x484>
    1d22:	9d 8f       	std	Y+29, r25	; 0x1d
    1d24:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d26:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d28:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d2a:	01 97       	sbiw	r24, 0x01	; 1
    1d2c:	9f 8f       	std	Y+31, r25	; 0x1f
    1d2e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d30:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d32:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d34:	00 97       	sbiw	r24, 0x00	; 0
    1d36:	69 f7       	brne	.-38     	; 0x1d12 <LCD_VOID_Init_8Bit+0x478>
    1d38:	24 c0       	rjmp	.+72     	; 0x1d82 <LCD_VOID_Init_8Bit+0x4e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3a:	68 a1       	ldd	r22, Y+32	; 0x20
    1d3c:	79 a1       	ldd	r23, Y+33	; 0x21
    1d3e:	8a a1       	ldd	r24, Y+34	; 0x22
    1d40:	9b a1       	ldd	r25, Y+35	; 0x23
    1d42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	9f 8f       	std	Y+31, r25	; 0x1f
    1d4c:	8e 8f       	std	Y+30, r24	; 0x1e
    1d4e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d50:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d52:	9b 8f       	std	Y+27, r25	; 0x1b
    1d54:	8a 8f       	std	Y+26, r24	; 0x1a
    1d56:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d58:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d5a:	01 97       	sbiw	r24, 0x01	; 1
    1d5c:	f1 f7       	brne	.-4      	; 0x1d5a <LCD_VOID_Init_8Bit+0x4c0>
    1d5e:	9b 8f       	std	Y+27, r25	; 0x1b
    1d60:	8a 8f       	std	Y+26, r24	; 0x1a
    1d62:	0f c0       	rjmp	.+30     	; 0x1d82 <LCD_VOID_Init_8Bit+0x4e8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d64:	69 a5       	ldd	r22, Y+41	; 0x29
    1d66:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d68:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d6a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	88 a7       	std	Y+40, r24	; 0x28
    1d76:	88 a5       	ldd	r24, Y+40	; 0x28
    1d78:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d7a:	89 8d       	ldd	r24, Y+25	; 0x19
    1d7c:	8a 95       	dec	r24
    1d7e:	f1 f7       	brne	.-4      	; 0x1d7c <LCD_VOID_Init_8Bit+0x4e2>
    1d80:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(50);

	LCD_Void_Write_Cmd(Init_Display_Clear);
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <LCD_Void_Write_Cmd>
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	a0 e0       	ldi	r26, 0x00	; 0
    1d8e:	b0 e4       	ldi	r27, 0x40	; 64
    1d90:	8d 8b       	std	Y+21, r24	; 0x15
    1d92:	9e 8b       	std	Y+22, r25	; 0x16
    1d94:	af 8b       	std	Y+23, r26	; 0x17
    1d96:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d98:	6d 89       	ldd	r22, Y+21	; 0x15
    1d9a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1da0:	2b ea       	ldi	r18, 0xAB	; 171
    1da2:	3a ea       	ldi	r19, 0xAA	; 170
    1da4:	4a e2       	ldi	r20, 0x2A	; 42
    1da6:	50 e4       	ldi	r21, 0x40	; 64
    1da8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	89 8b       	std	Y+17, r24	; 0x11
    1db2:	9a 8b       	std	Y+18, r25	; 0x12
    1db4:	ab 8b       	std	Y+19, r26	; 0x13
    1db6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1db8:	69 89       	ldd	r22, Y+17	; 0x11
    1dba:	7a 89       	ldd	r23, Y+18	; 0x12
    1dbc:	8b 89       	ldd	r24, Y+19	; 0x13
    1dbe:	9c 89       	ldd	r25, Y+20	; 0x14
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	40 e8       	ldi	r20, 0x80	; 128
    1dc6:	5f e3       	ldi	r21, 0x3F	; 63
    1dc8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1dcc:	88 23       	and	r24, r24
    1dce:	1c f4       	brge	.+6      	; 0x1dd6 <LCD_VOID_Init_8Bit+0x53c>
		__ticks = 1;
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	88 8b       	std	Y+16, r24	; 0x10
    1dd4:	91 c0       	rjmp	.+290    	; 0x1ef8 <LCD_VOID_Init_8Bit+0x65e>
	else if (__tmp > 255)
    1dd6:	69 89       	ldd	r22, Y+17	; 0x11
    1dd8:	7a 89       	ldd	r23, Y+18	; 0x12
    1dda:	8b 89       	ldd	r24, Y+19	; 0x13
    1ddc:	9c 89       	ldd	r25, Y+20	; 0x14
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	4f e7       	ldi	r20, 0x7F	; 127
    1de4:	53 e4       	ldi	r21, 0x43	; 67
    1de6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1dea:	18 16       	cp	r1, r24
    1dec:	0c f0       	brlt	.+2      	; 0x1df0 <LCD_VOID_Init_8Bit+0x556>
    1dee:	7b c0       	rjmp	.+246    	; 0x1ee6 <LCD_VOID_Init_8Bit+0x64c>
	{
		_delay_ms(__us / 1000.0);
    1df0:	6d 89       	ldd	r22, Y+21	; 0x15
    1df2:	7e 89       	ldd	r23, Y+22	; 0x16
    1df4:	8f 89       	ldd	r24, Y+23	; 0x17
    1df6:	98 8d       	ldd	r25, Y+24	; 0x18
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	4a e7       	ldi	r20, 0x7A	; 122
    1dfe:	54 e4       	ldi	r21, 0x44	; 68
    1e00:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	8c 87       	std	Y+12, r24	; 0x0c
    1e0a:	9d 87       	std	Y+13, r25	; 0x0d
    1e0c:	ae 87       	std	Y+14, r26	; 0x0e
    1e0e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e10:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e12:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e14:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e16:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	4a ef       	ldi	r20, 0xFA	; 250
    1e1e:	54 e4       	ldi	r21, 0x44	; 68
    1e20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	88 87       	std	Y+8, r24	; 0x08
    1e2a:	99 87       	std	Y+9, r25	; 0x09
    1e2c:	aa 87       	std	Y+10, r26	; 0x0a
    1e2e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1e30:	68 85       	ldd	r22, Y+8	; 0x08
    1e32:	79 85       	ldd	r23, Y+9	; 0x09
    1e34:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e36:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e8       	ldi	r20, 0x80	; 128
    1e3e:	5f e3       	ldi	r21, 0x3F	; 63
    1e40:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e44:	88 23       	and	r24, r24
    1e46:	2c f4       	brge	.+10     	; 0x1e52 <LCD_VOID_Init_8Bit+0x5b8>
		__ticks = 1;
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	9f 83       	std	Y+7, r25	; 0x07
    1e4e:	8e 83       	std	Y+6, r24	; 0x06
    1e50:	3f c0       	rjmp	.+126    	; 0x1ed0 <LCD_VOID_Init_8Bit+0x636>
	else if (__tmp > 65535)
    1e52:	68 85       	ldd	r22, Y+8	; 0x08
    1e54:	79 85       	ldd	r23, Y+9	; 0x09
    1e56:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e58:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	3f ef       	ldi	r19, 0xFF	; 255
    1e5e:	4f e7       	ldi	r20, 0x7F	; 127
    1e60:	57 e4       	ldi	r21, 0x47	; 71
    1e62:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e66:	18 16       	cp	r1, r24
    1e68:	4c f5       	brge	.+82     	; 0x1ebc <LCD_VOID_Init_8Bit+0x622>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e6a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e6c:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e6e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e70:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	40 e2       	ldi	r20, 0x20	; 32
    1e78:	51 e4       	ldi	r21, 0x41	; 65
    1e7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	bc 01       	movw	r22, r24
    1e84:	cd 01       	movw	r24, r26
    1e86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	9f 83       	std	Y+7, r25	; 0x07
    1e90:	8e 83       	std	Y+6, r24	; 0x06
    1e92:	0f c0       	rjmp	.+30     	; 0x1eb2 <LCD_VOID_Init_8Bit+0x618>
    1e94:	88 ec       	ldi	r24, 0xC8	; 200
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	9d 83       	std	Y+5, r25	; 0x05
    1e9a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	f1 f7       	brne	.-4      	; 0x1ea0 <LCD_VOID_Init_8Bit+0x606>
    1ea4:	9d 83       	std	Y+5, r25	; 0x05
    1ea6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea8:	8e 81       	ldd	r24, Y+6	; 0x06
    1eaa:	9f 81       	ldd	r25, Y+7	; 0x07
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	9f 83       	std	Y+7, r25	; 0x07
    1eb0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb2:	8e 81       	ldd	r24, Y+6	; 0x06
    1eb4:	9f 81       	ldd	r25, Y+7	; 0x07
    1eb6:	00 97       	sbiw	r24, 0x00	; 0
    1eb8:	69 f7       	brne	.-38     	; 0x1e94 <LCD_VOID_Init_8Bit+0x5fa>
    1eba:	24 c0       	rjmp	.+72     	; 0x1f04 <LCD_VOID_Init_8Bit+0x66a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ebc:	68 85       	ldd	r22, Y+8	; 0x08
    1ebe:	79 85       	ldd	r23, Y+9	; 0x09
    1ec0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ec2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ec4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	9f 83       	std	Y+7, r25	; 0x07
    1ece:	8e 83       	std	Y+6, r24	; 0x06
    1ed0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ed2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ed4:	9b 83       	std	Y+3, r25	; 0x03
    1ed6:	8a 83       	std	Y+2, r24	; 0x02
    1ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eda:	9b 81       	ldd	r25, Y+3	; 0x03
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	f1 f7       	brne	.-4      	; 0x1edc <LCD_VOID_Init_8Bit+0x642>
    1ee0:	9b 83       	std	Y+3, r25	; 0x03
    1ee2:	8a 83       	std	Y+2, r24	; 0x02
    1ee4:	0f c0       	rjmp	.+30     	; 0x1f04 <LCD_VOID_Init_8Bit+0x66a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ee6:	69 89       	ldd	r22, Y+17	; 0x11
    1ee8:	7a 89       	ldd	r23, Y+18	; 0x12
    1eea:	8b 89       	ldd	r24, Y+19	; 0x13
    1eec:	9c 89       	ldd	r25, Y+20	; 0x14
    1eee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	88 8b       	std	Y+16, r24	; 0x10
    1ef8:	88 89       	ldd	r24, Y+16	; 0x10
    1efa:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1efc:	89 81       	ldd	r24, Y+1	; 0x01
    1efe:	8a 95       	dec	r24
    1f00:	f1 f7       	brne	.-4      	; 0x1efe <LCD_VOID_Init_8Bit+0x664>
    1f02:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2);

	LCD_Void_Write_Cmd(Init_Entry_Data_Set);
    1f04:	86 e0       	ldi	r24, 0x06	; 6
    1f06:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <LCD_Void_Write_Cmd>


}
    1f0a:	ca 5a       	subi	r28, 0xAA	; 170
    1f0c:	df 4f       	sbci	r29, 0xFF	; 255
    1f0e:	0f b6       	in	r0, 0x3f	; 63
    1f10:	f8 94       	cli
    1f12:	de bf       	out	0x3e, r29	; 62
    1f14:	0f be       	out	0x3f, r0	; 63
    1f16:	cd bf       	out	0x3d, r28	; 61
    1f18:	cf 91       	pop	r28
    1f1a:	df 91       	pop	r29
    1f1c:	1f 91       	pop	r17
    1f1e:	0f 91       	pop	r16
    1f20:	08 95       	ret

00001f22 <main>:
#include "LCD_Config.h"
#include "LCD_Interface.h"

#include "util/delay.h"

int main(){
    1f22:	df 93       	push	r29
    1f24:	cf 93       	push	r28
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
    1f2a:	2e 97       	sbiw	r28, 0x0e	; 14
    1f2c:	0f b6       	in	r0, 0x3f	; 63
    1f2e:	f8 94       	cli
    1f30:	de bf       	out	0x3e, r29	; 62
    1f32:	0f be       	out	0x3f, r0	; 63
    1f34:	cd bf       	out	0x3d, r28	; 61
	//co ==> o/p
	DIO_U8_SetPinDirection(Group_A,PIN0,OUTPUT);
    1f36:	80 e0       	ldi	r24, 0x00	; 0
    1f38:	60 e0       	ldi	r22, 0x00	; 0
    1f3a:	41 e0       	ldi	r20, 0x01	; 1
    1f3c:	0e 94 c6 07 	call	0xf8c	; 0xf8c <DIO_U8_SetPinDirection>

	//co ==> high
	DIO_U8_SetPinValue(Group_A,PIN0,HIGH);
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	60 e0       	ldi	r22, 0x00	; 0
    1f44:	41 e0       	ldi	r20, 0x01	; 1
    1f46:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_U8_SetPinValue>
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	aa e7       	ldi	r26, 0x7A	; 122
    1f50:	b4 e4       	ldi	r27, 0x44	; 68
    1f52:	8b 87       	std	Y+11, r24	; 0x0b
    1f54:	9c 87       	std	Y+12, r25	; 0x0c
    1f56:	ad 87       	std	Y+13, r26	; 0x0d
    1f58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	4a ef       	ldi	r20, 0xFA	; 250
    1f68:	54 e4       	ldi	r21, 0x44	; 68
    1f6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	8f 83       	std	Y+7, r24	; 0x07
    1f74:	98 87       	std	Y+8, r25	; 0x08
    1f76:	a9 87       	std	Y+9, r26	; 0x09
    1f78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f7c:	78 85       	ldd	r23, Y+8	; 0x08
    1f7e:	89 85       	ldd	r24, Y+9	; 0x09
    1f80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	40 e8       	ldi	r20, 0x80	; 128
    1f88:	5f e3       	ldi	r21, 0x3F	; 63
    1f8a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f8e:	88 23       	and	r24, r24
    1f90:	2c f4       	brge	.+10     	; 0x1f9c <main+0x7a>
		__ticks = 1;
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	9e 83       	std	Y+6, r25	; 0x06
    1f98:	8d 83       	std	Y+5, r24	; 0x05
    1f9a:	3f c0       	rjmp	.+126    	; 0x201a <main+0xf8>
	else if (__tmp > 65535)
    1f9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f9e:	78 85       	ldd	r23, Y+8	; 0x08
    1fa0:	89 85       	ldd	r24, Y+9	; 0x09
    1fa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	3f ef       	ldi	r19, 0xFF	; 255
    1fa8:	4f e7       	ldi	r20, 0x7F	; 127
    1faa:	57 e4       	ldi	r21, 0x47	; 71
    1fac:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fb0:	18 16       	cp	r1, r24
    1fb2:	4c f5       	brge	.+82     	; 0x2006 <main+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	40 e2       	ldi	r20, 0x20	; 32
    1fc2:	51 e4       	ldi	r21, 0x41	; 65
    1fc4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	bc 01       	movw	r22, r24
    1fce:	cd 01       	movw	r24, r26
    1fd0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	9e 83       	std	Y+6, r25	; 0x06
    1fda:	8d 83       	std	Y+5, r24	; 0x05
    1fdc:	0f c0       	rjmp	.+30     	; 0x1ffc <main+0xda>
    1fde:	88 ec       	ldi	r24, 0xC8	; 200
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	9c 83       	std	Y+4, r25	; 0x04
    1fe4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	f1 f7       	brne	.-4      	; 0x1fea <main+0xc8>
    1fee:	9c 83       	std	Y+4, r25	; 0x04
    1ff0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	9e 83       	std	Y+6, r25	; 0x06
    1ffa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    2000:	00 97       	sbiw	r24, 0x00	; 0
    2002:	69 f7       	brne	.-38     	; 0x1fde <main+0xbc>
    2004:	14 c0       	rjmp	.+40     	; 0x202e <main+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2006:	6f 81       	ldd	r22, Y+7	; 0x07
    2008:	78 85       	ldd	r23, Y+8	; 0x08
    200a:	89 85       	ldd	r24, Y+9	; 0x09
    200c:	9a 85       	ldd	r25, Y+10	; 0x0a
    200e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	9e 83       	std	Y+6, r25	; 0x06
    2018:	8d 83       	std	Y+5, r24	; 0x05
    201a:	8d 81       	ldd	r24, Y+5	; 0x05
    201c:	9e 81       	ldd	r25, Y+6	; 0x06
    201e:	9a 83       	std	Y+2, r25	; 0x02
    2020:	89 83       	std	Y+1, r24	; 0x01
    2022:	89 81       	ldd	r24, Y+1	; 0x01
    2024:	9a 81       	ldd	r25, Y+2	; 0x02
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	f1 f7       	brne	.-4      	; 0x2026 <main+0x104>
    202a:	9a 83       	std	Y+2, r25	; 0x02
    202c:	89 83       	std	Y+1, r24	; 0x01

	//delay 1000
	_delay_ms(1000);
	//co ==> low
	DIO_U8_SetPinValue(Group_A,PIN0,LOW);
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	60 e0       	ldi	r22, 0x00	; 0
    2032:	40 e0       	ldi	r20, 0x00	; 0
    2034:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_U8_SetPinValue>

	WDTCR = 0b00001111;
    2038:	e1 e4       	ldi	r30, 0x41	; 65
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	8f e0       	ldi	r24, 0x0F	; 15
    203e:	80 83       	st	Z, r24
    2040:	ff cf       	rjmp	.-2      	; 0x2040 <main+0x11e>

00002042 <__udivmodsi4>:
    2042:	a1 e2       	ldi	r26, 0x21	; 33
    2044:	1a 2e       	mov	r1, r26
    2046:	aa 1b       	sub	r26, r26
    2048:	bb 1b       	sub	r27, r27
    204a:	fd 01       	movw	r30, r26
    204c:	0d c0       	rjmp	.+26     	; 0x2068 <__udivmodsi4_ep>

0000204e <__udivmodsi4_loop>:
    204e:	aa 1f       	adc	r26, r26
    2050:	bb 1f       	adc	r27, r27
    2052:	ee 1f       	adc	r30, r30
    2054:	ff 1f       	adc	r31, r31
    2056:	a2 17       	cp	r26, r18
    2058:	b3 07       	cpc	r27, r19
    205a:	e4 07       	cpc	r30, r20
    205c:	f5 07       	cpc	r31, r21
    205e:	20 f0       	brcs	.+8      	; 0x2068 <__udivmodsi4_ep>
    2060:	a2 1b       	sub	r26, r18
    2062:	b3 0b       	sbc	r27, r19
    2064:	e4 0b       	sbc	r30, r20
    2066:	f5 0b       	sbc	r31, r21

00002068 <__udivmodsi4_ep>:
    2068:	66 1f       	adc	r22, r22
    206a:	77 1f       	adc	r23, r23
    206c:	88 1f       	adc	r24, r24
    206e:	99 1f       	adc	r25, r25
    2070:	1a 94       	dec	r1
    2072:	69 f7       	brne	.-38     	; 0x204e <__udivmodsi4_loop>
    2074:	60 95       	com	r22
    2076:	70 95       	com	r23
    2078:	80 95       	com	r24
    207a:	90 95       	com	r25
    207c:	9b 01       	movw	r18, r22
    207e:	ac 01       	movw	r20, r24
    2080:	bd 01       	movw	r22, r26
    2082:	cf 01       	movw	r24, r30
    2084:	08 95       	ret

00002086 <__prologue_saves__>:
    2086:	2f 92       	push	r2
    2088:	3f 92       	push	r3
    208a:	4f 92       	push	r4
    208c:	5f 92       	push	r5
    208e:	6f 92       	push	r6
    2090:	7f 92       	push	r7
    2092:	8f 92       	push	r8
    2094:	9f 92       	push	r9
    2096:	af 92       	push	r10
    2098:	bf 92       	push	r11
    209a:	cf 92       	push	r12
    209c:	df 92       	push	r13
    209e:	ef 92       	push	r14
    20a0:	ff 92       	push	r15
    20a2:	0f 93       	push	r16
    20a4:	1f 93       	push	r17
    20a6:	cf 93       	push	r28
    20a8:	df 93       	push	r29
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
    20ae:	ca 1b       	sub	r28, r26
    20b0:	db 0b       	sbc	r29, r27
    20b2:	0f b6       	in	r0, 0x3f	; 63
    20b4:	f8 94       	cli
    20b6:	de bf       	out	0x3e, r29	; 62
    20b8:	0f be       	out	0x3f, r0	; 63
    20ba:	cd bf       	out	0x3d, r28	; 61
    20bc:	09 94       	ijmp

000020be <__epilogue_restores__>:
    20be:	2a 88       	ldd	r2, Y+18	; 0x12
    20c0:	39 88       	ldd	r3, Y+17	; 0x11
    20c2:	48 88       	ldd	r4, Y+16	; 0x10
    20c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    20c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    20c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    20ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    20cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    20ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    20d0:	b9 84       	ldd	r11, Y+9	; 0x09
    20d2:	c8 84       	ldd	r12, Y+8	; 0x08
    20d4:	df 80       	ldd	r13, Y+7	; 0x07
    20d6:	ee 80       	ldd	r14, Y+6	; 0x06
    20d8:	fd 80       	ldd	r15, Y+5	; 0x05
    20da:	0c 81       	ldd	r16, Y+4	; 0x04
    20dc:	1b 81       	ldd	r17, Y+3	; 0x03
    20de:	aa 81       	ldd	r26, Y+2	; 0x02
    20e0:	b9 81       	ldd	r27, Y+1	; 0x01
    20e2:	ce 0f       	add	r28, r30
    20e4:	d1 1d       	adc	r29, r1
    20e6:	0f b6       	in	r0, 0x3f	; 63
    20e8:	f8 94       	cli
    20ea:	de bf       	out	0x3e, r29	; 62
    20ec:	0f be       	out	0x3f, r0	; 63
    20ee:	cd bf       	out	0x3d, r28	; 61
    20f0:	ed 01       	movw	r28, r26
    20f2:	08 95       	ret

000020f4 <_exit>:
    20f4:	f8 94       	cli

000020f6 <__stop_program>:
    20f6:	ff cf       	rjmp	.-2      	; 0x20f6 <__stop_program>
